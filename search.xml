<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hbase调优实战</title>
      <link href="blog/2020/1203:hbase%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/"/>
      <url>blog/2020/1203:hbase%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>hbase进阶与大数据存储调优案例。解决高并发大批量写入hbase丢数据问题，优化查询效率从5min减少到7s。</p><span id="more"></span><h2 id="hbase介绍"><a href="#hbase介绍" class="headerlink" title="hbase介绍"></a>hbase介绍</h2><h3 id="hbase底层原理"><a href="#hbase底层原理" class="headerlink" title="hbase底层原理"></a>hbase底层原理</h3><p>每个<code>ColumnFamily</code>建一个HStore，HStore由一个Memstore和一系列HFile组成。Memstore位于Region Server的主内存，HFile则被写入到HDFS。需要被写入的数据首先写入Memstore，达到一定阈值flush到HFile中，每次flush都会创建一个新的HFile。</p><p>StoreFile底层以HFile格式KeyValue（hadoop二进制文件）保存，一个StoreFile对应一个HFile。</p><p>当region的某个列族达到一个阈值（默认256M）时就会split出新的region。</p><p>memstore文件比hfile文件大，原因在于heapSize()内存中一个KeyValue对象除了本身实际内容外，还有 64byte是对象的内部实例等占用了部分空间。参考：<a href="https://www.cnblogs.com/bdifn/p/3776098.html">HBase MemStore与HStoreFile的大小分析</a></p><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/database/hbase/structure.png"></p><h3 id="关于LSM"><a href="#关于LSM" class="headerlink" title="关于LSM"></a>关于LSM</h3><p>LSM树原理：把一棵大树拆分成N棵小树，它首先写入内存中，随着小树越来越大，内存中的小树会flush到磁盘中，磁盘中的树定期可以做merge操作，合并成一棵大树，以优化读性能。No-SQL数据库一般采用LSM树作为数据结构，HBase也不例外。</p><p>LSM数据更新只在内存中操作，没有磁盘访问，因此比B+树要快。对于数据读来说，如果读取的是最近访问过的数据，LSM树能减少磁盘访问，提高性能。 LSM树实质上就是在读写之间得取平衡，和B+树比相，它牲牺了部份读性能，用来大幅进步写性能。</p><h2 id="全量日志表"><a href="#全量日志表" class="headerlink" title="全量日志表"></a>全量日志表</h2><p>该表存储接口请求的所有业务上报数据，每天几亿。</p><h3 id="region-server"><a href="#region-server" class="headerlink" title="region server"></a>region server</h3><p>数量：29</p><p>单个 server 的 max heap 50G，Direct Memory Configured 50G，Memstore Size 14.6G</p><h3 id="region"><a href="#region" class="headerlink" title="region"></a>region</h3><p>共80个，每个region40G存储空间</p><p>但是只有一个region有效，其他region的数据在spilit完以后已经过期删除，该region信息如下：</p><table><thead><tr><th>Region Name</th><th>Num. Stores</th><th>Num. Storefiles</th><th>Storefile Size Uncompressed</th><th>Storefile Size</th><th>Index Size</th><th>Bloom Size</th><th>Data Locality</th></tr></thead><tbody><tr><td><a href="http://rs060.hbase2.bjy.elong.com:60030/region.jsp?name=2bc43dc5c0a8a33675177eb79b48a861">hotel:shield_log_total,202004131244_e74d,1586919481374.2bc43dc5c0a8a33675177eb79b48a861.</a></td><td>1</td><td>39</td><td>6188861m</td><td>1728442m</td><td>4368608k</td><td>4219944k</td><td>1.0</td></tr></tbody></table><p>参考：<a href="https://www.cnblogs.com/jechedo/p/5145582.html">单个region server 的 region 数目上限</a>、<a href="https://blog.csdn.net/qq_35440040/article/details/83823583">hbase split操作</a></p><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;hotel:shield_log_total&#x27;, &#123;NAME =&gt; &#x27;log_info&#x27;, BLOOMFILTER =&gt; &#x27;ROW&#x27;, VERSIONS =&gt; &#x27;1&#x27;, IN_MEMORY =&gt; &#x27;false&#x27;, KEEP_DELETED_CELLS =&gt; &#x27;FALSE&#x27;, DATA_BLOCK_ENCODING =&gt; &#x27;NONE&#x27;, TTL =&gt; &#x27;2592000 SECONDS (30 DAYS)&#x27;, COMPRESSION =&gt; &#x27;LZO&#x27;, MIN_VERSIONS =&gt; &#x27;0&#x27;, BLOCKCACHE =&gt; &#x27;true&#x27;, BLOCKSIZE =&gt; &#x27;65536&#x27;, REPLICATION_SCOPE =&gt; &#x27;0&#x27;, CONFIGURATION =&gt; &#123;&#x27;hbase.hregion.max.filesize&#x27; =&gt; &#x27;42949672960&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>mob说明：<a href="https://blog.csdn.net/bingdianone/article/details/84863248">https://blog.csdn.net/bingdianone/article/details/84863248</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># region 副本数</span></span><br><span class="line"><span class="meta">dfs.replication</span>=<span class="string">3</span></span><br><span class="line"><span class="comment"># 该值&gt;=3时才开启mob特性</span></span><br><span class="line"><span class="meta">hfile.format.version</span>=<span class="string">2</span></span><br><span class="line"><span class="comment"># mob 压缩批处理中允许的最大mob文件数量，合并小的mob文件，mob特性用于存储二进制，如图片等</span></span><br><span class="line"><span class="meta">hbase.mob.file.compaction.batch.size</span>=<span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入 memstore 的累计大小超过该值时执行flush，生成 hfile</span></span><br><span class="line"><span class="meta">hbase.hregion.memstore.flush.size</span>=<span class="string">134217728（128M）</span></span><br><span class="line"><span class="comment"># 单个Region内所有的memstore大小总和,超过则flush到磁盘，默认值0.4。这个参数的作用是防止内存占用过大，当ReigonServer内所有region的memstores所占用内存总和达到heap的40%时，HBase会强制block所有的更新并flush这些region以释放所有memstore占用的内存。</span></span><br><span class="line"><span class="attr">hbase.regionserver.global.memstore.upperLimit</span></span><br><span class="line"><span class="comment"># 默认值0.35。在所有region的memstores所占用内存达到Heap的35%时，不flush所有的memstore。它会找一个memstore内存占用最大的region，做个别flush，此时写更新还是会被block。</span></span><br><span class="line"><span class="attr">base.regionserver.global.memstore.lowerLimit</span></span><br><span class="line"><span class="comment"># 单个memstore大小超过该倍数值则block所有写入请求，自我保护</span></span><br><span class="line"><span class="attr">hbase.hregion.memstore.block.multiplier</span></span><br><span class="line"><span class="comment"># 一次 minor compaction最少合并的HFile数量，高版本叫 hbase.hstore.compaction.min</span></span><br><span class="line"><span class="meta">hbase.hstore.compactionThreshold</span>=<span class="string">3</span></span><br><span class="line"><span class="comment"># Major compaction周期性时间间隔，默认值604800000，单位ms。HBase 0.96.x及之前默认为1天调度一次。设置为 0 表示禁用自动触发major compaction。</span></span><br><span class="line"><span class="meta">hbase.hregion.majorcompaction</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 一次 minor compaction最多合并的HFile数量，默认值 10。这个参数也是控制着一次压缩的时间。</span></span><br><span class="line"><span class="meta">hbase.hstore.compaction.max</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># compaction过程中，每次从Hfile中读取kv的个数</span></span><br><span class="line"><span class="meta">hbase.hstore.compaction.kv.max</span>=<span class="string">100</span></span><br><span class="line"><span class="comment"># 每隔一定时间检查是否需要进行compaction</span></span><br><span class="line"><span class="meta">hbase.server.thread.wakefrequency</span>=<span class="string">100</span></span><br><span class="line"><span class="comment"># large 和 small compaction 线程池线程数</span></span><br><span class="line"><span class="meta">hbase.regionserver.thread.compaction.small</span>=<span class="string">40</span></span><br><span class="line"><span class="meta">hbase.regionserver.thread.compaction.large</span>=<span class="string">2</span></span><br><span class="line"><span class="comment"># compact（major和minor）请求进入large和small compact线程池的临界点，默认 2 * this.minFilesToCompact * this.region.memstoreFlushSize</span></span><br><span class="line"><span class="meta">hbase.regionserver.thread.compaction.throttle</span>=<span class="string">？</span></span><br><span class="line"><span class="comment"># 超过该值阻塞写入</span></span><br><span class="line"><span class="meta">hbase.hstore.blockingStoreFiles</span>=<span class="string">40</span></span><br><span class="line"><span class="comment"># 阻塞写入的时间，单位ms</span></span><br><span class="line"><span class="meta">hbase.hstore.blockingWaitTime</span>=<span class="string">30000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个region中最大store的压缩后的hfile大小，大于设置阈值之后触发region切分（对于下面的策略来说）</span></span><br><span class="line"><span class="meta">hbase.hregion.max.filesize</span>=<span class="string">10737418240(10G)</span></span><br><span class="line"><span class="comment"># 切分策略，线上使用hbase版本是1.2.0，默认采用该策略。使用上面的store配置进行切分</span></span><br><span class="line"><span class="comment"># 0.98版本后默认使用IncreasingToUpperBoundRegionSplitPolicy</span></span><br><span class="line"><span class="meta">hbase.regionserver.region.split.policy</span>=<span class="string">org.apache.hadoop.hbase.regionserver.ConstantSizeRegionSplitPolicy</span></span><br></pre></td></tr></table></figure><h3 id="写入问题"><a href="#写入问题" class="headerlink" title="写入问题"></a>写入问题</h3><h4 id="热点问题"><a href="#热点问题" class="headerlink" title="热点问题"></a>热点问题</h4><p>rowkey写入规则为yyyyMMddHHmm_唯一标识，存在写入热点问题，频繁超时、日志丢失，需要优化。</p><h4 id="flush频率较高"><a href="#flush频率较高" class="headerlink" title="flush频率较高"></a>flush频率较高</h4><p>如图所示，flush间隔时间大约10s，每次flush128M数据</p><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/database/hbase/flush.png"></p><h4 id="compact问题"><a href="#compact问题" class="headerlink" title="compact问题"></a>compact问题</h4><p>现在的配置是每个region最多40个hfile，flush频繁导致compact也会很频繁。</p><ol><li><p>参考</p><p><a href="https://blog.csdn.net/mt0803/article/details/9372227">HBase compact 总结 及 调优配置</a></p><p><a href="https://blog.csdn.net/u011598442/article/details/90632702">深入理解 HBase Compaction 机制</a></p><p><a href="https://blog.csdn.net/zyc88888/article/details/79666846">HBase Compaction详解</a></p></li><li><p>compaction触发条件：memstore flush时检查、定时任务周期检查、hbase shell 或 master ui 或 hbase api 等方式手动触发。</p></li><li><p>写请求非常多导致不断生成HFile，但compact的速度远远跟不上HFile生成的速度，这样就会使HFile的数量会越来越多，导致读性能急剧下降。为了避免这种情况，在HFile的数量过多的时候会限制写请求的速度：在每次执行MemStore flush的操作前，如果HStore的HFile数超过hbase.hstore.blockingStoreFiles （默认7），则会阻塞flush操作hbase.hstore.blockingWaitTime时间，在这段时间内，如果compact操作使得HStore文件数下降到回这个值，则停止阻塞。另外阻塞超过时间后，也会恢复执行flush操作。这样做就可以有效地控制大量写请求的速度，但同时这也是影响写请求速度的主要原因之一。</p></li><li><p>HBase主要有两种minor策略：RatioBasedCompactionPolicy（0.94默认，我们采用的）和ExploringCompactionPolicy（0.96后默认，IO性能提升10%）</p></li></ol><h4 id="region-split-问题"><a href="#region-split-问题" class="headerlink" title="region split 问题"></a>region split 问题</h4><ol><li><p>参考：<a href="https://blog.csdn.net/lingbo229/article/details/82751576">HBase最佳实践之Region数量&amp;大小</a>、<a href="https://blog.csdn.net/op07p6Aaqo9u71/article/details/78794734">HBase Region自动切分的所有细节</a></p><p>memstore总大小默认为堆内存的40%</p></li><li><p>当单个hfile大小超过限额时，会出现 region split。目前全量日志表没有做预分区，因此所有日志都向一个region写，当写入频繁而region非常大时，会出现<a href="%5Bhttps://www.yuanmas.com/info/9ezZwrWZa6.html">Hbase写入量大导致region过大无法split</a></p><p>正常split：隔几天split一次</p><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/database/hbase/split_normal.png"></p><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/database/hbase/split_normal_2.png"></p><p>太大无法spilit：很久没有split</p><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/database/hbase/split_abnormal.png"></p></li></ol><h3 id="写入问题分析和解决思路"><a href="#写入问题分析和解决思路" class="headerlink" title="写入问题分析和解决思路"></a>写入问题分析和解决思路</h3><ol><li><p>由于hbase数据是按照字典序排序，没有分区会导致连续数据集中写入同一个region，所以解决写入热点问题主要原理是将并发写入的数据打散，分布均匀的写入到多个region。</p></li><li><p>写入数据总览</p><p>region名：<a href="http://rs067.hbase2.bjy.elong.com:60030/region.jsp?name=f6a7dfcbe71eb36e12047c2c1e1dae40">hotel:shield_log_total,202010281022_abdf:,1604395921838.f6a7dfcbe71eb36e12047c2c1e1dae40.</a></p><p>文件起始 202010281022，截止到202011041022，<strong>Storefile Size Uncompressed</strong> 4788807m（4676G），<strong>Storefile Size</strong> 1352194m（1320G）</p><p>共计7天的数据，按照压缩后的文件大小计算后约 <strong>188.6G/d</strong>，约 7.86G/h，按照总量是35G/h。</p></li><li><p>解决方案先预分区，然后根据读取性能需要，将messageId按照hash方式映射到各个region中，再加上时间戳。分区案例：<code>create &#39;hotel:shield_log_analyse_ip&#39;, &#123;NAME =&gt; &#39;info&#39;,  TTL =&gt; &#39;7776000&#39;&#125;, &#123;SPLITS =&gt; [&#39;20&#39;, &#39;40&#39;, &#39;60&#39;, &#39;80&#39;]&#125;</code></p></li><li><p>计算每RS（假设一个表）region的数量的公式为：</p><p>((RS memory) * (total memstore fraction)) / ((memstore size)*(# column families))</p><p>例如： 如果 一个RegionServer配置的内存是16g,使用默认配置（ hbase默认regionserver分给memstore的比例是0.4 ， 默认的menstore的占用128M内存 ）， 一个CF，那么这个regionServer下的region的个数大约为 16384 * 0.4 / （128*1） = 51个，实际测试大于这个数 一两倍 也没太大的问题。 一个HBase表包含一至多个region，那么表的数目上限也是可以估算出来的。</p></li></ol><h3 id="读取问题"><a href="#读取问题" class="headerlink" title="读取问题"></a>读取问题</h3><h4 id="全量扫描读取缓慢"><a href="#全量扫描读取缓慢" class="headerlink" title="全量扫描读取缓慢"></a>全量扫描读取缓慢</h4><h4 id="读取问题分析和解决思路"><a href="#读取问题分析和解决思路" class="headerlink" title="读取问题分析和解决思路"></a>读取问题分析和解决思路</h4><ol><li><p>查询条件均包含时间，核心的几个处理流程基本上都会指定渠道或actions，日志分析还包括resultType因此在设计rowkey可以给rowkey增加这些字段，让查询速度更快。</p></li><li><p>避免热点的话就需要预分区，比如可以分为100个预分区（00-99），按照上面统计的35G/h，这样每个分区每小时0.35G数据。提高写性能主要是减少compact次数，按照每个memstore 128M，大约350M/128M=3次/h，约20分钟写一次hfile，而超过40次才会发生compact，这样compact的间隔可以控制在40/3=13h。每天大约发生两次compact，hbase写入由原先的10s一次，大约12h发生4000次compact，写入性能大大提高。</p></li><li><p>预分区前缀会导致查询时遍历所有region，导致查询性能降低这个是不可避免的一个趋势，可以通过多线程去解决这个问题。但是由于需要兼容之前的逻辑，所以需要在每个region里查询时都要尽量带上时间戳。但是rowkey也不能设计的过长避免浪费内存（写入和compact都以kv形式存在），所以初步设计rowkey如下：</p><blockquote><p>分区号_yyyyMMddHHmm_source_method_resultType_uuid，例如 25_202011042324_Andriod_getHotelList_1_ask54n83fal4</p></blockquote></li><li><p>最后就是考虑查询时的代码兼容。老表数据量严重超标而且无法split已经不堪重负，直接写入新rowkey没多大意义。而且预分区需要在建表时指定，新建一个表数据双写，等过了几天之后一键切换表名。然后就是查询，考虑兼容时间问题，在每个region查询时都要在分区数字之后加上时间戳。website项目里主要是去修改公共的查询方法，在时间戳前面加上region分区号，遍历每个region指定时间的数据后统一返回。mapreduce需要在main入口输入起始startRowkey和endRowkey，加入正则或者字符串过滤器。</p></li><li><p>bloomfilter提高随机读性能，row只针对行，rowcol针对行和列，可以只查满足条件的storefile。但该表主要是scan，没有get场景，不需要设置bloomfilter。</p></li><li><p>第一版建表语句如下：（随机分区）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create &#x27;hotel:shield_log&#x27;, &#123;NAME =&gt; &#x27;log_info&#x27;,  TTL =&gt; &#x27;2592000&#x27;, VERSION =&gt; &#x27;1&#x27;&#125;, &#123;SPLITS =&gt; [&#x27;00&#x27;, &#x27;01&#x27;, &#x27;02&#x27;, &#x27;03&#x27;, ..., &#x27;99&#x27;]&#125;</span><br></pre></td></tr></table></figure><p>保留30天数据，预分区100个，每份数据保留版本1个</p><p>效果：但无法兼容之前的分页查询</p></li><li><p>第二版建表语句如下：（新版，翻转时间串）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create &#x27;hotel:shield_log&#x27;, &#123;NAME =&gt; &#x27;log_info&#x27;,  TTL =&gt; &#x27;2592000&#x27;, VERSION =&gt; &#x27;1&#x27;&#125;, &#123;SPLITS =&gt; [&#x27;00&#x27;, &#x27;01&#x27;, &#x27;02&#x27;, &#x27;03&#x27;, ..., &#x27;59&#x27;]&#125;</span><br></pre></td></tr></table></figure><p>保留30天数据，预分区60个（一分钟一个分区），每份数据保留版本1个</p><p>rowkey设计：</p><blockquote><p>二期：mmHHddMM_periodId_sourceId_uri_resultType_uuid</p><p>例如42082511_2_112_123_/abc/dss_ask54n83fal4</p><p>一期：mmHHddMM_periodId_sourceId_method_resultType_uuid</p><p>例如 42082511_1_100_102_getHotelDetail_kasdlew23fd</p></blockquote><p>效果：原来需要查一分钟的日志量需要耗时60s左右，现在只需要3s。但是需要对原来的时间格式做修改，仍然无法做到不改动其他逻辑兼容之前顺序设计的时间格式</p></li><li><p>最终修改版建表语句：（分钟数单独作为分区位，时间串保持之前的顺序格式）</p><blockquote><p>mm_yyyyMMddHHmm_periodId_sourceId_uri_resultType_uuid</p><p>例如 12_202012031012_2_233_/abc/ddd_asdlkfasd3</p></blockquote><p>效果：完全兼容老版本，并减少scan扫描的数据量。经测试，原表查询5分钟的数据，新表只需7s。</p></li></ol><h3 id="hbase其他优化"><a href="#hbase其他优化" class="headerlink" title="hbase其他优化"></a>hbase其他优化</h3><p><a href="http://www.blogjava.net/DLevin/archive/2015/08/22/426877.html">http://www.blogjava.net/DLevin/archive/2015/08/22/426877.html</a></p><p><a href="http://www.blogjava.net/DLevin/archive/2015/08/22/426950.html">http://www.blogjava.net/DLevin/archive/2015/08/22/426950.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/69740865">https://zhuanlan.zhihu.com/p/69740865</a></p><h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><p>HBase在写入数据块到HDFS之前会首先对数据进行压缩，再落盘，从而减少磁盘空间使用量。而在读数据的时候首先从HDFS中加载出block块之后进行解压缩，然后再缓存到BlockCache，最后返回给用户。</p><table><thead><tr><th>压缩算法</th><th>压缩比率</th><th>压缩速度</th><th>解压速度</th></tr></thead><tbody><tr><td>GZIP</td><td>13.4%</td><td>21 MB/s</td><td>118 MB/s</td></tr><tr><td>LZO</td><td>20.5%</td><td>135 MB/s</td><td>410 MB/s</td></tr><tr><td>Snappy</td><td>22.2%</td><td>172 MB/s</td><td>409 MB/s</td></tr></tbody></table><p>综合来看，Snappy的压缩率最低，但是编解码速率最高，对CPU的消耗也最小，目前一般建议使用Snappy。</p><h3 id="后续跟踪"><a href="#后续跟踪" class="headerlink" title="后续跟踪"></a>后续跟踪</h3><p>按照新方案设计的全量日志表shield_log在读写方面完全解决掉了之前的痛点问题，但是时间长了以后会发现，仅过去一个月切分出了800个分区。。原因还是日志量过大split分区频繁。此时需要加以其他辅助，例如将老的region进行合并或删除等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>neo4j实战</title>
      <link href="blog/2020/0527:neo4j%E5%AE%9E%E6%88%98/"/>
      <url>blog/2020/0527:neo4j%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>使用neo4j建立知识图谱，优化进阶与实战踩坑。</p><span id="more"></span><h2 id="neo4j-简介与优化"><a href="#neo4j-简介与优化" class="headerlink" title="neo4j 简介与优化"></a>neo4j 简介与优化</h2><h3 id="架构与存储"><a href="#架构与存储" class="headerlink" title="架构与存储"></a>架构与存储</h3><p>社区版：单节点，可存储200亿数据</p><p>企业版：支持集群</p><p>数据存储：<a href="https://www.jianshu.com/p/32ce953604d5">Neo4j如何对大量数据(千万节点及以上)进行初始化</a></p><p>简介与优化：<a href="https://zhuanlan.zhihu.com/p/36404872">知识图谱和 Neo4j 浅析</a></p><p>语法与java 调用：<a href="https://blog.csdn.net/sunroyi666/article/details/80801859">Neo4j的使用与Java调用实例</a> <a href="https://www.cnblogs.com/jpfss/p/11540537.html">neo4j 基本语法笔记</a></p><h3 id="时间序问题"><a href="#时间序问题" class="headerlink" title="时间序问题"></a>时间序问题</h3><p>给关系增加时间属性，相同实体每次更新时间即可</p><p>neo4j 时间格式：<a href="https://blog.csdn.net/temotemo/article/details/80584017">neo4j的日期时间格式转换函数</a></p><p>timestamp(): 存入的是毫秒数，可以通过 <code>return timestamp()</code>来查看</p><p>时间范围参考案例：<a href="https://blog.csdn.net/weixin_33781606/article/details/88567823">cypher 的时间日期范围操作</a></p><h3 id="旧数据删除问题"><a href="#旧数据删除问题" class="headerlink" title="旧数据删除问题"></a>旧数据删除问题</h3><p>给每个实体增加创建时间和更新时间，给每个关系增加创建时间和更新时间</p><p>这样删除的时候可以根据清理策略先删除关系，再将相应的实体删除</p><h3 id="联系的方向问题"><a href="#联系的方向问题" class="headerlink" title="联系的方向问题"></a>联系的方向问题</h3><p>参考：<a href="https://www.jianshu.com/p/a25a1907b926">Neo4j数据建模优化：双向关系</a></p><p>关系是存在方向的，例如父子关系。但是对于朋友这种关系来说是互相的。</p><p>对于 neo4j，查询的时候可以不用指明关系方向，因此朋友关系只需要建立一个关系边即可。</p><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="查看所有-删除所有"><a href="#查看所有-删除所有" class="headerlink" title="查看所有/删除所有"></a>查看所有/删除所有</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">match (n) return n</span><br><span class="line">match (n) detach delete n</span><br></pre></td></tr></table></figure><h4 id="创建一个关联实体和关系"><a href="#创建一个关联实体和关系" class="headerlink" title="创建一个关联实体和关系"></a>创建一个关联实体和关系</h4><p>参考：<a href="https://www.zhihu.com/question/53094828">neo4j如何为关系添加时间</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match (ip1:IP) where ip1.value&#x3D;&quot;192.168.0.1&quot;</span><br><span class="line">create (d1:DEVICE&#123;value:&quot;deviceId1&quot;, source:&quot;android_app&quot;&#125;),</span><br><span class="line">(ip1)-[:ASSOCIATE&#123;latest:timestamp()&#125;]-&gt;(d1)</span><br></pre></td></tr></table></figure><h4 id="使用时间进行关联"><a href="#使用时间进行关联" class="headerlink" title="使用时间进行关联"></a>使用时间进行关联</h4><p>查找 Ip1 并找出关联时间范围在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">match (ip1:IP) where ip1.value&#x3D;&quot;192.168.0.1&quot;</span><br><span class="line">with ip1</span><br><span class="line">match (ip1)-[r:ASSOCIATE]-(d1:DEVICE) where timestamp() - r.latest &lt;&#x3D; 5*1000*1000</span><br><span class="line">return ip1,d1</span><br></pre></td></tr></table></figure><h4 id="查询关联数量"><a href="#查询关联数量" class="headerlink" title="查询关联数量"></a>查询关联数量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">match (d1:DEVICE) where d1.value &#x3D; &quot;deviceId1&quot; optional match (d1)-[:ASSOCIATE]-(:IP) return count(d1.value)</span><br></pre></td></tr></table></figure><h4 id="创建多个关联实体和关系"><a href="#创建多个关联实体和关系" class="headerlink" title="创建多个关联实体和关系"></a>创建多个关联实体和关系</h4><p>查找已创建的 ip 节点和 device 节点，新建 cardNo1 节点和 smDeviceId1 节点，并新建 ip1-cardNO1，ip1-smDeviceId1，deviceId1-cardNo1，deviceId1-smDeviceId1 四个关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">match (ip1:IP) where ip1.value&#x3D;&quot;192.168.0.1&quot;</span><br><span class="line">optional match (ip1)-[:ASSOCIATE]-(d1:DEVICE)</span><br><span class="line">create (card1:CARDNO&#123;value:&quot;cardNo1&quot;&#125;),(smd1:SMDEVICE&#123;value:&quot;smDeviceId1&quot;&#125;),</span><br><span class="line">(ip1)-[:ASSOCIATE&#123;latest:timestamp()&#125;]-&gt;(card1),</span><br><span class="line">(ip1)-[:ASSOCIATE&#123;latest:timestamp()&#125;]-&gt;(smd1),</span><br><span class="line">(d1)-[:ASSOCIATE&#123;latest:timestamp()&#125;]-&gt;(card1),</span><br><span class="line">(d1)-[:ASSOCIATE&#123;latest:timestamp()&#125;]-&gt;(smd1)</span><br></pre></td></tr></table></figure><h4 id="查询多个关系实体"><a href="#查询多个关系实体" class="headerlink" title="查询多个关系实体"></a>查询多个关系实体</h4><p>查找 ip1 并找出与 ip1关联的 deviceIds 以及与 deviceIds 关联的 cardNo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">match (ip1:IP)-[:ASSOCIATE]-(d1:DEVICE)-[:ASSOCIATE]-(c1:CARDNO) WHERE ip1.value&#x3D;&quot;192.168.0.1&quot; return ip1,d1,c1</span><br></pre></td></tr></table></figure><h4 id="更新实体属性"><a href="#更新实体属性" class="headerlink" title="更新实体属性"></a>更新实体属性</h4><p>优势：merge 语法，已存在不变，变化部分合并</p><p>参考：<a href="https://neo4j.com/docs/developer-manual/3.4/cypher/clauses/merge/#merge-merge-with-on-create">merge 官方case</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 第一个 merge 更新 ip 的 updateTime，第二个 merge 无效（节点已存在），最后把关系的属性 latest 更新到最新</span><br><span class="line">MERGE (ip:IP&#123;value:&quot;192.168.0.1&quot;&#125;) ON MATCH SET ip.updateTime&#x3D;localdatetime(&#39;2020-04-23T17:38:00&#39;), ip.type&#x3D;&quot;黑名单&quot;</span><br><span class="line">MERGE (d1:DEVICE&#123;value:&quot;deviceId1&quot;&#125;) ON CREATE SET d1.updateTime&#x3D;localdatetime(&#39;2020-04-23T17:47:00&#39;)</span><br><span class="line">with ip, d1</span><br><span class="line">MATCH (ip)-[aso:ASSOCIATE]-(d1)</span><br><span class="line">SET aso.latest &#x3D; timestamp()</span><br><span class="line">return ip,d1</span><br></pre></td></tr></table></figure><h4 id="添加约束索引"><a href="#添加约束索引" class="headerlink" title="添加约束索引"></a>添加约束索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create constraint on (ip:IP) ASSERT ip.value IS UNIQUE</span><br><span class="line">create index on :IP(updateTime)</span><br></pre></td></tr></table></figure><h4 id="时间相关"><a href="#时间相关" class="headerlink" title="时间相关"></a>时间相关</h4><p>官网时间格式：<a href="https://neo4j.com/docs/cypher-manual/current/syntax/temporal/#cypher-temporal-introduction">各种时间格式</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RETURN time(&#39;13:42:19&#39;)+ duration(&#123; days: 1, hours: 12 &#125;) AS theTime</span><br></pre></td></tr></table></figure><ol><li><p>给某个时间加减时间与另外一个时间作对比</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with localdatetime(&#39;2020-04-23T16:40:00&#39;) as dt1, localdatetime(&#39;2020-04-23T16:00:00&#39;)  as dt2</span><br><span class="line">return dt1+duration(&#39;PT-41M&#39;) &gt; dt2</span><br></pre></td></tr></table></figure></li></ol><h3 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h3><h4 id="新增或更新节点和与之关联的其他节点、关系"><a href="#新增或更新节点和与之关联的其他节点、关系" class="headerlink" title="新增或更新节点和与之关联的其他节点、关系"></a>新增或更新节点和与之关联的其他节点、关系</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">merge (cd:CARD_NO&#123;value:&#39;cardNoTest11&#39;&#125;)</span><br><span class="line">on create set cd.createTime&#x3D;&#39;2020-04-27T13:00:00&#39;</span><br><span class="line">on match set cd.updateTime&#x3D;&#39;2020-04-27T13:20:00&#39;</span><br><span class="line">with cd</span><br><span class="line">merge (cd)-[r:LINK]-(d:DEVICE&#123;value:&#39;device2&#39;&#125;)</span><br><span class="line">on create set d.createTime&#x3D;&#39;2020-04-27T13:10:00&#39;, r.createTime&#x3D;&#39;2020-04-27T13:10:00&#39;</span><br><span class="line">set r.updateTime&#x3D;&#39;2020-04-27T13:20:00&#39;, d.updateTime&#x3D;&#39;2020-04-27T13:20:00&#39;</span><br><span class="line">return cd,r,d</span><br></pre></td></tr></table></figure><h4 id="新建关系"><a href="#新建关系" class="headerlink" title="新建关系"></a>新建关系</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">match (varFrom:CARD_NO&#123;value:&#39;cardNoTest11&#39;&#125;), (varTo:DEVICE&#123;value:&#39;deviceTest13&#39;&#125;)</span><br><span class="line">merge (varFrom)-[rel:LINK]-(varTo)</span><br><span class="line">on create set rel.createTime&#x3D;&#39;relCreateTime&#39;</span><br><span class="line">set varFrom.updateTime&#x3D;&#39;varFromUpdateTime&#39;, rel.updateTime&#x3D;&#39;relUpdateTime&#39;, varTo.updateTime&#x3D;&#39;varToUpdateTime&#39;</span><br></pre></td></tr></table></figure><h4 id="建立或更新节点与关系"><a href="#建立或更新节点与关系" class="headerlink" title="建立或更新节点与关系"></a>建立或更新节点与关系</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">merge (varFrom:CARD_NO&#123;value:&#39;cardNoTest11&#39;&#125;)</span><br><span class="line">on create set varFrom.createTime&#x3D;&#39;2020-05-02T22:10&#39;, varFrom.type &#x3D; &#39;CARD_NO&#39;</span><br><span class="line">merge (varTo:DEVICE&#123;value:&#39;dd2&#39;&#125;)</span><br><span class="line">on create set varTo.createTime&#x3D;&#39;2020-05-02T22:10&#39;, varTo.type &#x3D; &#39;DEVICE&#39;</span><br><span class="line">merge (varFrom)-[rel:LINK]-(varTo)</span><br><span class="line">on create set rel.createTime&#x3D;&#39;2020-05-02T22:10&#39;</span><br><span class="line">set varFrom.updateTime&#x3D;&#39;2020-05-02T22:10&#39;, rel.updateTime&#x3D;&#39;2020-05-02T22:10&#39;, varTo.updateTime&#x3D;&#39;2020-05-02T22:10&#39;</span><br></pre></td></tr></table></figure><h4 id="删除小于等于某个时间的关系和主节点"><a href="#删除小于等于某个时间的关系和主节点" class="headerlink" title="删除小于等于某个时间的关系和主节点"></a>删除小于等于某个时间的关系和主节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">match (cd:CARD_NO&#123;value:&#39;cardNo1&#39;&#125;)-[r:LINK]-(n) where localdatetime(r.updateTime) &lt;&#x3D; localdatetime(&#39;2020-04-28T16:58:10&#39;)</span><br><span class="line">delete cd,r</span><br></pre></td></tr></table></figure><h4 id="对匹配到的节点遍历计算关联节点数"><a href="#对匹配到的节点遍历计算关联节点数" class="headerlink" title="对匹配到的节点遍历计算关联节点数"></a>对匹配到的节点遍历计算关联节点数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MATCH p&#x3D;(cd:DEVICE)-[r:LINK]-(:CARD_NO)</span><br><span class="line">WHERE localdatetime(r.updateTime) &gt;&#x3D; localdatetime(&#39;2020-04-30T00:00&#39;)</span><br><span class="line">UNWIND NODES(p) as x</span><br><span class="line">WITH COUNT(x) as cc, x, cd</span><br><span class="line">WHERE cc &gt; 1</span><br><span class="line">RETURN cd</span><br></pre></td></tr></table></figure><h4 id="查询更新时间大于某个时间的指定关联特征数量大于等于2的所有节点"><a href="#查询更新时间大于某个时间的指定关联特征数量大于等于2的所有节点" class="headerlink" title="查询更新时间大于某个时间的指定关联特征数量大于等于2的所有节点"></a>查询更新时间大于某个时间的指定关联特征数量大于等于2的所有节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MATCH (cd:DEVICE)-[:LINK]-(:CARD_NO)</span><br><span class="line">WHERE localdatetime(cd.updateTime) &gt; localdatetime(&#39;2020-04-30T15:32&#39;) </span><br><span class="line">WITH cd</span><br><span class="line">MATCH pp&#x3D;(cd)-[r1:LINK]-(:CARD_NO)</span><br><span class="line">UNWIND NODES(pp) as x</span><br><span class="line">WITH COUNT(x) as cc, x, cd</span><br><span class="line">WHERE cc &gt;&#x3D; 2</span><br><span class="line">RETURN cd</span><br></pre></td></tr></table></figure><h4 id="按时间排序跳过-3000-个数据，返回-limit-为-100-的剩余数据"><a href="#按时间排序跳过-3000-个数据，返回-limit-为-100-的剩余数据" class="headerlink" title="按时间排序跳过 3000 个数据，返回 limit 为 100 的剩余数据"></a>按时间排序跳过 3000 个数据，返回 limit 为 100 的剩余数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MATCH (c:CARD_NO)-[:LINK]-(d:DEVICE)</span><br><span class="line">WHERE c.value &#x3D; &#39;3175778&#39;</span><br><span class="line">WITH d</span><br><span class="line">ORDER BY d.updateTime desc</span><br><span class="line">SKIP 3000</span><br><span class="line">LIMIT 100</span><br><span class="line">RETURN d</span><br></pre></td></tr></table></figure><h2 id="springboot-集成"><a href="#springboot-集成" class="headerlink" title="springboot 集成"></a>springboot 集成</h2><h3 id="参考案例"><a href="#参考案例" class="headerlink" title="参考案例"></a>参考案例</h3><ol><li>spring官方demo：<a href="https://github.com/spring-projects/spring-data-examples/tree/master/neo4j">github</a> （墙裂建议参考，解决多个属性之间复杂关联以及关系属性的问题）</li><li>电影演员demo：<a href="https://github.com/kobeyk/Spring-Boot-Neo4j-Movies">github</a>（如果关系没有属性，参考这个就行）</li><li><a href="https://www.jianshu.com/p/60b14bc604f3">社交好友推荐项目</a>：<a href="https://github.com/YULuoOo/spring-boot-neo4j">github</a></li><li>电影知识问答项目：<a href="https://github.com/kobeyk/Spring-Boot-Neo4j-Movies">github</a></li><li>复杂查询、事务：<a href="https://blog.csdn.net/u014229652/article/details/94385601">csdn</a> （使用原生的 session 进行查询）</li></ol><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><ol><li><p>springboot 的 neo4j 组件自带 bolt 协议，如果想使用 http 或 embed 需要增加相应的依赖，项目使用的 springboot 版本为 2.1.4.RELEASE</p></li><li><p>实体 bean 注入失败，不要用 lombok 的 @Data 注解，用 @Getter</p></li><li><p>父类存入库中以后也生成了节点，父类改为 abstract</p></li><li><p>复杂的实体关系参考案例1，可为关系添加属性，多个节点交叉关联等</p></li><li><p>实体属性为 localDateTime 类型，保存到 neo4j 时被转成了 string <code>createTime:2020-04-27T17:40</code>，而不是<code>createTime:&quot;2020-04-27T17:40&quot;</code>，在查询时则自动转换 string 为 localDateTime，不然 neo4j 会把  localDateTime 做类型转换，在<code>value = getPropertyConverter().toEntityAttribute(value);</code>这一步只接收 String 报错。在做时间对比时用 <code>localdatetime(&#39;2020-04-28T18:00&#39;) &gt; localdatetime(createTime)</code>做比较</p></li><li><p>时间存到库里的格式严格按照 yyyy-MM-ddTHH:mm:ss，不然会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.time.format.DateTimeParseException: Text &#x27;2020-1-5T17&#x27; could not be parsed at index 5</span><br></pre></td></tr></table></figure></li><li><p>提示找不到注解定义的类匹配，异常信息如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class class com.elong.hotel.analyzer.neo4j.entity.CardNoNode is not a valid entity class. Please check the entity mapping.</span><br></pre></td></tr></table></figure><p>问题解决参考：<a href="https://blog.csdn.net/KEY0323/article/details/101082242">https://blog.csdn.net/KEY0323/article/details/101082242</a></p><p><a href="https://github.com/spring-projects/spring-boot/issues/6709">https://github.com/spring-projects/spring-boot/issues/6709</a></p><p><a href="https://github.com/spring-projects/spring-boot/issues/7157">https://github.com/spring-projects/spring-boot/issues/7157</a></p></li><li><p>警告信息，提示</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Owning ClassInfo is null for property: private java.time.LocalDateTime com.elong.hotel.analyzer.neo4j.entity.BaseNode.createTime</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/Blanchedingding/article/details/90265881">https://blog.csdn.net/Blanchedingding/article/details/90265881</a></p></li></ol><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><p>参考：<a href="https://blog.csdn.net/qq_34414916/article/details/81168275">https://blog.csdn.net/qq_34414916/article/details/81168275</a></p><p>刚开始使用 d3.js，但是入手困难。最终选用的蚂蚁的 antv，文档全面、产品化好，用户只需要关心业务即可。支持 tooltip 提示框、左右键点击事件等，各种形式的图，入手容易。</p><p>参考：<a href="https://g6.antv.vision/zh/">https://g6.antv.vision/zh/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》——行为型（下）</title>
      <link href="blog/2019/1222:%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E2%80%94%E2%80%94%E8%A1%8C%E4%B8%BA%E5%9E%8B%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>blog/2019/1222:%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E2%80%94%E2%80%94%E8%A1%8C%E4%B8%BA%E5%9E%8B%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>11种行为型模式（下）：观察者、备忘录、访问者、状态、解释器</p><span id="more"></span><h2 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式 Observer"></a>观察者模式 Observer</h2><p>也叫发布订阅模式 Publish/Subscribe。定义对象间一对多依赖关系，依赖对象可以得到通知并自动更新。包含一下几个角色：</p><ol><li>Subject 被观察者：一般是抽象类或实现类，能动态增删观察者，并完成管理观察者并通知观察者的职责。</li><li>Observer 观察者：观察者接收消息后进行处理。</li><li>ConcreteSubject 具体的被观察者：定义个性化业务逻辑，同事定义对哪些事件进行通知。</li><li>ConcreteObserver 具体的观察者：定义个性化处理逻辑。</li></ol><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/observer.png"></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>关联行为场景。注意关联行为可拆分，而不是 “组合” 关系。</li><li>事件多级触发场景。</li><li>跨系统的消息交换场景，如消息队列的处理机制。</li><li>实践中的应用：<ul><li>文件系统：比如在一个目录下新建一个文件，这个动作会同时通知目录管理器增加该目录，并通知磁盘管理器减少 1kb 的空间，也就是说 “文件” 时一个被观察者，“目录管理器” 和 “磁盘管理器” 则是观察者。</li><li>猫鼠游戏：夜里猫叫一声，家里的老鼠逃跑，同时也吵醒了熟睡的主人。</li><li>ATM 取钱：多次输错密码会被吞卡，此时触发的动作有：1. 摄像头连续快拍；2. 通知监控系统发生吞卡； 3. 初始化 ATM 机屏幕，返回最初状态。通常 1、2 通过观察者模式来完成，3 异常完成。</li><li>广播收音机：电台广播，可用多个收音机来收听。</li></ul></li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>观察者和被观察者之间是抽象耦合。非常容易扩展观察者和被观察者。</li><li>建立一套触发机制。根据单一职责原则，需要把每个单一职责类串联起来的时候。比如打猎打死了一只母鹿，母鹿三个幼崽饿死，尸体被两只秃鹰争抢，分配不均内斗，胜利的秃鹰生存下来并扩大了地盘。这就是一个触发机制，形成了一个触发链。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>需要考虑开发效率和运行效率问题。一个被观察者、多个观察者，开发和调试会比较复杂。而且 java 中消息的通知默认是顺序执行，一个观察者卡壳，会影响整体的执行效率。此时一般采用异步的方式。</li><li>多级触发时更需要注意效率问题。</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>广播链问题</p><p>多级触发逻辑复杂，可维护性差。对于观察者来说还可能具有多重身份，既是观察者也是被观察者。经验建议在一个观察者模式中最多出现一个对象既是观察者又是被观察者，也就是消息最多转发一次（传递2次）。</p></li><li><p>异步处理问题</p><p>被观察者发生动作，观察者需要做出回应，如果观察者比较多，处理时间长，需要用异步处理，此时就要考虑线程安全和队列的问题。可参考 Message Queue。</p></li></ol><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p>java 世界中的观察者模式</p><p>Java 中提供可扩展的父类 java.util.Observable，作为被观察者的父类。接口 java.util.Observer，作为观察者的父类。而子类只需实现自己的逻辑方法。</p></li><li><p>项目中真实的观察者模式，改造后包含以下3个方面：</p><ul><li><p>观察者和被观察者之间的消息沟通</p><p>被观察者状态改变会触发观察者的一个行为，同时会传递一个消息给观察者。实际中的做法是：观察者中的 update 方法接受两个参数，一个是被观察者，一个是DTO数据传输对象，这个是纯洁的 javabean，由被观察者生成，由观察者消费。</p><p>远程传输一般以 xml、json 等格式传递。</p></li><li><p>观察者响应方式</p><p>一个观察者多个被观察者的情况下，需要考虑性能问题。如果观察者来不及响应，被观察者的执行时间是不是也会被拉长？问题就在于观察者如何快速响应，有如下两个办法。</p><p>办法一：采用多线程技术，不论被观察者启动线程还是观察者启动线程，都可以明显地提高系统性能。这是异步架构。</p><p>办法二：采用缓存技术，保证足够的资源快速响应。代价是开发难度大，而且压测要足够充分。这是同步架构。</p></li><li><p>被观察者尽量自己做主</p><p>被观察者的状态改变不一定非要通知观察者。设计时要灵活考虑，避免加重观察者的逻辑处理。一般会对被观察者的业务逻辑 doSomething 方法重载，如增加一个 doSomething(boolean isNotifyObs) 方法，决定是否通知观察者，而不是在消息到达观察者时才判断是否要消费。</p></li></ul></li><li><p>订阅发布模型</p><p>EJB3 中有3个类型的Bean：Session Bean、EntityBean 和 MessageDriven Bean （消息驱动 Bean），消息的发布者（Provider）发布一个消息 MDB，通过 EJB 容器（一般是 Message Queue 消息队列）通知订阅者做出回应。</p></li></ol><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p>以电脑为例，包含显示器、风扇、系统、键盘等组件。电源接通时，通知各个组件进行工作，各个组件也会监听键盘、鼠标进行响应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 观察者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScreenImpl</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;屏幕开始显示！&quot;</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;屏幕关闭！&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        String command = String.valueOf(arg);</span><br><span class="line">        <span class="keyword">if</span> (command.equalsIgnoreCase(<span class="string">&quot;start&quot;</span>)) &#123;</span><br><span class="line">            show();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equalsIgnoreCase(<span class="string">&quot;shutdown&quot;</span>)) &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;屏幕保持不变！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemImpl</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;系统开始工作！&quot;</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;系统关闭！&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        String command = String.valueOf(arg);</span><br><span class="line">        <span class="keyword">if</span> (command.equalsIgnoreCase(<span class="string">&quot;start&quot;</span>)) &#123;</span><br><span class="line">            work();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equalsIgnoreCase(<span class="string">&quot;shutdown&quot;</span>)) &#123;</span><br><span class="line">            shutdown();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;系统不认识这个命令！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被观察者</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Keyboard</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">press</span><span class="params">(String command)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyboardImpl</span> <span class="keyword">extends</span> <span class="title">Observable</span> <span class="keyword">implements</span> <span class="title">Keyboard</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KeyboardImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.addObserver(<span class="keyword">new</span> ScreenImpl());</span><br><span class="line">        <span class="keyword">super</span>.addObserver(<span class="keyword">new</span> SystemImpl());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">press</span><span class="params">(String command)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按下一个命令:&quot;</span> + command);</span><br><span class="line">        <span class="keyword">super</span>.setChanged();</span><br><span class="line">        <span class="keyword">super</span>.notifyObservers(command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高层模块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Keyboard keyboard = <span class="keyword">new</span> KeyboardImpl();</span><br><span class="line">        keyboard.press(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        keyboard.press(<span class="string">&quot;xxxxx&quot;</span>);</span><br><span class="line">        keyboard.press(<span class="string">&quot;shutdown&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="备忘录模式-Memento"><a href="#备忘录模式-Memento" class="headerlink" title="备忘录模式 Memento"></a>备忘录模式 Memento</h2><p>提供一种程序数据的备份方法。包含以下角色：</p><ol><li>Originator 发起人：记录当前时刻的内部状态，负责定义哪些属于备份范围的状态，负责创建和恢复备忘录数据。</li><li>Memento 备忘录：存储 Originator 对象的内部状态，在需要的时候提供发起人需要的内部状态。</li><li>Caretaker 备忘录管理员：管理、保存、提供备忘录。</li></ol><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/memento.png"></p><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>需要保存和恢复数据的相关状态场景。</li><li>提供一个可回滚 rollback 的操作，比如 word 中的 CTRL+Z 组合键，浏览器中的后退按钮，文件管理器上的 backspace 键等。</li><li>需要监控的副本场景。例如要监控一个对象的属性，但监控不应该作为系统的主业务来调用，它只是边缘应用，即使出现监控不准、错误报警也影响不大，因此一般的做法是备份一个主线程中的对象，然后由分析程序来分析。</li><li>数据库连接如 JDBC 驱动的事务管理就是用的备忘录模式。</li></ol><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>备忘录的生命周期</p><p>备忘录创建出来就要在 “最近” 的代码中使用，要主动管理它的生命周期，建立就要使用，不需要就要立刻删除其引用，等待 gc 回收。</p></li><li><p>备忘录的性能</p><p>不要在频繁建立备份的场景中使用备忘录模式（比如一个 for 循环中），原因有二：1. 控制不了备忘录建立的对象数量；2. 打对象的建立比较消耗资源，需考虑系统性能。</p></li></ol><h3 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p>clone 方式的备忘录（代码演示）</p><p>适用于较简单的场景，要避免与其他的对象产生严重的耦合关系。</p><p>该方式把状态保留在了发起人内部，更方便。原因在于 java 的诞生比提出设计模式略晚。</p></li><li><p>多状态的备忘录模式（代码演示）</p><p>对象不可能只有一个状态，一个 javabean 存在多个属性。对象全状态备份方案有多种处理方式，比如使用 clone、数据技术 DTO 回写临时表、使用 BeanUtils 类等。</p></li><li><p>多备份的备忘录（代码演示）</p><p>实现多备份的检查点 Check Point 设计思路：修改备忘录的容器为 map 类型。注意内存一出问题，设计时要严格限定备忘录的创建，增加 map 的上限。</p></li><li><p>设置备份无法修改，保证备份数据纯洁（代码演示）</p><p>使用内部类，设置为 private 。采用双接口设计：一个是业务的正常接口（宽接口），必要的业务逻辑；另一个是空接口（窄接口），什么方法都没有，目的是提供给子系统外的模块访问，比如容器对象，没有提供任何操纵数据的方法，相对比较安全。</p></li></ol><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><ol><li><p>标准备忘录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发起人</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 内部状态</span></span><br><span class="line">    <span class="keyword">private</span> String state = <span class="string">&quot;初始状态&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建备忘录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Memento(<span class="keyword">this</span>.state); &#125;</span><br><span class="line">    <span class="comment">// 恢复备忘录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento memento)</span> </span>&#123; <span class="keyword">this</span>.setState(memento.getState()); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 备忘录</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 发起人的内部状态</span></span><br><span class="line">    <span class="keyword">private</span> String state = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 备忘录管理员</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Originator originator = <span class="keyword">new</span> Originator();</span><br><span class="line">        Caretaker caretaker = <span class="keyword">new</span> Caretaker();</span><br><span class="line">        <span class="comment">// 创建备忘录</span></span><br><span class="line">        caretaker.setMemento(originator.createMemento());</span><br><span class="line">        originator.setState(<span class="string">&quot;改变了状态&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前发起人的状态是：&quot;</span> + originator.getState());</span><br><span class="line">        <span class="comment">// 恢复备忘录</span></span><br><span class="line">        originator.restoreMemento(caretaker.getMemento());</span><br><span class="line">        System.out.println(<span class="string">&quot;恢复后发起人的状态是：&quot;</span> + originator.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>clone 方式备忘录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator2</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Originator2 backup;</span><br><span class="line">    <span class="keyword">private</span> String state = <span class="string">&quot;初始状态&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createMemento</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        backup = <span class="keyword">this</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Originator2 originator2)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (backup != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(backup.getState());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;备份为null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Originator2 <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Originator2) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Originator2 originator2 = <span class="keyword">new</span> Originator2();</span><br><span class="line">        originator2.createMemento();</span><br><span class="line">        originator2.setState(<span class="string">&quot;修改了状态&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改后的状态： &quot;</span> + originator2.getState());</span><br><span class="line">        originator2.setState(originator2.getBackup().getState());</span><br><span class="line">        System.out.println(<span class="string">&quot;恢复后的状态： &quot;</span> + originator2.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多状态备忘录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state1 = <span class="string">&quot;初始状态111&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String state2 = <span class="string">&quot;初始状态222&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String state3 = <span class="string">&quot;初始状态333&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento3 <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento3(BeanUtils.backupProp(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento3 memento3)</span> </span>&#123;</span><br><span class="line">        BeanUtils.restoreProp(<span class="keyword">this</span>, memento3.getStateMap());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;Originator3&#123;&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;state1=&#x27;&quot;</span>).append(state1).append(<span class="string">&#x27;\&#x27;&#x27;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;, state2=&#x27;&quot;</span>).append(state2).append(<span class="string">&#x27;\&#x27;&#x27;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;, state3=&#x27;&quot;</span>).append(state3).append(<span class="string">&#x27;\&#x27;&#x27;</span>);</span><br><span class="line">        sb.append(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; stateMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工具类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeanUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">backupProp</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; stateMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获得 bean 信息</span></span><br><span class="line">            BeanInfo beanInfo = Introspector.getBeanInfo(source.getClass());</span><br><span class="line">            <span class="comment">// 属性信息</span></span><br><span class="line">            PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">            <span class="comment">// 遍历所有属性</span></span><br><span class="line">            <span class="keyword">for</span> (PropertyDescriptor descriptor : descriptors) &#123;</span><br><span class="line">                <span class="comment">// 属性名</span></span><br><span class="line">                String fieldName = descriptor.getName();</span><br><span class="line">                <span class="comment">// getter方法</span></span><br><span class="line">                Method getter = descriptor.getReadMethod();</span><br><span class="line">                <span class="comment">// 属性值</span></span><br><span class="line">                Object fieldValue = getter.invoke(source);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;class&quot;</span>.equalsIgnoreCase(fieldName)) &#123;</span><br><span class="line">                    stateMap.put(fieldName, fieldValue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stateMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">restoreProp</span><span class="params">(Object target, Map&lt;String, Object&gt; propMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanInfo beanInfo = Introspector.getBeanInfo(target.getClass());</span><br><span class="line">            PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">            <span class="keyword">for</span> (PropertyDescriptor descriptor : descriptors) &#123;</span><br><span class="line">                String fieldName = descriptor.getName();</span><br><span class="line">                <span class="keyword">if</span> (propMap.containsKey(fieldName)) &#123;</span><br><span class="line">                    Method setter = descriptor.getWriteMethod();</span><br><span class="line">                    setter.invoke(target, propMap.get(fieldName));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Originator3 originator3 = <span class="keyword">new</span> Originator3();</span><br><span class="line">        Memento3 memento3 = originator3.createMemento();</span><br><span class="line">        originator3.setState1(<span class="string">&quot;变了1&quot;</span>);</span><br><span class="line">        originator3.setState2(<span class="string">&quot;变了2&quot;</span>);</span><br><span class="line">        originator3.setState3(<span class="string">&quot;变了3&quot;</span>);</span><br><span class="line">        System.out.println(originator3.toString());</span><br><span class="line">        originator3.restoreMemento(memento3);</span><br><span class="line">        System.out.println(originator3.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多备份备忘录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state = <span class="string">&quot;初始状态&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento4 <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento4(<span class="keyword">this</span>.state);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento4 memento4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = memento4.getState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caretaker4</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 容纳多版本备忘录的容器</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Memento4&gt; memMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento4 <span class="title">getMemento</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.memMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(String key, Memento4 memento4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memMap.put(key, memento4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Originator4 originator4 = <span class="keyword">new</span> Originator4();</span><br><span class="line">        Caretaker4 caretaker4 = <span class="keyword">new</span> Caretaker4();</span><br><span class="line">        Memento4 memento4 = originator4.createMemento();</span><br><span class="line">        memento4.setState(<span class="string">&quot;100状态&quot;</span>);</span><br><span class="line">        caretaker4.setMemento(<span class="string">&quot;100&quot;</span>, memento4);</span><br><span class="line">        caretaker4.setMemento(<span class="string">&quot;200&quot;</span>, originator4.createMemento());</span><br><span class="line">        originator4.setState(<span class="string">&quot;发起人拥有了新状态&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;此时发起人的状态：&quot;</span> + originator4.getState());</span><br><span class="line">        originator4.restoreMemento(caretaker4.getMemento(<span class="string">&quot;100&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;恢复100后的状态:&quot;</span> + originator4.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双接口设计备忘录，防修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator5</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> String state = <span class="string">&quot;初始状态&quot;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> IMemento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento5(<span class="keyword">this</span>.state);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(IMemento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(memento.getState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento5</span> <span class="keyword">implements</span> <span class="title">IMemento</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 窄接口，提供外部访问</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMemento</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getState</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caretaker5</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IMemento iMemento;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Originator5 originator5 = <span class="keyword">new</span> Originator5();</span><br><span class="line">        IMemento memento = originator5.createMemento();</span><br><span class="line">        Caretaker5 caretaker5 = <span class="keyword">new</span> Caretaker5();</span><br><span class="line">        caretaker5.setIMemento(memento);</span><br><span class="line"></span><br><span class="line">        originator5.setState(<span class="string">&quot;修改了状态&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前 originator 的状态：&quot;</span> + originator5.getState());</span><br><span class="line"></span><br><span class="line">        originator5.restoreMemento(caretaker5.getIMemento());</span><br><span class="line">        System.out.println(<span class="string">&quot;执行恢复后的状态：&quot;</span> + originator5.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="访问者模式-Visitor"><a href="#访问者模式-Visitor" class="headerlink" title="访问者模式 Visitor"></a>访问者模式 Visitor</h2><p>将多种对象的操作交给访问者处理，避免对象和处理各自变化产生的耦合，在单一职责原则基础上实现良好的扩展性。主要包含以下角色：</p><ol><li>Visitor 抽象访问者：抽象类或者接口，声明访问者可以访问哪些元素，具体到程序中就是 visit 方法的参数定义哪些对象可以被访问。</li><li>ConcreteVisitor 具体访问者：访问者访问一个类后具体要做的事。</li><li>Element 抽象元素：接口或者抽象类，声明接受哪一类访问者访问，程序中通过 accept 方法参数定义。</li><li>ConcreteElement 具体元素：实现 accept 方法，通常是 visitor.visit(this)，已称为固定写法。</li><li>ObjectStructure 结构对象：元素产生者，一般容纳在多个不同类、不同接口的容器，如 List、Set、Map 等，在项目中，一般很少抽象出这个角色。</li></ol><h3 id="类图-2"><a href="#类图-2" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/visitor.png"></p><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li><p>一个对象结果包含很多类对象，它们有不同的接口，需要对这些对象实施一些依赖于其具体类的操作，迭代器模式已经不能胜任的情况。</p></li><li><p>需要对一个对象结果中的对象进行多种不相关操作，同时想避免这些操作 “污染” 这些对象的类的情况。</p></li><li><p>总结来说就是，业务规则要求遍历多个不同的对象。</p><p>迭代器模式只能访问同类或同接口的数据（当然用 instance of 可以访问所有数据），而访问者模式时对迭代器模式的扩充可以遍历不同的对象，针对不同的访问对象执行不同的操作。</p></li><li><p>访问者模式还可以用来充当拦截器（Interceptor）角色。</p></li><li><p>特别适用于大规模重构项目，集中规整。在一个阶段需求已经非常清晰，原系统功能点也已经明确，通过访问者模式可以很容易把一些功能进行梳理，达到最终目的——功能集中化，如一个统一的报表运算、UI展现等。还可以与其他模式混编建立一套自己的过滤器或者拦截器。（参考混编模式）</p></li></ol><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol><li><p>符合单一职责原则</p><p>具体元素角色 Employee（抽象类的两个子类）负责数据的加载，而 Visitor 类负责报表展现，两个不同的职责明确分离，各自变化。</p></li><li><p>优秀的扩展性</p><p>职责分离，方便继续增加对数据的操作。直接在 Visitor 中增加一个方法，传递数据后进行处理即可。</p></li><li><p>灵活性非常高</p><p>比如统计所有员工的工资，员工、部门经理、总经理都有各自的系数，通过遍历循环相加不是个好办法。这时可以采用访问者模式，将数据交给访问者计算。</p></li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol><li><p>具体元素对访问者公布细节，违背迪米特法则</p><p>访问者要访问一个类就必然要这个类公布需要的方法和数据，这就是说访问者关注了其他类的内部细节。</p></li><li><p>具体元素变更比较困难</p><p>具体元素角色的增加、删除、修改都比较难。比如要想增删一个成员变量，Visitor 就得做修改。</p></li><li><p>违背依赖倒置原则</p><p>访问者依赖的是具体元素，而不是抽象元素。在面向对象的编程中，抛弃对接口的依赖，直接依赖实现类，扩展会比较难。</p></li></ol><h3 id="扩展-2"><a href="#扩展-2" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p><strong>统计功能（代码演示）</strong></p><p>金融类企业常用汇总和报表功能，比如统计工资总额，不建议采用数据库存储过程，采用访问者模式，在 IVisitor 中增加 getTotalSalary 方法，实现类实现即可。</p></li><li><p><strong>多个访问者（代码演示）</strong></p><p>比如展示表、汇总表，同一堆数据两种处理方式，从程序上看，一个类就有2个不同的访问者。</p></li><li><p><strong>双分派（代码演示）</strong></p><p>一个演员可以扮演很多角色，系统要适应这种变化，也就是根据演员、角色两个对象类型，完成不同操作任务，这时就需要使用访问者模式。</p><p>通过调用者实际类型+方法参数中的类型才能确定方法版本时，这种分派称作多分派。只依据调用者和方法参数，叫做单分派。</p><p>双分派 double dispatch 意味着得到执行的操作由请求种类和两个接收者类型决定，属于多分派的一个特例。java 是一个支持双分派的单分派语言。</p><p><strong>延伸阅读：</strong><a href="https://blog.csdn.net/fan2012huan/article/details/51004615">java方法调用之单分派与多分派</a></p><p>java 静态、动态绑定依据重载 overload 和覆写 overide 实现。重载在编译器决定调用哪个方法，它根据表面类型决定方法调用，这是静态绑定；而执行该方法是由实际类型决定的，这是动态绑定。</p><p>定义语言分派时一般指语言动态运行时的分派方式，java 在动态运行时就是根据调用者最终类型来区分要方法调用的方法的，所以说 java 是单分派语言。然而 java 在编译时是根据调用者本身类型和方法参数共同确定调用方法的，所以是静态多分派。</p></li></ol><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><ol><li><p><strong>统计功能</strong></p><p>以制作公司员工以及管理报表、计算工资总额为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IVisitor1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(CommonEmployee commonEmployee)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Manager manager)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getTotalSalary</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Visitor1</span> <span class="keyword">implements</span> <span class="title">IVisitor1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> commonEmplayTotalSalary = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> managerTotalSalary = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> COMMONEMPLOYEE_COEFICIENT = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MANAGER_COEFICIENT = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> commonEmplayTotalSalary + managerTotalSalary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getCommonEmployeeTotalSalary</span><span class="params">(<span class="keyword">int</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> commonEmplayTotalSalary + salary * COMMONEMPLOYEE_COEFICIENT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getManagerTotalSalary</span><span class="params">(<span class="keyword">int</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> managerTotalSalary + salary * MANAGER_COEFICIENT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(CommonEmployee commonEmployee)</span> </span>&#123;</span><br><span class="line">        System.out.println(getCommonEmployeeInfo(commonEmployee));</span><br><span class="line">        <span class="keyword">this</span>.commonEmplayTotalSalary = getCommonEmployeeTotalSalary(commonEmployee.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Manager manager)</span> </span>&#123;</span><br><span class="line">        System.out.println(getManagerInfo(manager));</span><br><span class="line">        <span class="keyword">this</span>.managerTotalSalary = getManagerTotalSalary(manager.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getCommonEmployeeInfo</span><span class="params">(CommonEmployee commonEmployee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getBasicInfo(commonEmployee) + <span class="string">&quot;job=&quot;</span> + commonEmployee.getJob();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getManagerInfo</span><span class="params">(Manager manager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getBasicInfo(manager) + <span class="string">&quot;performance=&quot;</span> + manager.getPerformance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getBasicInfo</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringJoiner(<span class="string">&quot;\t&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;\t\t&quot;</span>)</span><br><span class="line">                .add(<span class="string">&quot;name=&quot;</span> + employee.getName())</span><br><span class="line">                .add(<span class="string">&quot;salary=&quot;</span> + employee.getSalary())</span><br><span class="line">                .toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(IVisitor1 visitor)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonEmployee</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(IVisitor1 visitor)</span> </span>&#123; visitor.visit(<span class="keyword">this</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String performance;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(IVisitor1 visitor)</span> </span>&#123; visitor.visit(<span class="keyword">this</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Visitor1 visitor = <span class="keyword">new</span> Visitor1();</span><br><span class="line">        <span class="keyword">for</span> (Employee employee : mockEmployee()) &#123;</span><br><span class="line">            employee.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n工资总额：&quot;</span> + visitor.getTotalSalary());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Employee&gt; <span class="title">mockEmployee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employeeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        CommonEmployee zhangsan = <span class="keyword">new</span> CommonEmployee();</span><br><span class="line">        zhangsan.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        zhangsan.setSalary(<span class="number">1800</span>);</span><br><span class="line">        zhangsan.setJob(<span class="string">&quot;程序猿&quot;</span>);</span><br><span class="line"></span><br><span class="line">        CommonEmployee lisi = <span class="keyword">new</span> CommonEmployee();</span><br><span class="line">        lisi.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        lisi.setSalary(<span class="number">2000</span>);</span><br><span class="line">        lisi.setJob(<span class="string">&quot;产品汪&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Manager manager = <span class="keyword">new</span> Manager();</span><br><span class="line">        manager.setName(<span class="string">&quot;主管&quot;</span>);</span><br><span class="line">        manager.setSalary(<span class="number">5000</span>);</span><br><span class="line">        manager.setPerformance(<span class="string">&quot;马马虎虎&quot;</span>);</span><br><span class="line"></span><br><span class="line">        employeeList.add(zhangsan);</span><br><span class="line">        employeeList.add(lisi);</span><br><span class="line">        employeeList.add(manager);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> employeeList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>多个访问者</strong></p><p>上述例子中，把展示表、汇总表分拆为两个 visitor 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IVisitor2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(CommonEmployee2 commonEmployee2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Manager2 manager2)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素类，决定哪些访问者可以访问</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(IVisitor2 iVisitor2)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonEmployee2</span> <span class="keyword">extends</span> <span class="title">Employee2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(IVisitor2 iVisitor2)</span> </span>&#123;</span><br><span class="line">        iVisitor2.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager2</span> <span class="keyword">extends</span> <span class="title">Employee2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String performance;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(IVisitor2 iVisitor2)</span> </span>&#123;</span><br><span class="line">        iVisitor2.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示表访问者</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IShowVisitor2</span> <span class="keyword">extends</span> <span class="title">IVisitor2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 工资统计表访问者</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IStatisticsVisitor2</span> <span class="keyword">extends</span> <span class="title">IVisitor2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">statisticsSalary</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowVisitor2</span> <span class="keyword">implements</span> <span class="title">IShowVisitor2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; infoMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(CommonEmployee2 commonEmployee2)</span> </span>&#123;</span><br><span class="line">        infoMap.put(commonEmployee2.getName(), getCommonEmployeeInfo(commonEmployee2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Manager2 manager2)</span> </span>&#123;</span><br><span class="line">        infoMap.put(manager2.getName(), getManagerInfo(manager2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : infoMap.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getCommonEmployeeInfo</span><span class="params">(CommonEmployee2 commonEmployee2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getBasicInfo(commonEmployee2) + <span class="string">&quot;job=&quot;</span> + commonEmployee2.getJob();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getManagerInfo</span><span class="params">(Manager2 manager2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getBasicInfo(manager2) + <span class="string">&quot;performance=&quot;</span> + manager2.getPerformance();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getBasicInfo</span><span class="params">(Employee2 employee2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringJoiner(<span class="string">&quot;\t&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;\t\t&quot;</span>)</span><br><span class="line">                .add(<span class="string">&quot;name=&quot;</span> + employee2.getName())</span><br><span class="line">                .add(<span class="string">&quot;salary=&quot;</span> + employee2.getSalary())</span><br><span class="line">                .toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatisticsVisitor2</span> <span class="keyword">implements</span> <span class="title">IStatisticsVisitor2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> commonEmplayTotalSalary = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> managerTotalSalary = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> COMMONEMPLOYEE_COEFICIENT = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MANAGER_COEFICIENT = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(CommonEmployee2 commonEmployee2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.commonEmplayTotalSalary += commonEmployee2.getSalary() * COMMONEMPLOYEE_COEFICIENT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Manager2 manager2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.managerTotalSalary += manager2.getSalary() * MANAGER_COEFICIENT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">statisticsSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工资总额：&quot;</span> + (<span class="keyword">this</span>.commonEmplayTotalSalary + <span class="keyword">this</span>.managerTotalSalary));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IShowVisitor2 showVisitor2 = <span class="keyword">new</span> ShowVisitor2();</span><br><span class="line">        IStatisticsVisitor2 statisticsVisitor2 = <span class="keyword">new</span> StatisticsVisitor2();</span><br><span class="line">        <span class="keyword">for</span> (Employee2 employee : mockEmployee()) &#123;</span><br><span class="line">            employee.accept(showVisitor2);</span><br><span class="line">            employee.accept(statisticsVisitor2);</span><br><span class="line">        &#125;</span><br><span class="line">        showVisitor2.report();</span><br><span class="line">        statisticsVisitor2.statisticsSalary();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Employee2&gt; <span class="title">mockEmployee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Employee2&gt; employeeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        CommonEmployee2 zhangsan = <span class="keyword">new</span> CommonEmployee2();</span><br><span class="line">        zhangsan.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        zhangsan.setSalary(<span class="number">1800</span>);</span><br><span class="line">        zhangsan.setJob(<span class="string">&quot;程序猿&quot;</span>);</span><br><span class="line"></span><br><span class="line">        CommonEmployee2 lisi = <span class="keyword">new</span> CommonEmployee2();</span><br><span class="line">        lisi.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        lisi.setSalary(<span class="number">2000</span>);</span><br><span class="line">        lisi.setJob(<span class="string">&quot;产品汪&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Manager2 manager = <span class="keyword">new</span> Manager2();</span><br><span class="line">        manager.setName(<span class="string">&quot;主管&quot;</span>);</span><br><span class="line">        manager.setSalary(<span class="number">5000</span>);</span><br><span class="line">        manager.setPerformance(<span class="string">&quot;绩效很高&quot;</span>);</span><br><span class="line"></span><br><span class="line">        employeeList.add(zhangsan);</span><br><span class="line">        employeeList.add(lisi);</span><br><span class="line">        employeeList.add(manager);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> employeeList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>双分派</strong></p><p>以演员演电影为例，一个演员可以演多个角色，系统要根据演员、角色两个类型共同决定完成什么任务。<br>通过访问者模式解决演员、角色变化的问题，由请求种类和两个接收者类型决定怎么执行，实现双分派。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Role</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KungFuRole</span> <span class="keyword">implements</span> <span class="title">Role</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComedyRole</span> <span class="keyword">implements</span> <span class="title">Role</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractActor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">(Role role)</span> </span>&#123; System.out.println(<span class="string">&quot;演员可以扮演任何角色&quot;</span>); &#125;</span><br><span class="line">    <span class="comment">// 重载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">(KungFuRole kungFuRole)</span> </span>&#123; System.out.println(<span class="string">&quot;演员可以演功夫角色&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor1</span> <span class="keyword">extends</span> <span class="title">AbstractActor</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">(KungFuRole kungFuRole)</span> </span>&#123; System.out.println(<span class="string">&quot;这个类的演员都会功夫，拍打片非常合适！&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor2</span> <span class="keyword">extends</span> <span class="title">AbstractActor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">(KungFuRole kungFuRole)</span> </span>&#123; System.out.println(<span class="string">&quot;这个类型的演员不太擅长演功夫角色，需要指导&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Role role = <span class="keyword">new</span> KungFuRole();</span><br><span class="line">        AbstractActor actor = <span class="keyword">new</span> Actor2();</span><br><span class="line">        <span class="comment">// 执行一下两个方法就会发现，重载在编译期就决定了要调用哪个方法，虽然 actor.act(role) 用的子类构造。</span></span><br><span class="line">        <span class="comment">// 根据 role 的表面类型调用 act(Role role) 方法，这是静态绑定。而 Actor 的执行方法 act 则是由实际类型决定的，这是动态绑定。</span></span><br><span class="line">        actor.act(role);</span><br><span class="line">        actor.act(<span class="keyword">new</span> KungFuRole());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RoleTwo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(AbstractActorTwo actor)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KungFuRoleTwo</span> <span class="keyword">implements</span> <span class="title">RoleTwo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(AbstractActorTwo actor)</span> </span>&#123; actor.act(<span class="keyword">this</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComedyRoleTwo</span> <span class="keyword">implements</span> <span class="title">RoleTwo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(AbstractActorTwo actor)</span> </span>&#123; actor.act(<span class="keyword">this</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractActorTwo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">(RoleTwo role)</span> </span>&#123; System.out.println(<span class="string">&quot;演员可以扮演任何角色&quot;</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">(KungFuRoleTwo kungFuRole)</span> </span>&#123; System.out.println(<span class="string">&quot;演员可以演功夫角色&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActorTwo1</span> <span class="keyword">extends</span> <span class="title">AbstractActorTwo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">(KungFuRoleTwo kungFuRole)</span> </span>&#123; System.out.println(<span class="string">&quot;这个类的演员都会功夫，拍打片非常合适！&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActorTwo2</span> <span class="keyword">extends</span> <span class="title">AbstractActorTwo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">(KungFuRoleTwo kungFuRole)</span> </span>&#123; System.out.println(<span class="string">&quot;这个类型的演员不太擅长演功夫角色，需要指导&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientTwo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RoleTwo roleTwo = <span class="keyword">new</span> KungFuRoleTwo();</span><br><span class="line">        AbstractActorTwo actorTwo = <span class="keyword">new</span> ActorTwo2();</span><br><span class="line">        roleTwo.accept(actorTwo);</span><br><span class="line">        roleTwo.accept(<span class="keyword">new</span> ActorTwo2());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="状态模式-State"><a href="#状态模式-State" class="headerlink" title="状态模式 State"></a>状态模式 State</h2><p>核心是封装，状态变更引起行为变更，从外部看起来就像这个对象对应的类发生了改变，包含三个角色：</p><ol><li>State 抽象状态角色：接口或抽象类，负责对象状态定义，并且封装环境角色以实现状态切换。</li><li>ConcreteState 具体状态角色：每一个具体状态必须完成2个职责，本状态的行为管理和趋向状态处理，通俗而言就是本状态下要做的事以及本状态如何过度到其他状态。</li><li>Context 环境角色：定义客户需要的接口，并负责具体状态切换。</li></ol><h3 id="类图-3"><a href="#类图-3" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/state.png"></p><h3 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li><p>行为随状态改变而改变的场景</p><p>这是状态模式的根本出发点，例如权限设计，人员的状态不同即使执行相同的行为结果也可能不同。</p></li><li><p>条件、分支判断语句的替代者</p><p>避免使用 switch、if 的地方可以考虑，通过扩展子类实现条件的判断处理。</p></li></ol><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ol><li><p>结构清晰</p><p>避免过多 switch..case… 或 if…else… 语句的使用，避免程序复杂性，提升可维护性。</p></li><li><p>遵循开闭原则和单一职责原则</p><p>每一个状态都是一个子类，想增加或修改状态只需要增加或修改子类即可。</p></li><li><p>封装性非常好</p><p>状态变换放到类内部实现，外部的调用不需要知道类内如何实现状态和行为的变换。</p></li></ol><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ol><li><p>子类可能会膨胀</p><p>可在数据库中建立一个状态表，然后根据状态执行相应的操作。</p></li></ol><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>行为受状态约束时可使用状态模式，对象的状态最好不要超过5个。</li></ol><h3 id="扩展-3"><a href="#扩展-3" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p>状态模式+建造者模式</p><p>状态自由切换种类太多，可使用建造者模式把已有的几种状态按照一定顺序进行封装。</p></li><li><p>状态机 State Machine</p><p>Context 类的升级版，工作流开发中常用。</p></li></ol><h3 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">protected</span> Context context;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleState1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleState2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteState1</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleState1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前状态：&quot;</span> + <span class="keyword">super</span>.context.getCurrentState() + <span class="string">&quot;，开始执行状态1的动作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleState2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.context.setCurrentState(Context.STATE2);</span><br><span class="line">        <span class="keyword">super</span>.context.handleState2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteState2</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleState1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.context.setCurrentState(Context.STATE1);</span><br><span class="line">        <span class="keyword">super</span>.context.handleState1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleState2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前状态：&quot;</span> + <span class="keyword">super</span>.context.getCurrentState()+ <span class="string">&quot;，开始执行状态2的动作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> State STATE1 = <span class="keyword">new</span> ConcreteState1();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> State STATE2 = <span class="keyword">new</span> ConcreteState2();</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> State currentState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentState</span><span class="params">(State currentState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentState = currentState;</span><br><span class="line">        <span class="keyword">this</span>.currentState.setContext(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleState1</span><span class="params">()</span> </span>&#123; <span class="keyword">this</span>.currentState.handleState1(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleState2</span><span class="params">()</span> </span>&#123; <span class="keyword">this</span>.currentState.handleState2(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line">        context.setCurrentState(Context.STATE1);</span><br><span class="line">        context.handleState2();</span><br><span class="line">        context.handleState1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解释器模式-Interpreter"><a href="#解释器模式-Interpreter" class="headerlink" title="解释器模式 Interpreter"></a>解释器模式 Interpreter</h2><p>按照规定语法进行解析的模式。这个模式主要理解概念和理念，实际应用较少。以公式 a+b+c-d 为例，先介绍几个基本概念：</p><ol><li>运算元素：也叫做终结符号。指 a、b、c 等符号，需要具体赋值的对象。这些元素除了需要赋值外，不需要做任何处理，所有运算元素都对应一个具体的业务参数，是语法中最小的单元逻辑，不可再拆分。</li><li>运算符号：也叫非终结符号。指 +、- 等符号，需要编写算法进行处理，每个运算符号对咬对应处理单元，否则公式无法运行。</li></ol><p>两类元素的共同点是都要被解析，不同点是所有的运算元素具有相同的功能，可以用一个类表示，而运算符号则需要分别进行解释，例如加法需要加法解析器，减法需要减法解析器。</p><p>解析器模式包含以下4个角色：</p><ol><li>AbstractExpression 抽象解释器：具体的解释任务由各实现类完成，具体解释器分别由 TerminalExpression 和 NonterminalExpression 完成。</li><li>TerminalExpression 终结符表达式：实现与文法中的元素相关联的解释操作，通常一个解释器模式中只有一个终结符表达式，但有多个实例，对应不同的终结符。</li><li>NonterminalExpression 非终结符表达式：文法中的每条规则对应于一个非终结表达式，根据逻辑的复杂程度而增加，原则上每个文法规则都对应一个非终结符表达式。</li><li>Context 环境角色：例如用 HashMap 代替。</li></ol><h3 id="类图-4"><a href="#类图-4" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/interpreter.png"></p><h3 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li><p>重复发生的问题</p><p>例如多个应用服务器每天产生大量日志，需要对日志文件进行分析处理，各服务器的日志格式不同但数据要素相同，按照解释器的说法就是终结符表达式都是相同的，但是非终结符表达式则需要制定。</p></li><li><p>一个简单语法需要解释的场景</p><p>对于非终结表达式，文法规则越多，复杂度越高，而且类间还要进行递归调用，需要极大耐心和信心去排查问题。因此解释器一般用来解析比较标准的字符集，例如 SQL 语法分析，不过该部分逐渐被专用工具代替。</p></li><li><p>某些特定的商业环境</p><p>现在模型运算的例子很多，目前很多商业机构已经能够提供出大量的数据进行分析。</p></li></ol><h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><ol><li><p>扩展性良好</p><p>解释器是一个简单语法分析工具，修改语法规则只要修改相应的非终结符表达式就可以了，若扩展语法，则只需要增加非终结符类就可以。</p></li></ol><h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><ol><li><p>会引起类膨胀</p><p>每个语法都要产生一个非终结符表达式，语法规则比较复杂时，可能产生大量的类文件，为维护带来非常多得麻烦。</p></li><li><p>采用递归调用方法</p><p>每个非终结符表达式只关心与自己有关的表达式，每个表达式需要知道最终的结果，必须一层层剥茧，不论面向过程还是面向对象的语言，递归都是在必要条件下使用的，导致调试非常复杂。想想看，如果要排查一个语法错误，还需要一个个断点调试下去，知道最小的语法单元。</p></li><li><p>效率问题</p><p>使用了大量的循环和递归。在用于解析复杂、冗长的语法时，效率是难以忍受的。</p></li></ol><h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>尽量不要在重要的模块中使用解释器模式，否则维护会是一个大问题。在项目中可以使用 shell、JRuby、Groovy 等脚本语言来代替解释器模式，弥补 java 编译型语言的不足。比如在银行分析型项目中采用 JRuby 进行运算处理，避免使用解释器模式的四则匀速，保证效率和性能。</li><li>解释器模式在实际的系统开发中使用较少，一般在大中型的框架型项目能够找到它的身影，如一些数据分析工具、报表设计工具、科学计算工具等。若确实遇到 “一种特定类型的问题发生的频率足够高” 的情况，准备使用解释器模式时，可以考虑 Expression4J、MESP(Math Expression String Parser)、Jep 等开源的解析工具包，尽量避免自己从头编写解释器。</li></ol><h3 id="代码演示-4"><a href="#代码演示-4" class="headerlink" title="代码演示"></a>代码演示</h3><ol><li><p><strong>通用源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 环境角色，例如存放 hashmap</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象表达式是生成语法集合（也叫语法树）的关键，每个语法集合完成指定语法解析任务，通过递归调用，最终由最小的语法单元进行解析完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">interpreter</span><span class="params">(Context ctx)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终结符表达式主要处理场景元素和数据的转换。终结符表达式不能再参与比自己更小的文法运算。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TerminalExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通常终结符表达式只有一个，但是有多个对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">interpreter</span><span class="params">(Context ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每个非终结符表达式都代表了一个文法规则，并且每个文法规则都只关心自己周边的文法规则的结果，</span></span><br><span class="line"><span class="comment"> * 因此产生了每个非终结表达式调用自己周边的非终结符表达式，然后最终、最小的文法规则就是终结符表达式。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonterminalExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 每个非终结符表达式都会对其他表达式产生依赖</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NonterminalExpression</span><span class="params">(Expression... expressions)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">interpreter</span><span class="params">(Context ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装类，传递进来一个规范语法文件，解析器分析后产生结果并返回，避免了调用者与语法解析器的耦合关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line">        <span class="comment">// 通常定义一个语法容器，容纳一个具体的表达式，例如 ListArray、LinkedList、Stack 等类型</span></span><br><span class="line">        Stack&lt;Expression&gt; stack = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="comment">// 进行语法判断，并产生递归调用</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 产生一个完整的语法树，由多个具体的语法分析进行解析</span></span><br><span class="line">        Expression exp = stack.pop();</span><br><span class="line">        exp.interpreter(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>案例</p><p>输入一个模型公式（例如加减运算），然后输入模型中的参数，运算出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象表达式</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 解析公式和数值，其中 key 是公式中的参数，value 是具体的数字</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">interpreter</span><span class="params">(HashMap&lt;String, Integer&gt; <span class="keyword">var</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量解析器</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VarExpression</span> <span class="keyword">extends</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">interpreter</span><span class="params">(HashMap&lt;String, Integer&gt; <span class="keyword">var</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">var</span>.get(<span class="keyword">this</span>.key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象运算符号解析器</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SymbolExpression</span> <span class="keyword">extends</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 所有的解析公式都应只关心自己左右两个表达式的结果</span></span><br><span class="line">    <span class="keyword">protected</span> AbstractExpression left;</span><br><span class="line">    <span class="keyword">protected</span> AbstractExpression right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加法解析器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddExpression</span> <span class="keyword">extends</span> <span class="title">SymbolExpression</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddExpression</span><span class="params">(AbstractExpression left, AbstractExpression right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(left, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把左右两个表达式运算的结果相加</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">interpreter</span><span class="params">(HashMap&lt;String, Integer&gt; <span class="keyword">var</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.left.interpreter(<span class="keyword">var</span>) + <span class="keyword">super</span>.right.interpreter(<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 减法解析器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubExpression</span> <span class="keyword">extends</span> <span class="title">SymbolExpression</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubExpression</span><span class="params">(AbstractExpression left, AbstractExpression right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(left, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">interpreter</span><span class="params">(HashMap&lt;String, Integer&gt; <span class="keyword">var</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.left.interpreter(<span class="keyword">var</span>) - <span class="keyword">super</span>.right.interpreter(<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析器封装类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义表达式</span></span><br><span class="line">    <span class="keyword">private</span> AbstractExpression expression;</span><br><span class="line">    <span class="comment">// 构造函数传参，并解析</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">(String expStr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个栈，安排运算的先后顺序</span></span><br><span class="line">        Stack&lt;AbstractExpression&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">// 表达式拆分为字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] charArray = expStr.toCharArray();</span><br><span class="line">        <span class="comment">// 运算</span></span><br><span class="line">        AbstractExpression left = <span class="keyword">null</span>;</span><br><span class="line">        AbstractExpression right = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (charArray[i]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                    left = stack.pop();</span><br><span class="line">                    right = <span class="keyword">new</span> VarExpression(String.valueOf(charArray[++i]));</span><br><span class="line">                    stack.push(<span class="keyword">new</span> AddExpression(left, right));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                    left = stack.pop();</span><br><span class="line">                    right = <span class="keyword">new</span> VarExpression(String.valueOf(charArray[++i]));</span><br><span class="line">                    stack.push(<span class="keyword">new</span> SubExpression(left, right));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    stack.push(<span class="keyword">new</span> VarExpression(String.valueOf(charArray[i])));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.expression = stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 开始运算</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(HashMap&lt;String, Integer&gt; <span class="keyword">var</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.expression.interpreter(<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户模拟类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientCase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 输入表达式</span></span><br><span class="line">        String expStr = getExpStr();</span><br><span class="line">        <span class="comment">// 获得值映射</span></span><br><span class="line">        HashMap&lt;String, Integer&gt; <span class="keyword">var</span> = getValue(expStr);</span><br><span class="line">        Calculator calculator = <span class="keyword">new</span> Calculator(expStr);</span><br><span class="line">        <span class="keyword">int</span> result = calculator.run(<span class="keyword">var</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;执行结果是：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getExpStr</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入表达式：&quot;</span>);</span><br><span class="line">        InputStream in = System.in;</span><br><span class="line">        InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(in);</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line">        <span class="keyword">return</span> bufferedReader.readLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, Integer&gt; <span class="title">getValue</span><span class="params">(String expStr)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 解析有几个参数要传递</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : expStr.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27;+&#x27;</span> &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 解决重复参数的问题</span></span><br><span class="line">                <span class="keyword">if</span> (!map.containsKey(String.valueOf(c))) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入&quot;</span> + c + <span class="string">&quot;的值：&quot;</span>);</span><br><span class="line">                    String in = (<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in))).readLine();</span><br><span class="line">                    map.put(String.valueOf(c), Integer.valueOf(in));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》——行为型（上）</title>
      <link href="blog/2019/1215:%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E2%80%94%E2%80%94%E8%A1%8C%E4%B8%BA%E5%9E%8B%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>blog/2019/1215:%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E2%80%94%E2%80%94%E8%A1%8C%E4%B8%BA%E5%9E%8B%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>11种行为型模式（上）：模板、中介、命令、责任链、策略、迭代器</p><span id="more"></span><h2 id="模板方法模式-Template"><a href="#模板方法模式-Template" class="headerlink" title="模板方法模式 Template"></a>模板方法模式 Template</h2><p>在模板方法中按照一定规则和顺序调用基本方法，将一些基本方法延迟到子类实现，抽象模板类中方法分为两种：</p><ol><li>基本方法：由子类实现，在模板方法被调用。</li><li>模板方法：一个框架，实现对基本方法的调用，完成固定逻辑。为防止恶意操作，一般给模板方法加上 final 关键字，避免被覆写。</li></ol><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/template.png"></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>多个子类有公有的方法，并且逻辑基本相同。</li><li>重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则由各个子类实现。</li><li>重构时，模板方法模式经常使用，把相同代码抽取到父类，然后通过钩子函数（见扩展）约束其行为。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>封装不变部分，扩展可变部分。可通过继承来进行扩展。</li><li>提取公共部分代码，便于维护。</li><li>行为由父类控制，子类实现。符合开闭原则。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>一般的设计习惯，抽象类负责声明最抽象、最一般的事物属性和方法，实现类完成具体的事物属性和方法。但是模板方法模式却颠倒了，抽象类定义的部分抽象方法由子类实现，导致子类执行的结果影响了父类的结果，也就是子类对父类产生了影响，在复杂项目中会带来代码阅读难度。</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>父类调用子类的其他三种方式，但不建议父类调用子类！此时考虑使用模板方法模式。<ul><li>子类传递到父类的有参构造中，然后调用。</li><li>使用反射的方式调用。</li><li>父类调用子类的静态方法。</li></ul></li><li>为防止恶意操作，一般给模板方法加上 final 关键字，避免被覆写。</li></ol><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ol><li>外界通过钩子方法影响模板执行结果</li></ol><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 基本方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;打火启动&quot;</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;鸣笛~~~&quot;</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;刹车停车&quot;</span>); &#125;</span><br><span class="line">    <span class="comment">// 模板方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">&quot;开动！------------&quot;</span>);</span><br><span class="line">        start();</span><br><span class="line">        drive();</span><br><span class="line">        <span class="keyword">if</span> (isAlarm()) &#123;</span><br><span class="line">            alarm();</span><br><span class="line">        &#125;</span><br><span class="line">        stop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 钩子函数</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isAlarm</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">true</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model1</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;前轮驱动&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model2</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isAlarm;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Model2</span><span class="params">(<span class="keyword">boolean</span> isAlarm)</span> </span>&#123; <span class="keyword">this</span>.isAlarm = isAlarm; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;后轮驱动&quot;</span>); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isAlarm</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> isAlarm; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car m1 = <span class="keyword">new</span> Model1();</span><br><span class="line">        m1.run();</span><br><span class="line">        Car m2 = <span class="keyword">new</span> Model2(<span class="keyword">false</span>);</span><br><span class="line">        m2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中介者模式-Mediator"><a href="#中介者模式-Mediator" class="headerlink" title="中介者模式 Mediator"></a>中介者模式 Mediator</h2><p>也叫调停者模式。每个类只负责处理自己的行为，与自己无关的交给中介者处理，包含以下几个部分：</p><ol><li><p>Mediator 抽象中介者</p><p>抽象中介者角色定义统一的接口，用于各同事角色之间的通信。</p></li><li><p>Concrete Mediator 具体中介者</p><p>具体中介者角色通过协调各同事角色实现协作行为，因此它必须依赖各个同事角色。</p></li><li><p>Colleague 同事类</p><p>每个同事角色都知道中介者，而且与其他同事角色通信的时候，一定要通过中介者角色协作。每个同事类行为分为两种：一种是同事本身的行为，比如改变对象本身的状态，处理自己的行为等，这叫自发行为（Self-Method），与其他同事类或中介者没有任何联系；第二种是必须依赖中介者才能完成的行为，叫做依赖方法（Dep-Method）。</p></li></ol><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/mediator.png"></p><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li><p>N个对象之间紧密耦合的情况，这时一定要考虑使用中介者模式，把蛛网梳理为星型结构。（N &gt; 2）</p><p>紧密耦合的标准：在类图中出现了蜘蛛网状结构。</p></li><li><p>多个对象有依赖关系，但是依赖的行为尚不确定或者有发生改变的可能，此时建议使用中介者模式，降低变更引起的风险扩散。</p></li><li><p>产品开发。一个明显的例子就是 MVC 框架，把中介者模式应用到产品中，可以提升产品性能和扩展性。但是对于项目开发未必，因为项目是以交付投产为目标，而产品则是以稳定、高效、扩展为宗旨。</p></li><li><p>实际案例</p><ul><li><p>机场调度中心。调度各个飞机以及其他部门工作人员。</p></li><li><p>MVC 框架。其中的 controller 前端控制器就是中介者，作用是把 model 业务逻辑 和 view 视图隔离开。</p></li><li><p>媒体网关。MSN 作为中介者接收张三发的消息，查找李四并发送消息，同时通知张三消息已发送。与此相反的是 IPMsg 飞鸽，直接使用 UDP 广播的方式，每个客户端同时也是服务端。</p></li><li><p>中介服务。租房中介、出国中介。</p></li></ul></li></ol><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol><li>减少类间依赖，把原有的一对多依赖变成了一对一。同事类只依赖中介者，减少了依赖，同时也降低了类间的耦合。</li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol><li>中介者会膨胀较大，逻辑复杂，原本N个对象直接的相互依赖关系转换为中介者和同事类的依赖，同事类越多，中介者逻辑越复杂。</li></ol><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>中介者模式简单，但很容易被误用，类之间的依赖关系是必然存在的，不能只要看到有多个依赖关系就使用中介者模式，简单的几个对象依赖，如果为了使用模式而加入中介者，必然导致中介者逻辑复杂化而产生膨胀问题。关键点是以多个对象之间紧密耦合作为标准进行判断。</li><li>中介者模式很少用到接口或者抽象类，这与依赖倒置原则有冲突。原因在于同事类不是兄弟类，协作完成不同的任务，处理不同的业务，所以不能在抽象类或者接口中严格定义同事类必须具有的方法（这点可以看出继承是高侵入性的）。如果两个对象不能提炼出共性，那就不要刻意去追求两者的抽象，抽象只要定义出模式需要的角色即可。当然如果严格遵守面向接口编程，则需要抽象，这要在实际开发中灵活掌握。</li><li>一个中介者抽象类一般只有一个实现者，除非中介者逻辑非常复杂，代码量非常大。</li></ol><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><p>以进销存系统为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mediatorPattern</span> <span class="keyword">extends</span> <span class="title">AbstractMediator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String str, Object... objects)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str.equalsIgnoreCase(<span class="string">&quot;purchase.buy&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.buyComputer((Integer) objects[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.equalsIgnoreCase(<span class="string">&quot;sale.sell&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.sellComputer((Integer) objects[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.equalsIgnoreCase(<span class="string">&quot;sale.offsell&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.offSell();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.equalsIgnoreCase(<span class="string">&quot;stock.clear&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.clearStock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buyComputer</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> saleStatus = <span class="keyword">super</span>.sale.getSaleStatus();</span><br><span class="line">        <span class="keyword">if</span> (saleStatus &gt; <span class="number">80</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;销量不错，采购电脑&quot;</span> + num + <span class="string">&quot;台&quot;</span>);</span><br><span class="line">            <span class="keyword">super</span>.stock.increase(num);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> buyNum = num / <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;销量一般，折半采购电脑&quot;</span> + buyNum + <span class="string">&quot;台&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sellComputer</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.stock.decrease(num);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;库存数量不足，需要进货&quot;</span> + num + <span class="string">&quot;台&quot;</span>);</span><br><span class="line">            <span class="keyword">super</span>.purchase.buyComputer(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打折售卖</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">offSell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;折价销售电脑&quot;</span> + stock.getStockNum() + <span class="string">&quot;台&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清仓</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearStock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.sale.offSale();</span><br><span class="line">        <span class="keyword">super</span>.purchase.refuseBuyComputer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象中介者</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMediator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Purchase purchase = <span class="keyword">new</span> Purchase(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">protected</span> Sale sale = <span class="keyword">new</span> Sale(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">protected</span> Stock stock = <span class="keyword">new</span> Stock(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 中介者最重要的事件方法，处理多个对象之间的关系</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String str, Object... objects)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象同事类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractColleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> AbstractMediator mediator;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractColleague</span><span class="params">(AbstractMediator mediator)</span> </span>&#123; <span class="keyword">this</span>.mediator = mediator; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Purchase</span> <span class="keyword">extends</span> <span class="title">AbstractColleague</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Purchase</span><span class="params">(AbstractMediator mediator)</span> </span>&#123; <span class="keyword">super</span>(mediator); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyComputer</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123; <span class="keyword">super</span>.mediator.execute(<span class="string">&quot;purchase.buy&quot;</span>, num); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refuseBuyComputer</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;不再采购电脑&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sale</span> <span class="keyword">extends</span> <span class="title">AbstractColleague</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sale</span><span class="params">(AbstractMediator mediator)</span> </span>&#123; <span class="keyword">super</span>(mediator); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销售电脑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sellComputer</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.mediator.execute(<span class="string">&quot;sale.sell&quot;</span>, num);</span><br><span class="line">        System.out.println(<span class="string">&quot;销售电脑&quot;</span> + num + <span class="string">&quot;台&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反馈销售情况，0~100变化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSaleStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">int</span> saleStatus = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;电脑销售状况：&quot;</span> + saleStatus);</span><br><span class="line">        <span class="keyword">return</span> saleStatus;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 折扣处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offSale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.mediator.execute(<span class="string">&quot;sale.offsell&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stock</span> <span class="keyword">extends</span> <span class="title">AbstractColleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> computerNum = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stock</span><span class="params">(AbstractMediator mediator)</span> </span>&#123; <span class="keyword">super</span>(mediator); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加库存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        computerNum += num;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加&quot;</span> + num + <span class="string">&quot;台电脑后，库存：&quot;</span> + computerNum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 减少库存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (computerNum &gt;= num) &#123;</span><br><span class="line">            computerNum -= num;</span><br><span class="line">            System.out.println(<span class="string">&quot;减少&quot;</span> + num + <span class="string">&quot;台电脑后，库存：&quot;</span> + computerNum);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;库存量不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取库存数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStockNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computerNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清库存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearStock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;要清理的库存量：&quot;</span> + computerNum);</span><br><span class="line">        <span class="keyword">super</span>.mediator.execute(<span class="string">&quot;stock.clear&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractMediator mediator = <span class="keyword">new</span> mediatorPattern();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------采购员采购电脑------------&quot;</span>);</span><br><span class="line">        Purchase purchase = <span class="keyword">new</span> Purchase(mediator);</span><br><span class="line">        purchase.buyComputer(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------销售员销售电脑------------&quot;</span>);</span><br><span class="line">        Sale sale = <span class="keyword">new</span> Sale(mediator);</span><br><span class="line">        sale.sellComputer(<span class="number">200</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------仓库管理员清库处理------------&quot;</span>);</span><br><span class="line">        Stock stock = <span class="keyword">new</span> Stock(mediator);</span><br><span class="line">        stock.clearStock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令模式-Command"><a href="#命令模式-Command" class="headerlink" title="命令模式 Command"></a>命令模式 Command</h2><p>高内聚模式。把请求方 Invoker 和 执行方 Receiver 分开了，主要角色有：</p><ol><li>Receiver 接受者：实现类执行具体命令。</li><li>Command 命令角色：声明要执行的命令。</li><li>Invoker 调用者：接收命令，执行命令。</li></ol><h3 id="类图-2"><a href="#类图-2" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/command.png"></p><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>在认为是命令的地方就可以采用。例如 GUI 开发中的一个按钮点击；模拟DOS命令；出发-反馈机制的处理。</li></ol><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ol><li>类间解耦。调用者与接收者之间没有任何依赖关系，调用者实现功能时只需调用 Command 抽象类的 execute()，不需要了解到底是哪个接收者执行。</li><li>可扩展性。Command 的子类非常容易扩展，而调用者 Invoker 和高层次的模块 Client 不产生严重代码耦合。</li><li>与其他模式结合。<ul><li>结合责任链模式。实现命令族解析任务。</li><li>结合模板方法模式。减少 Command 子类膨胀问题。</li></ul></li></ol><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ol><li>如果有N个命令，Command 子类就是N个，类膨胀较大。</li></ol><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>命令模式的 Receiver 在实际应用中一般都会被封装掉（除非非常必要，如撤销处理）。原因是在项目中：约定的优先级最高，每一个命令是对一个或多个 Receiver 的封装，可通过有意义的类名或命令名处理 Command 和 Receiver 的耦合关系（约定），减少高层模块 Client 对低层模块的 Receiver 的依赖关系，提升系统整体稳定性。</li></ol><h3 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h3><ol><li>协调多个对象。Command 可封装多个 Reciever 对象，共同完成一项命令。</li><li>反悔问题。有两种方式解决：<ul><li>结合备忘录模式还原最后状态，该方法适合接收者为状态的变更情况，不适合事件处理。</li><li>增加新命令，实现事件回滚。例如增加撤销命令。</li></ul></li></ol><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><p>以处理文档、图片为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 receiver</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Operator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;默认回滚操作，需要时覆盖&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextOperator</span> <span class="keyword">extends</span> <span class="title">Operator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;添加文字&quot;</span>); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;更新文字&quot;</span>); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;删除文字&quot;</span>); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;撤销文字编辑操作&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PictureOperator</span> <span class="keyword">extends</span> <span class="title">Operator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;添加图片&quot;</span>); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;修改图片&quot;</span>); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;删除图片&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义命令</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> TextOperator text = <span class="keyword">new</span> TextOperator();</span><br><span class="line">    <span class="keyword">protected</span> PictureOperator picture = <span class="keyword">new</span> PictureOperator();</span><br><span class="line">    <span class="comment">// 只有一个方法那就是执行，至于怎么执行交给命令实现类</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateFileCommand</span> <span class="keyword">extends</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.text.add();</span><br><span class="line">        <span class="keyword">super</span>.picture.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeleteFileCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.text.delete();</span><br><span class="line">        <span class="keyword">super</span>.picture.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CancelCreateFileCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.text.rollback();</span><br><span class="line">        <span class="keyword">super</span>.picture.rollback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要一个负责人来接收客户发送的命令</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123; <span class="keyword">this</span>.command = command; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123; <span class="keyword">this</span>.command.execute(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高层模块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">        System.out.println(<span class="string">&quot;------客户发来新建图文的命令------&quot;</span>);</span><br><span class="line">        invoker.setCommand(<span class="keyword">new</span> CreateFileCommand());</span><br><span class="line">        invoker.action();</span><br><span class="line">        System.out.println(<span class="string">&quot;------客户说需要撤销刚才的创建命令------&quot;</span>);</span><br><span class="line">        invoker.setCommand(<span class="keyword">new</span> CancelCreateFileCommand());</span><br><span class="line">        invoker.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="责任链模式-Chain-Of-Responsibility"><a href="#责任链模式-Chain-Of-Responsibility" class="headerlink" title="责任链模式 Chain Of Responsibility"></a>责任链模式 Chain Of Responsibility</h2><p>将处理对象串成一条链，请求沿着链传递，直到有对象处理返回结果为止。</p><h3 id="类图-3"><a href="#类图-3" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/chain_of_responsibility.png"></p><h3 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>需要依次遍历处理对象的情况，请求不关心处理对象都有哪些。</li><li>作为补救模式。例如刚开始的项目需求是一个请求一个处理者，但是随着业务的发展，处理者数量和类型有所增加，这时就可以在第一个处理者后面建立一个链来处理请求。</li></ol><h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><ol><li>将请求和处理分开，解耦。请求者无需知道请求交给谁去处理，处理者也不用知道请求的全貌。</li></ol><h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><ol><li>可能产生性能问题。链比较长，大量请求从链头遍历到链尾产生性能问题。</li><li>调试不便。长链类似递归的方式对调试产生影响。</li></ol><h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>链中节点数量要控制，避免出现超长链。一般做法是在 handler 中设置一个最大节点数量，在 setNext 中判断是否已经超过阈值，超过则不允许该链建立，避免无意识地破坏系统性能。</li></ol><h3 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 级别</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Level</span> </span>&#123;</span><br><span class="line">    EMERGENCY, SPECIAL, NORMAL, MISS;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Level&gt; <span class="title">getLevelList</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Arrays.asList(Level.values()); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Level level;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(Level level)</span> </span>&#123; <span class="keyword">this</span>.level = level; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Level <span class="title">getLevel</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> level; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// handler</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 下一个处理者</span></span><br><span class="line">    <span class="keyword">private</span> AbstractHandler next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(AbstractHandler next)</span> </span>&#123; <span class="keyword">this</span>.next = next; &#125;</span><br><span class="line">    <span class="comment">// 某个处理者拥有一个级别</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Level <span class="title">getHandlerLevel</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 处理方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Response <span class="title">exec</span><span class="params">(Request request)</span></span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 总的处理逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Response <span class="title">handleMessage</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        Response response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (isExec(request.getLevel())) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">&quot;处理请求！&quot;</span>);</span><br><span class="line">            response = <span class="keyword">this</span>.exec(request);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;交给下个 handler 处理：&quot;</span> + </span><br><span class="line">                                   <span class="keyword">this</span>.next.getClass().getSimpleName());</span><br><span class="line">                response = <span class="keyword">this</span>.next.handleMessage(request);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有 handler 处理该请求：&quot;</span> + request.getLevel());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加一个是否执行的判断，只有当请求的级别高于 handler 的处理级别时再执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isExec</span><span class="params">(Level level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (level == <span class="keyword">null</span>) &#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</span><br><span class="line">        List&lt;Level&gt; levels = Level.getLevelList();</span><br><span class="line">        <span class="keyword">return</span> levels.indexOf(level) &lt;= levels.indexOf(getHandlerLevel());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Level <span class="title">getHandlerLevel</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Level.EMERGENCY; &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response <span class="title">exec</span><span class="params">(Request request)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Response(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Level <span class="title">getHandlerLevel</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Level.NORMAL; &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response <span class="title">exec</span><span class="params">(Request request)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Response(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler3</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Level <span class="title">getHandlerLevel</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Level.SPECIAL; &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response <span class="title">exec</span><span class="params">(Request request)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Response(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通常需要定一个处理器，来组装各个 handler，并指定一个入口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> AbstractHandler HANDLER1 = <span class="keyword">new</span> ConcreteHandler1();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> AbstractHandler HANDLER2 = <span class="keyword">new</span> ConcreteHandler2();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> AbstractHandler HANDLER3 = <span class="keyword">new</span> ConcreteHandler3();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        HANDLER1.setNext(HANDLER2);</span><br><span class="line">        HANDLER2.setNext(HANDLER3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">process</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HANDLER1.handleMessage(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Processor processor = <span class="keyword">new</span> Processor();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------紧急请求-------&quot;</span>);</span><br><span class="line">        processor.process(<span class="keyword">new</span> Request(Level.EMERGENCY));</span><br><span class="line">        System.out.println(<span class="string">&quot;-------普通请求-------&quot;</span>);</span><br><span class="line">        processor.process(<span class="keyword">new</span> Request(Level.NORMAL));</span><br><span class="line">        System.out.println(<span class="string">&quot;-------忽视请求-------&quot;</span>);</span><br><span class="line">        processor.process(<span class="keyword">new</span> Request(Level.MISS));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="策略模式-Strategy"><a href="#策略模式-Strategy" class="headerlink" title="策略模式 Strategy"></a>策略模式 Strategy</h2><p>也叫政策模式 Policy Pattern。使用面向对象的继承和多态机制，实现相同接口的算法使之可以互相转化，包含三个角色：</p><ol><li>Context 封装角色：也叫上下文角色，起承上启下的作用，屏蔽高层模块对策略、算法的直接访问，封装可能存在的变化。</li><li>Strategy 抽象策略角色：策略、算法家族的抽象，通常为接口，定义每个策略或算法必须具有的方法和属性。</li><li>ConcreteStrategy 具体策略角色：实现抽象策略中的操作，该类含有具有的算法。</li></ol><h3 id="类图-4"><a href="#类图-4" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/strategy.png"></p><h3 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>多个类只有在算法或行为上稍有不同的场景。</li><li>算法需要自由切换的场景。例如，算法由使用者决定或者始终在进化。</li><li>需要屏蔽算法规则的场景。对于大量的算法，传递算法的名称或者数字进来，反馈一个运算结果。</li></ol><h3 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h3><ol><li>算法可以自由切换。只要实现抽象策略，就称为策略家族的一个成员，通过封装角色对其进行封装，保证对外提供 “可自由切换” 的策略。</li><li>避免使用多重条件判断。如果一个策略家族有5个策略算法，使用多重条件语句不易维护，出错概率增大。</li><li>扩展性良好。增加策略只需要实现接口，其他都不用修改，类似一个可反复拆卸的插件，符合 OCP 原则。</li></ol><h3 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h3><ol><li>策略类数量增多。每个策略都是一个类，复用的可能性很小，类数量增多。</li><li>所有的策略类都需要对外暴露。上层模块必须知道有哪些策略，才能决定使用哪一个策略，这与迪米特法则相违背。但是可以使用其他模式来修正这个缺陷，如工厂方法模式、代理模式或享元模式。</li></ol><h3 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>系统中一个策略家族的具体策略数量超过4个，则需要考虑使用混合模式，解决策略类膨胀和对外暴露的问题。</li></ol><h3 id="扩展-2"><a href="#扩展-2" class="headerlink" title="扩展"></a>扩展</h3><ol><li>策略枚举</li></ol><h3 id="代码演示-4"><a href="#代码演示-4" class="headerlink" title="代码演示"></a>代码演示</h3><ol><li><p>普通策略模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Add</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a - b; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Calculator cal = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Calculator cal)</span> </span>&#123; <span class="keyword">this</span>.cal = cal; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, String symbol)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.cal.exec(a, b); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ADD_SYMBOL = <span class="string">&quot;+&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUB_SYMBOL = <span class="string">&quot;-&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 输入的两个参数是数字</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">444</span>;</span><br><span class="line">        String symbol = <span class="string">&quot;+&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">555</span>;</span><br><span class="line"></span><br><span class="line">        Context context = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (symbol.equals(ADD_SYMBOL)) &#123;</span><br><span class="line">            context = <span class="keyword">new</span> Context(<span class="keyword">new</span> Add());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.equals(SUB_SYMBOL)) &#123;</span><br><span class="line">            context = <span class="keyword">new</span> Context(<span class="keyword">new</span> Sub());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;运行结果为：&quot;</span> + a + symbol + b + <span class="string">&quot;=&quot;</span> + context.exec(a, b, symbol));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>策略枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CalculatorEnum</span> </span>&#123;</span><br><span class="line">    ADD(<span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUB(<span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a - b; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> String symbol;</span><br><span class="line">    CalculatorEnum(String symbol) &#123; <span class="keyword">this</span>.symbol = symbol; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">444</span>;</span><br><span class="line">        String symbol = <span class="string">&quot;+&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">555</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;运行结果为：&quot;</span> + a + symbol + b + <span class="string">&quot;=&quot;</span> + </span><br><span class="line">                           CalculatorEnum.ADD.exec(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="迭代器模式-Iterator"><a href="#迭代器模式-Iterator" class="headerlink" title="迭代器模式 Iterator"></a>迭代器模式 Iterator</h2><p>能容纳对象的所有类型都可称为容器，如 Collection 集合类型、Set 类型等，迭代器模式就是为解决遍历这些容器中的元素而诞生的。迭代器类似于数据库中的游标，可以在一个容器内上下翻滚，遍历需要查看的元素。包含以下角色：</p><ol><li>Iterator 抽象迭代器：负责定义访问和遍历元素的接口，基本上有3个固定方法，first()、next()、hasNext() 是否已经访问到底部。</li><li>ConcreteIterator 具体迭代器：实现 迭代器接口，完成容器元素的遍历。</li><li>Aggregate 抽象容器：提供创建具体迭代器角色的接口，必然提供一个类似 createIterator() 这样的方法，如 java 中的 iterator() 方法。</li><li>Concrete Aggregate 具体容器：实现容器接口定义的方法，创建出容纳迭代器的对象。</li></ol><h3 id="类图-5"><a href="#类图-5" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/iterator.png"></p><h3 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h3><ol><li>迭代器模式提供了遍历容器的方便性，容器只要管理增减元素即可，需要遍历时交由迭代器进行。</li></ol><h3 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>迭代器使用广发，JDK 1.2 版本开始增加 java.util.Iterator 这个接口，并逐步应用到各个聚集类 Collection 中，迭代器模式现已融入到基本 API 中。</li><li>Java 中尽量不要自己写迭代器模式，使用 Iterator 一般能够满足要求。</li><li>实际开发中，迭代器的删除方法应该完成2个逻辑，一是删除当前元素，二是当前游标指向下一个元素。</li></ol><h3 id="代码演示-5"><a href="#代码演示-5" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorPattern</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Vector vector;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IteratorPattern</span><span class="params">(Vector vector)</span> </span>&#123; <span class="keyword">this</span>.vector = vector; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.cursor != <span class="keyword">this</span>.vector.size(); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.hasNext()) &#123;</span><br><span class="line">            result = <span class="keyword">this</span>.vector.get(cursor++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实际开发中，迭代器的删除方法应该完成2个逻辑，一是删除当前元素，二是当前游标指向下一个元素。</span></span><br><span class="line">        <span class="keyword">this</span>.vector.remove(<span class="keyword">this</span>.cursor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="function">Iterator <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="keyword">implements</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Vector vector = <span class="keyword">new</span> Vector();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123; <span class="keyword">this</span>.vector.add(o); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123; <span class="keyword">this</span>.vector.remove(o); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> IteratorPattern(<span class="keyword">this</span>.vector); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Aggregate agg = <span class="keyword">new</span> ConcreteAggregate();</span><br><span class="line">        agg.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        agg.add(<span class="string">&quot;cccc&quot;</span>);</span><br><span class="line">        agg.add(<span class="number">234324</span>);</span><br><span class="line">        Iterator iter = agg.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">            System.out.println(iter.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》——结构型</title>
      <link href="blog/2019/1208:%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E2%80%94%E2%80%94%E7%BB%93%E6%9E%84%E5%9E%8B/"/>
      <url>blog/2019/1208:%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E2%80%94%E2%80%94%E7%BB%93%E6%9E%84%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>7种结构型模式：代理、装饰、适配器、组合、外观、享元、桥接。</p><span id="more"></span><h2 id="代理模式-Proxy"><a href="#代理模式-Proxy" class="headerlink" title="代理模式 Proxy"></a>代理模式 Proxy</h2><p>也叫委托模式。许多其他模式如状态模式、策略模式、访问者模式本质上是在特殊场合采用了委托模式。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/proxy.png"></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li><p>典型动态代理：Spring AOP</p><p>应用广泛：系统框架、企业平台、事务处理</p></li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>职责清晰：真实角色只需实现实际的业务逻辑，由代理完成事务。</li><li>高扩展性：具体的主题角色不管怎么变化，只要实现了接口，代理类就可以在不做任何修改的情况下使用。</li><li>智能化：动态代理。</li></ol><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p><strong>普通代理</strong></p><p>调用者需要知道代理类的存在才能访问，不用知道真实角色。</p><p>适合扩展性要求较高的场合。实际项目中通常约定禁止new一个真实角色。</p></li><li><p><strong>强制代理</strong></p><p>代理管理由真实角色完成，不能随便new。高层模块只需调用 getProxy 就可以访问真实角色所有方法。必须通过真实角色查找到代理角色才能访问，不允许直接访问真实角色。</p></li><li><p><strong>代理是有个性的</strong></p><p>代理可实现其他接口完成不同的任务。</p><p>代理的目的是在目标对象方法的基础上作增强，进行拦截和过滤。</p></li><li><p><strong>动态代理</strong></p><p>实现阶段不关心代理谁，而在运行阶段才指定代理哪个对象。</p><p>相对来说，自己写代理类的方式是静态代理。</p><p>AOP：Aspect Oriented Programming</p><p>实现思路：实现 InvocationHandler 动态代理接口，重写 invoke() 方法，完成对真实方法的调用。在运行时动态产生代理对象。</p></li></ol><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><ol><li><p><strong>普通代理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject1Impl</span> <span class="keyword">implements</span> <span class="title">Subject1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String str)</span> </span>&#123;System.out.println(<span class="string">&quot;Subject1 做&quot;</span> + str);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理要实现相同接口，高层模块调用时要先构造代理对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NormalProxy</span> <span class="keyword">implements</span> <span class="title">Subject1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Subject1 subject1;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NormalProxy</span><span class="params">(Subject1 subject1)</span> </span>&#123;<span class="keyword">this</span>.subject1 = subject1;&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String str)</span> </span>&#123;subject1.doSomething(str);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>强制代理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String str)</span></span>;</span><br><span class="line">    <span class="comment">// 获取自身特定的代理类</span></span><br><span class="line">    <span class="function">Subject2 <span class="title">getProxy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject2Impl</span> <span class="keyword">implements</span> <span class="title">Subject2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ForceProxy forceProxy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isProxy()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Subject2 在做&quot;</span> + str);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请使用自身代理执行 做&quot;</span> + str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否拥有代理</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isProxy</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.forceProxy != <span class="keyword">null</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Subject2 <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.forceProxy == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.forceProxy == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.forceProxy = <span class="keyword">new</span> ForceProxy(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.forceProxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForceProxy</span> <span class="keyword">implements</span> <span class="title">Subject2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Subject2 subject2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForceProxy</span><span class="params">(Subject2 subject2)</span> </span>&#123;<span class="keyword">this</span>.subject2 = subject2;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String str)</span> </span>&#123;subject2.doSomething(str);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Subject2 <span class="title">getProxy</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject2 subject2 = <span class="keyword">new</span> Subject2Impl();</span><br><span class="line">        subject2.doSomething(<span class="string">&quot;家务&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ForceProxy forceProxy = <span class="keyword">new</span> ForceProxy(subject2);</span><br><span class="line">        forceProxy.doSomething(<span class="string">&quot;饭&quot;</span>);</span><br><span class="line"></span><br><span class="line">        subject2.getProxy().doSomething(<span class="string">&quot;运动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>个性化的代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Player</span> </span>&#123;<span class="function"><span class="keyword">void</span> <span class="title">doSport</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Boss</span> </span>&#123;<span class="function"><span class="keyword">void</span> <span class="title">invest</span><span class="params">(String str)</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayerImpl</span> <span class="keyword">implements</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSport</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;运动员做XXX运动太出名了&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiImplementProxy</span> <span class="keyword">implements</span> <span class="title">Player</span>, <span class="title">Boss</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Player player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultiImplementProxy</span><span class="params">(Player player)</span> </span>&#123;<span class="keyword">this</span>.player = player;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        player.doSport();</span><br><span class="line">        <span class="keyword">this</span>.invest(<span class="string">&quot;拍电影&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invest</span><span class="params">(String str)</span> </span>&#123;System.out.println(<span class="string">&quot;代理人有钱，给运动员投资&quot;</span> + str);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Player player = <span class="keyword">new</span> PlayerImpl();</span><br><span class="line">        MultiImplementProxy proxy = <span class="keyword">new</span> MultiImplementProxy(player);</span><br><span class="line">        proxy.doSport();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>动态代理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态代理的 handler 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 被代理对象</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Object obj)</span> </span>&#123;<span class="keyword">this</span>.obj = obj;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(obj, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切面接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IAdvice</span> </span>&#123;<span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeforeAdvice</span> <span class="keyword">implements</span> <span class="title">IAdvice</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;前置通知被执行！&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用动态代理类，只做切面增强</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">newInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 寻找 JoinPoint 连接点，AOP框架使用元数据定义</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 执行一个前置通知</span></span><br><span class="line">            <span class="keyword">new</span> BeforeAdvice().exec();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(loader, interfaces, h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具有业务意义的动态代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubjectDynamicProxy</span> <span class="keyword">extends</span> <span class="title">DynamicProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SubjectDynamicProxy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">newProxyInstance</span><span class="params">(Subject4 subject4)</span> </span>&#123;</span><br><span class="line">        ClassLoader loader = subject4.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = subject4.getClass().getInterfaces();</span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler(subject4);</span><br><span class="line">        <span class="keyword">return</span> newInstance(loader, interfaces, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject4</span> </span>&#123;<span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject4Impl</span> <span class="keyword">implements</span> <span class="title">Subject4</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;Subject4 做某事&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高层调用模块——客户端</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">client4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject4 proxy = SubjectDynamicProxy.newProxyInstance(<span class="keyword">new</span> Subject4Impl());</span><br><span class="line">        proxy.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="装饰模式-Decorator"><a href="#装饰模式-Decorator" class="headerlink" title="装饰模式 Decorator"></a>装饰模式 Decorator</h2><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/decorator.png"></p><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>需要扩展一个类的功能，或给一个类增加附加功能。</li><li>需要动态地给一个对象增加功能，这些功能可以再动态地撤销。</li><li>需要为一批的兄弟类进行改造或加装功能，首选装饰模式。</li></ol><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol><li><p>装饰类和被装饰类可以独立发展，不会相互耦合。换句话说，Component类无须知道Decorator类，Decorator类是从外部来扩展Component类的功能，而Decorator也不用知道具体的构件。</p><p>对于 Father、Son、GrandSon三个类，如果要在 son 上增强功能，在 Son 上直接修改可能会影响到 GrandSon，但采用 SonDecorator 类来修饰 Son 相当于创建新类，对原来的程序无影响。</p></li><li><p>装饰模式是继承关系的替代方案。对于装饰类 Decorator，不管装饰多少层，返回的对象还是 Component，实现的还是 is-a 的关系。</p><p>继承会增加很多子类，装饰模式可以有效解决类膨胀的问题。</p></li><li><p>装饰模式可以动态地扩展一个实现类的功能。</p><p>想去掉某个封装只需要在高层模块去掉即可，如果用继承就必须要修改子模块。</p></li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li><p>多层的装饰比较复杂。定位问题时不容易发现是那一层装饰出了问题。</p><p>因此尽量减少装饰类的数量，以便降低系统的复杂度。</p></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>与代理模式的比较：类图、代码实现非常相似，区别在于</p><ul><li><p>代理负责接口限定：是否可以调用真实角色，以及是否对发送到真实角色的消息进行变形处理，不对被代理类的功能做任何处理。应用广范。</p><p>换个说法，代理模式会由代理进行相关操作，在代理内部通过new等方式创建被代理对象，对外屏蔽真实角色。而装饰模式是对真实角色的增强，装饰时需要传入被装饰对象，外部仍然可以直接调用。</p></li><li><p>装饰保证接口不变做类的加强，保证被修饰对象功能比原始对象丰富或减弱，但不做准入条件判断和准入参数过滤。例如 JDK 的 java.io.* 包中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OutputStream out = <span class="keyword">new</span> DataOutPutStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;test.txt&quot;</span>));</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SchoolReport</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 成绩单报告</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 家长签名</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sign</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 期末考试成绩报告，如果直接报告分数这么低肯定少不了“竹笋炒肉”</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FinalExamSchoolReport</span> <span class="keyword">extends</span> <span class="title">SchoolReport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;尊敬的XXX家长：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;XXX这次考试成绩如下：语文62，数学65，自然63&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;家长签名：&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sign</span><span class="params">(String name)</span> </span>&#123;System.out.println(<span class="string">&quot;家长签名为：&quot;</span> + name);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">SchoolReport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SchoolReport sr;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(SchoolReport sr)</span> </span>&#123;<span class="keyword">this</span>.sr = sr;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;sr.report();&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sign</span><span class="params">(String name)</span> </span>&#123;sr.sign(name);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果只汇报自己的成绩，太低容易挨揍，把班里的最高分作为背景铺垫一下，相对来说分就没那么低了</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HighScoreDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HighScoreDecorator</span><span class="params">(SchoolReport sr)</span> </span>&#123;<span class="keyword">super</span>(sr);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        reportHighScore();</span><br><span class="line">        <span class="keyword">super</span>.report();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reportHighScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这次考试全班最高分，语文75，数学78，自然82&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再来个排名的装饰，虽然分低但是排名不靠后，相对也还是不错</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SortDecorator</span><span class="params">(SchoolReport sr)</span> </span>&#123;<span class="keyword">super</span>(sr);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.report();</span><br><span class="line">        reportSort();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reportSort</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;全班60人，我的排名32&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SchoolReport sr = <span class="keyword">new</span> FinalExamSchoolReport();</span><br><span class="line">        sr = <span class="keyword">new</span> HighScoreDecorator(sr);</span><br><span class="line">        sr = <span class="keyword">new</span> SortDecorator(sr);</span><br><span class="line">        sr.report();</span><br><span class="line">        <span class="comment">// 报告完之后老爸一看还行，免了一顿打把字签了</span></span><br><span class="line">        sr.sign(<span class="string">&quot;XXX的爸爸&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="适配器模式-Adapter"><a href="#适配器模式-Adapter" class="headerlink" title="适配器模式 Adapter"></a>适配器模式 Adapter</h2><p>也叫变压器模式、包装模式（包装模式包括装饰模式）。</p><h3 id="类图-2"><a href="#类图-2" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/adapter.png"></p><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li><p>有动机修改一个已经投产中的接口时，比如系统扩展需要使用一个已有或新建的类，但这个类又不符合系统的接口，采用适配器模式。</p><p>作为补偿模式，用来解决接口不相容的问题。</p></li></ol><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ol><li>让两个没有关联的类一起运行。</li><li>增加类的透明性，高层模块不需要关注源角色怎么执行。</li><li>提高类的复用度，源角色在原有系统中可以正常使用，而在目标角色中也可以发挥新作用。</li><li>灵活性好，不需要适配器时删除掉即可。</li></ol><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>在详细设计阶段不要考虑使用适配器模式，它是为了解决正在服役的项目问题，减少代码修改带来的风险。</li><li>项目一定要遵守依赖倒置原则和里氏替换原则，否则即使使用适配器模式改动也很大。</li></ol><h3 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p><strong>类适配器</strong></p><p>通过继承进行适配。智能通过覆写源角色的方法进行扩展。</p></li><li><p><strong>对象适配器</strong></p><p>通过关联、聚合进行适配。适用于多接口适配。可以灵活修补源角色的隐形缺陷、关联其他对象等。实际项目中对象适配器使用场景较多。</p></li></ol><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><ol><li><p><strong>类适配器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;<span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TargetImpl</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;目标实现类执行request&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;源角色要做的事情&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;适配器要做的事&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 原逻辑</span></span><br><span class="line">        Target target = <span class="keyword">new</span> TargetImpl();</span><br><span class="line">        target.request();</span><br><span class="line">        <span class="comment">// 使用适配器后，也拥有了request方法，扩展了新功能</span></span><br><span class="line">        Target adapter = <span class="keyword">new</span> Adapter();</span><br><span class="line">        adapter.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>对象适配器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户信息</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUserInfo</span> </span>&#123;<span class="function">Map <span class="title">getUserInfo</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> <span class="keyword">implements</span> <span class="title">IUserInfo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getUserInfo</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> HashMap();&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUserHomeInfo</span> </span>&#123;<span class="function">Map <span class="title">getHomeInfo</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUserOfficeInfo</span> </span>&#123;<span class="function">Map <span class="title">getOfficeInfo</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserHomeInfo</span> <span class="keyword">implements</span> <span class="title">IUserHomeInfo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getHomeInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;homeAddress&quot;</span>, <span class="string">&quot;北京市海淀区奥林匹克公园&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;homePhone&quot;</span>, <span class="string">&quot;家庭电话：123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserOfficeInfo</span> <span class="keyword">implements</span> <span class="title">IUserOfficeInfo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getOfficeInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;officeAddress&quot;</span>, <span class="string">&quot;办公地址：鸟巢&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;officePhone&quot;</span>, <span class="string">&quot;办公电话：222333&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户基本信息，适配home和office两个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBaseInfo</span> <span class="keyword">implements</span> <span class="title">IUserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IUserHomeInfo userHomeInfo;</span><br><span class="line">    <span class="keyword">private</span> IUserOfficeInfo userOfficeInfo;</span><br><span class="line">    <span class="keyword">private</span> Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserBaseInfo</span><span class="params">(IUserHomeInfo userHomeInfo, IUserOfficeInfo userOfficeInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userHomeInfo = userHomeInfo;</span><br><span class="line">        <span class="keyword">this</span>.userOfficeInfo = userOfficeInfo;</span><br><span class="line">        map.putAll(userHomeInfo.getHomeInfo());</span><br><span class="line">        map.putAll(userOfficeInfo.getOfficeInfo());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getUserInfo</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> map;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdapterClient2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IUserHomeInfo homeInfo = <span class="keyword">new</span> UserHomeInfo();</span><br><span class="line">        IUserOfficeInfo officeInfo = <span class="keyword">new</span> UserOfficeInfo();</span><br><span class="line">        IUserInfo userInfo = <span class="keyword">new</span> UserBaseInfo(homeInfo, officeInfo);</span><br><span class="line">        Map info = userInfo.getUserInfo();</span><br><span class="line">        System.out.println(info.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="组合模式-Composite"><a href="#组合模式-Composite" class="headerlink" title="组合模式 Composite"></a>组合模式 Composite</h2><p>也叫合成模式、部分—整体模式，将对象组合成树形结构用来表示部分与整体的关系。</p><h3 id="类图-3"><a href="#类图-3" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/composite.png"></p><h3 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>维护和展示部分—整体关系的场景，如树形菜单、文件盒文件夹管理。</li><li>从一个整体中能够独立出部分模块或功能的场景。</li></ol><h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><ol><li><p>高层模块调用简单</p><p>一棵树形结构中的所有节点都是Component，局部和整体对调用者来说没有任何区别。高层模块不用关心处理的是单个对象还是整个组合结构。</p></li><li><p>节点自由增加</p><p>增加树枝节点、树叶节点非常容易，符合开闭原则，有利于维护。</p></li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol><li><p>不符合依赖倒置原则</p><p>场景类中树叶和树枝直接使用了实现类，限制了接口的影响范围。</p></li></ol><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>只要是树形结构，就要考虑使用组合模式。</li><li>体现局部和整体的关系，当关系比较深时，考虑组合模式。</li></ol><h3 id="扩展-2"><a href="#扩展-2" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p><strong>真实的组合模式</strong></p><p>实际使用中仍需组装这棵树，使用关系型数据库或者其他方式存储树形结构。</p></li><li><p><strong>安全模式</strong></p><p>树枝节点和树叶节点彻底分开，树枝节点单独拥有用来组合的方法，这种方法比较安全。</p></li><li><p><strong>透明模式</strong></p><p>把用来组合使用的方法放到抽象类中，不管叶子对象还是数值对象都有相同的结构。通过判断 getChildren 的返回值确认是叶子节点还是树枝节点，如果处理不当，会在运行期出问题。</p></li><li><p><strong>组合模式的遍历</strong></p><p>从上往下遍历没有问题，如果从下往上遍历，则需要设置 parent 属性。从而实现后序、中序等遍历方式。</p></li><li><p><strong>树叶、树枝节点排列顺序</strong></p><p>不用list，改用treeSet存储对象即可，可以加上实现 Comparable 接口，覆盖 compareTo 方法。</p></li></ol><h3 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h3><ol><li><p><strong>安全模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String position;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Staff</span><span class="params">(String name, String position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.position = position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.toString();&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">(String name, String position)</span> </span>&#123;<span class="keyword">super</span>(name, position);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Branch</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line">    List&lt;Staff&gt; subordinate = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Branch</span><span class="params">(String name, String position)</span> </span>&#123;<span class="keyword">super</span>(name, position);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStaff</span><span class="params">(Staff staff)</span> </span>&#123;<span class="keyword">this</span>.subordinate.add(staff);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Staff&gt; <span class="title">getSubordinate</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.subordinate;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompositeClient1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">getTreeInfo</span><span class="params">(Branch root)</span> </span>&#123;</span><br><span class="line">        String info = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        List&lt;Staff&gt; staff = root.getSubordinate();</span><br><span class="line">        <span class="keyword">for</span> (Staff s : staff) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s <span class="keyword">instanceof</span> Leaf) &#123;</span><br><span class="line">                info = info + s.getInfo();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                info = info + s.getInfo() + <span class="string">&quot;\t&quot;</span> + getTreeInfo((Branch) s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 组装</span></span><br><span class="line">        Staff staff = <span class="keyword">new</span> Branch(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;局长&quot;</span>);</span><br><span class="line">        Staff staff2 = <span class="keyword">new</span> Branch(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;科长&quot;</span>);</span><br><span class="line">        Staff leaf2 = <span class="keyword">new</span> Leaf(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;组员&quot;</span>);</span><br><span class="line">        Branch branch = ((Branch) staff).addStaff(staff2);</span><br><span class="line">        Branch branch2 = ((Branch) staff2).addStaff(leaf2);</span><br><span class="line">        <span class="comment">// 打印树枝节点</span></span><br><span class="line">        System.out.println(getTreeInfo(branch));</span><br><span class="line">        <span class="comment">// 打印树枝节点2</span></span><br><span class="line">        System.out.println(getTreeInfo(branch2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>透明模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add、remove等方法放在抽象类中</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Component</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> List&lt;Component&gt; <span class="title">getChildren</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf2</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">super</span>(name); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;叶子没有 add&quot;</span>); &#125;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;叶子没有 remove&quot;</span>); &#125;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">List&lt;Component&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;叶子没有子节点&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Branch2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    List&lt;Component&gt; subordinate = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Branch2</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">super</span>(name); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123; subordinate.add(component); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123; subordinate.remove(component); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">List&lt;Component&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.subordinate; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompositeClient2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">display</span><span class="params">(Component root)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (root <span class="keyword">instanceof</span> Leaf2) &#123;</span><br><span class="line">            s += root.getInfo();</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s += root.getInfo();</span><br><span class="line">            <span class="keyword">for</span> (Component child : root.getChildren()) &#123;</span><br><span class="line">                s += <span class="string">&quot;\t&quot;</span> + display(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Branch2 b1 = <span class="keyword">new</span> Branch2(<span class="string">&quot;分支1&quot;</span>);</span><br><span class="line">        Branch2 b2 = <span class="keyword">new</span> Branch2(<span class="string">&quot;分支1-1&quot;</span>);</span><br><span class="line">        Leaf2 l = <span class="keyword">new</span> Leaf2(<span class="string">&quot;叶子1&quot;</span>);</span><br><span class="line">        b1.add(b2);</span><br><span class="line">        b2.add(l);</span><br><span class="line">        System.out.println(display(b1));</span><br><span class="line">        System.out.println(<span class="string">&quot;------&quot;</span>);</span><br><span class="line">        System.out.println(display(b2));</span><br><span class="line">        System.out.println(<span class="string">&quot;------&quot;</span>);</span><br><span class="line">        System.out.println(display(l));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="外观模式-Facade"><a href="#外观模式-Facade" class="headerlink" title="外观模式 Facade"></a>外观模式 Facade</h2><p>也叫 <strong>门面模式</strong>。子系统外部与内部通信必须通过统一的对象进行，也就是提供一个访问子系统的接口，除了这个接口不允许有任何访问子系统的行为发生。</p><p>门面对象是外界访问子系统内部的唯一通道，不管子系统内部多么杂乱，只要有门面对象，就可做到“金玉其外败絮其中”。</p><h3 id="类图-4"><a href="#类图-4" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/facade.png"></p><h3 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>为一个复杂的模块或子系统提供一个供外界访问的接口。</li><li>子系统相对独立——外界对子系统的访问只要黑箱操作即可。例如利息计算子系统，对于使用者来说只要输入金额以及存期返回结果利息就可以，不用关心其他问题。</li><li>预防低水平人员带来的风险扩散。“画地为牢”，只在指定的子系统中开发，再提供门面接口进行访问操作。</li></ol><h3 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h3><ol><li>减少系统间的互相依赖。避免外界访问直接深入到子系统内部形成强耦合关系。</li><li>提高灵活性。子系统内部变化不影响门面对象，则随意使用。</li><li>提高安全性。门面上未开通的方法无法访问。</li></ol><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ol><li>不符合开闭原则，对修改关闭，对扩展开放。如果系统投产后发现有问题，只能通过修改门面角色的代码解决。</li></ol><h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>一个子系统可以有多个门面</p><p>门面已经庞大到不能忍受的程度。比如一个纯洁的门面对象已经超过了200行代码，虽然都是非常简单的委托操作，也建议拆分成多个门面，否则不利于以后的维护和扩展。拆分原则可按照功能拆分，例如数据库操作门面可以拆分为查询门面、删除门面、更新门面等。</p><p>子系统需要提供不同访问路径。例如模块一的门面已经封装了3个类ABC，模块二可以委托模块一的门面对象完成调用ABC中某一个类的操作，当外界调用模块二门面对象时，就减少了访问权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ClassA a = <span class="keyword">new</span> ClassA();</span><br><span class="line">    <span class="keyword">private</span> ClassB b = <span class="keyword">new</span> ClassB();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;<span class="keyword">this</span>.a.doSomethingA();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;<span class="keyword">this</span>.b.doSomethingB();&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade2</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;<span class="keyword">this</span>.facade.methodB();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>门面不参与子系统内的业务逻辑</p><p>当需要修改B方法时，不能这样改！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a.doSomethingA();</span><br><span class="line">    <span class="keyword">this</span>.b.doSomethingB();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而是建立一个封装类，封装完毕后提供给门面对象！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立封装类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ClassA a = <span class="keyword">new</span> ClassA();</span><br><span class="line">    <span class="keyword">private</span> ClassB b = <span class="keyword">new</span> ClassB();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">complexMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a.doSomethingA();</span><br><span class="line">        <span class="keyword">this</span>.b.doSomethingB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 门面上添加相应的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ClassA a = <span class="keyword">new</span> ClassA();</span><br><span class="line">    <span class="keyword">private</span> ClassB b = <span class="keyword">new</span> ClassB();</span><br><span class="line">    <span class="keyword">private</span> Context context = <span class="keyword">new</span> Context();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;<span class="keyword">this</span>.a.doSomethingA();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;<span class="keyword">this</span>.b.doSomethingB();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodC</span><span class="params">()</span> </span>&#123;<span class="keyword">this</span>.context.conplexMethod();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="代码演示-4"><a href="#代码演示-4" class="headerlink" title="代码演示"></a>代码演示</h3><p>以写信为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 信件处理接口，包含 写内容、写信封、封信封、投递</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LetterProcess</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">writeContext</span><span class="params">(String context)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fillEnvelope</span><span class="params">(String address)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">letterIntoEnvelope</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendLetter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LetterProcessImpl</span> <span class="keyword">implements</span> <span class="title">LetterProcess</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeContext</span><span class="params">(String context)</span> </span>&#123;System.out.println(<span class="string">&quot;信的内容：&quot;</span> + context);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillEnvelope</span><span class="params">(String address)</span> </span>&#123;System.out.println(<span class="string">&quot;收件人地址及姓名：&quot;</span> + address);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">letterIntoEnvelope</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;把信放入信封中&quot;</span>);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendLetter</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;邮递信件&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 邮局——外观类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostOffice</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LetterProcess letterProcess = <span class="keyword">new</span> LetterProcessImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendLetter</span><span class="params">(String context, String address)</span> </span>&#123;</span><br><span class="line">        letterProcess.writeContext(context);</span><br><span class="line">        letterProcess.fillEnvelope(address);</span><br><span class="line">        letterProcess.letterIntoEnvelope();</span><br><span class="line">        letterProcess.sendLetter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PostOffice postOffice = <span class="keyword">new</span> PostOffice();</span><br><span class="line">        postOffice.sendLetter(<span class="string">&quot;一封测试邮件&quot;</span>, <span class="string">&quot;长安大街1号 慈禧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="享元模式-Flyweight"><a href="#享元模式-Flyweight" class="headerlink" title="享元模式 Flyweight"></a>享元模式 Flyweight</h2><p>flyweight是拳击比赛中的特用名词，意思是“特轻量级”，指51公斤级比赛。在设计模式中指类要轻量级、粒度要小。粒度小带来的问题就是对象太多，就可以用共享技术来解决。</p><p>享元模式是池技术的重要实现方式。要求：细粒度的对象和共享对象。抽象后包括：</p><ol><li><p>内部状态：对象可共享出来的信息，存储在享元对象内部并且不会随环境改变而改变。</p></li><li><p>外部状态：对象得以依赖的一个标记，随环境改变而改变、不可共享的状态。</p></li><li><p>Flyweight——抽象享元角色：抽象类，同时定义出对象的外部状态和内部状态的接口或实现。</p></li><li><p>ConcreteFlyweight——具体享元角色：实现类。</p></li><li><p>unsharedConcreteFlyweight——不可共享的享元角色：不存在外部状态或者安全要求（如线程安全）无法使用共享技术的对象，该对象一般不会出现在享元工厂中。</p></li><li><p>FlyweightFactory——享元工厂：构造池容器，同时提供从池中获得对象的方法。</p></li></ol><h3 id="类图-5"><a href="#类图-5" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/flyweight.png"></p><h3 id="使用场景-5"><a href="#使用场景-5" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>系统中存在大量的相似对象。</li><li>细粒度的对象都具备较接近的外部状态，而且内部状态与环境无关，也就是说对象没有特定身份。</li><li>需要缓冲池的场景。</li></ol><h3 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h3><ol><li>大大减少应用创建的对象数量，降低程序内存的占用，增强程序性能。</li></ol><h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><ol><li>提高了系统复杂性，需要分离出外部状态和内部状态。而且内部状态具有固化特性，不应该随外部状态改变而改变，否则会导致系统逻辑混乱。</li></ol><h3 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>享元模式和对象池</p><p>可以使用享元模式实现对象池，但两者差异较大。</p><p>对象池是构造型模式，着重在对象的复用上，池中每个对象可替换，从同一个池中获得A对象和B对象对客户端来说是完全相同的。即对象池中的对象都是等价的，任意两个个对象在任何使用场景中都可以被池中的其他对象代替。例如数据库连接池、线程池等。</p><p>享元模式是结构型模式，主要解决对象的访问问题，如何建立多个可共享的细粒度对象才是关注的重点。享元工厂所维护的所有对象都是不同的，任何两个对象不能互相代替。侧重对象之间的衔接，把动态的、会变化的状态剥离、外部化，共享不变的东西。但是这部分外部化的东西和享元模式内部共享的不会变的东西之间存在关联。所以享元对外提供的接口常常会包含一个 String 类型的参数，表示 key、名称之类。</p></li></ol><h3 id="扩展-3"><a href="#扩展-3" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p><strong>线程安全问题</strong></p><p>多个线程从对象池中获得对象然后修改其属性，会出现线程安全问题。</p></li><li><p><strong>性能平衡</strong></p><p>尽量使用java基本类型作为外部状态。使用自定义类作为外部条件，需要覆写 equals 和 hashCode 方法，执行效率还低。使用 java 基本类型又简洁效率又高。</p></li></ol><h3 id="代码演示-5"><a href="#代码演示-5" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 内部状态</span></span><br><span class="line">    <span class="meta">@Getter</span> <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> String intrinsic;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部状态</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String extrinsic;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 要求享元角色必须接受外部状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Flyweight</span><span class="params">(String extrinsic)</span> </span>&#123;<span class="keyword">this</span>.extrinsic = extrinsic;&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteFlyweight</span><span class="params">(String extrinsic)</span> </span>&#123;<span class="keyword">super</span>(extrinsic);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;共享的具体的extrisic: &quot;</span> + extrinsic);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsharedConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnsharedConcreteFlyweight</span><span class="params">(String extrinsic)</span> </span>&#123;<span class="keyword">super</span>(extrinsic);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;不共享的具体extrinsic： &quot;</span> + extrinsic);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, Flyweight&gt; pool = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Flyweight <span class="title">getFlyweight</span><span class="params">(String extrinsic)</span> </span>&#123;</span><br><span class="line">        Flyweight flyweight;</span><br><span class="line">        <span class="keyword">if</span> (pool.containsKey(extrinsic)) &#123;</span><br><span class="line">            flyweight = pool.get(extrinsic);</span><br><span class="line">            System.out.println(<span class="string">&quot;已有 &quot;</span> + extrinsic + <span class="string">&quot; 直接从池中获取&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            flyweight = <span class="keyword">new</span> ConcreteFlyweight(extrinsic);</span><br><span class="line">            pool.put(extrinsic, flyweight);</span><br><span class="line">            System.out.println(<span class="string">&quot;创建 &quot;</span> + extrinsic + <span class="string">&quot; 并从池中取出&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flyweight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Flyweight x = FlyweightFactory.getFlyweight(<span class="string">&quot;X&quot;</span>);</span><br><span class="line">        x.operate();</span><br><span class="line">        Flyweight y = FlyweightFactory.getFlyweight(<span class="string">&quot;Y&quot;</span>);</span><br><span class="line">        y.operate();</span><br><span class="line">        Flyweight z = FlyweightFactory.getFlyweight(<span class="string">&quot;Z&quot;</span>);</span><br><span class="line">        z.operate();</span><br><span class="line">        Flyweight xx = FlyweightFactory.getFlyweight(<span class="string">&quot;X&quot;</span>);</span><br><span class="line">        xx.operate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="桥接模式-Bridge"><a href="#桥接模式-Bridge" class="headerlink" title="桥接模式 Bridge"></a>桥接模式 Bridge</h2><p>也叫桥梁模式，将抽象和实现解耦，使得两者可以独立变化。包含4个角色：</p><ol><li>抽象化角色 Abstraction：定义该角色的行为，同时保存一个队实现化角色的引用，该角色一般是抽象类。</li><li>实现化角色 Implementor：接口或抽象类，定义角色必须的行为和属性。</li><li>修正抽象化角色 RefinedAbstraction：引用实现化角色对抽象化角色进行修正。</li><li>具体实现化角色 ConcreteImplementor：实现接口或抽象类定义的方法和属性。</li></ol><p>抽象角色引用实现角色，或者说抽象角色的部分实现是由实现角色完成的。</p><h3 id="类图-6"><a href="#类图-6" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/bridge.png"></p><h3 id="使用场景-6"><a href="#使用场景-6" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>不希望或者不适合使用继承的场景。例如继承层次过多、无法更细化设计颗粒等场景。</li><li>接口或抽象类不稳定的场景。明知道接口不稳定还想通过实现或继承来实现业务需求，得不偿失。</li><li>重用性要求较高的场景。设计的颗粒度越细，则被重用的可能性就越大，而采用继承则受父类的限制，不可能出现太细的颗粒度。</li></ol><h3 id="优点-6"><a href="#优点-6" class="headerlink" title="优点"></a>优点</h3><ol><li><p>抽象和实现分离</p><p>完全是为了解决继承的缺点而提出的设计模式。在该模式下，实现可以不受抽象的约束，不用再绑定在一个固定的抽象层次上。</p></li><li><p>优秀的扩充能力</p><p>增加实现、抽象非常容易，只要堆外暴露的接口层允许这样的变化，已经把变化的可能性减到最小。</p></li><li><p>实现细节对客户透明</p><p>客户不用关心细节的实现，已经由抽象层通过聚合关系完成了封装。</p></li></ol><h3 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>使用时主要考虑如何拆分抽象和实现，并不是一涉及继承就要使用。桥接模式的意图主要是对变化的封装，尽量把可能变化的因素封装到最细、最小的逻辑单元中，避免风险扩散。因此在系统设计时，发现类的继承有N层时，可以考虑使用该模式。例如 Father 类有一个方法 A，Son 继承了这个方法，GrandSon 也继承了这个方法，那么 Son 则不能再随便修改这个方法了。</li></ol><h3 id="代码演示-6"><a href="#代码演示-6" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现化角色</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Getter</span> <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">beProduced</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">beSelled</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beProduced</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;房子被生产出来了。。&quot;</span>);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beSelled</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;生产的房子被卖掉了。。&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beProduced</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;汽车被生产出来了。。&quot;</span>);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beSelled</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;生产的汽车被卖掉了。。&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象化角色</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Corp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Product product;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Corp</span><span class="params">(Product product)</span> </span>&#123;<span class="keyword">this</span>.product = product;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.product.beProduced();</span><br><span class="line">        <span class="keyword">this</span>.product.beSelled();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HouseCorp</span> <span class="keyword">extends</span> <span class="title">Corp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseCorp</span><span class="params">(Product product)</span> </span>&#123;<span class="keyword">super</span>(product);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.makeMoney();</span><br><span class="line">        System.out.println(<span class="string">&quot;房地产公司赚大钱了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManufactureCorp</span> <span class="keyword">extends</span> <span class="title">Corp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ManufactureCorp</span><span class="params">(Product product)</span> </span>&#123;<span class="keyword">super</span>(product);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.makeMoney();</span><br><span class="line">        System.out.println(<span class="string">&quot;制造公司生产&quot;</span> + <span class="keyword">super</span>.product.getName() + <span class="string">&quot;，也赚钱了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BridgeClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Product house = <span class="keyword">new</span> House();</span><br><span class="line">        house.setName(<span class="string">&quot;【房子】&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;房地产公司运行。。。。&quot;</span>);</span><br><span class="line">        Corp houseCorp = <span class="keyword">new</span> HouseCorp(house);</span><br><span class="line">        houseCorp.makeMoney();</span><br><span class="line">        System.out.println(<span class="string">&quot;\n制造公司运行。。。&quot;</span>);</span><br><span class="line">        Product car = <span class="keyword">new</span> Car();</span><br><span class="line">        car.setName(<span class="string">&quot;【汽车】&quot;</span>);</span><br><span class="line">        Corp manufactureCorp = <span class="keyword">new</span> ManufactureCorp(car);</span><br><span class="line">        manufactureCorp.makeMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》——创建型</title>
      <link href="blog/2019/1201:%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BA%E5%9E%8B/"/>
      <url>blog/2019/1201:%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BA%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>5种创建型模式：单例、工厂、抽象工厂、建造者、原型。</p><span id="more"></span><h2 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式 Singleton"></a>单例模式 Singleton</h2><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/singleton.png"></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>要求生成唯一序列号的环境。</li><li>整个项目需要一个共享访问点或共享数据。例如web页面上的计数器，使用单例保持计数器的值。</li><li>创建对象需要消耗过多资源。例如访问IO和数据库等。</li><li>需要定义大量静态常量和静态方法（如工具类）的环境（也可直接声明为 static 的方式）。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>内存中只有一个实例，减少了内存开销。避免对象频繁的创建、销毁。</li><li>减少系统性能开销。可在应用启动时之间产生单例对象去读取配置，产生其他依赖对象等。</li><li>避免对资源的多重占用。例如写文件只由单例去完成。</li><li>设置全局访问点，优化和共享资源访问。例如由单例类负责所有数据表的映射处理。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>一般没有接口，扩展困难。提供单一实例、接口或抽象类。</li><li>对测试不利。单例没有完成没法测试，业不能 mock 一个虚拟对象。</li><li>与单一职责原则由冲突。一个雷实现一个逻辑，不关心是否单例。是不是单例取决于环境，单例模式把要单例 和 业务逻辑 融合在一个类中。</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>线程同步问题</p><p>高并发时，可能会出现该问题。解决办法：饿汉、懒汉、二次检查等。</p></li><li><p>对象的复制情况</p><p>如果实现了 Cloneable 接口，即使私有构造函数对象仍然可以被复制。因为克隆不需要调用类的构造函数。对于单例类最好不要实现 Cloneable 接口。</p></li></ol><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p>有上限的单例模式**</p><p>决定内存中有多少个实例，修正单例可能存在的性能问题，提供系统的响应速度，例如读取文件在系统启动时完成初始化工作，在内存中启动固定数量的 reader 实例，然后在需要读取文件时就可以快速响应。</p></li></ol><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式</span></span><br><span class="line"><span class="comment"> * 线程不安全，延迟初始化，严格意义上不是不是单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Singleton1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式</span></span><br><span class="line"><span class="comment"> * 线程安全，比较常用，但容易产生垃圾，因为一开始就初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重锁模式</span></span><br><span class="line"><span class="comment"> * 线程安全，延迟初始化。采用双锁机制，安全且在多线程情况下能保持高性能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 避免对象创建时可能在JVM中重排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton3 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton3.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton3();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类单例模式</span></span><br><span class="line"><span class="comment"> * 只有第一次调用 getInstance() 时，虚拟机才加载内部类并初始化 instance</span></span><br><span class="line"><span class="comment"> * 只有一个线程可以获得对象的初始化锁，其他线程无法进行初始化，保证对象的唯一性</span></span><br><span class="line"><span class="comment"> * 目前此方式是所有单例模式中最推荐的模式，但具体还是根据项目选择。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton4 INSTANCE = <span class="keyword">new</span> Singleton4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举单例模式</span></span><br><span class="line"><span class="comment"> * 默认枚举实例的创建时线程安全的，并且在任何情况下都是单例</span></span><br><span class="line"><span class="comment"> * 实际上：枚举类隐藏了私有的构造器；枚举类的域是相应类型的一个实例对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Singleton5</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton5.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂方法模式-Factory"><a href="#工厂方法模式-Factory" class="headerlink" title="工厂方法模式 Factory"></a>工厂方法模式 Factory</h2><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/factory.png"></p><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>需要灵活可扩展的框架时。比如需要设计一个链接邮件服务器的框架，有3种网络协议可选：POP3、IMAP、HTTP，作为产品类，定义接口IConnectMail，然后定义对邮件的操作方法，用不同的方法实现三个具体的产品类（连接方式），再定义一个工厂方法，按照不同的传入条件，选择不同的连接方式。</li><li>用在异构项目中。例如通过webservice与非java项目交互，虽然webservice号称可以做到异构系统的同构化，但实际会遇到类型问题、WSDL文件的支持问题等。从WSDL中产生的对象都认为是一个产品，然后由一个具体的工厂类进行管理，减少与外围系统的耦合。</li><li>使用在测试驱动开发的框架下。例如测试类A，把与A有关联的B虚拟出来，避免A与B的耦合。该功能由于 JMock 和 EasyMock 的诞生使用场景已经弱化了。</li></ol><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol><li>封装良好，代码结构清晰。只需知道产品类名或约束字符串，屏蔽创建过程，降低模块间的耦合。</li><li>优秀的扩展性。只需增加扩展类，无需修改工厂类。</li><li>屏蔽产品类。接口不变系统中的上层模块就不要发生变化。例如 JDBC 连接数据库，切换数据库需要改动的只是驱动名称。</li><li>解耦框架。高层模块只需要指导产品的抽象类，符合迪米特法则（只关心需要关心的）、依赖倒置原则（只依赖产品类的抽象）、里氏替换原则（使用产品子类替换父类）。</li></ol><h3 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p>缩小为简单工厂模式</p></li><li><p>升级为多个工厂类</p></li><li><p>代替单例模式</p></li><li><p>延迟初始化</p><p>通过map缓存需要重用的对象</p></li></ol><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><ol><li><p><strong>简单工厂模式</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;bmw&quot;</span>.equalsIgnoreCase(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bmw();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;benz&quot;</span>.equalsIgnoreCase(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Benz();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;暂时不生产这个品牌的汽车&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态方法通过反射创建产品类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Car&gt; <span class="function">T <span class="title">getCar</span><span class="params">(Class&lt;T&gt; c)</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        car = (Car) Class.forName(c.getName()).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleFactory simpleFactory = <span class="keyword">new</span> SimpleFactory();</span><br><span class="line">        Car car = simpleFactory.getCar(<span class="string">&quot;bmw&quot;</span>);</span><br><span class="line">        System.out.println(car.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;奔驰&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bmw</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;宝马&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>工厂模式</strong></p><p> 不能存在一个工厂生产所有产品的情况，所以需要多个工厂进行不同产品的生产。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂类</span></span><br><span class="line"><span class="comment"> * 多个工厂，封装不同的产品生产流程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Benz();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BmwFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bmw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BenzFactory benzFactory = <span class="keyword">new</span> BenzFactory();</span><br><span class="line">        System.out.println(benzFactory.getCar().getName());</span><br><span class="line"></span><br><span class="line">        BmwFactory bmwFactory = <span class="keyword">new</span> BmwFactory();</span><br><span class="line">        System.out.println(bmwFactory.getCar().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>替代单例模式</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class c = Class.forName(Singleton.class.getName());</span><br><span class="line">            Constructor constructor = c.getDeclaredConstructor();</span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            instance = (Singleton) constructor.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> instance; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>延迟初始化</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Product&gt; PRODUCT_MAP = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> &lt;T extends Product&gt; <span class="function">T <span class="title">getProduct</span><span class="params">(Class&lt;T&gt; c)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        T product = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (PRODUCT_MAP.containsKey(c.getName())) &#123;</span><br><span class="line">            product = (T) PRODUCT_MAP.get(c.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            T t = c.newInstance();</span><br><span class="line">            PRODUCT_MAP.put(c.getName(), t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product1</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="抽象工厂模式-Abstract-Factory"><a href="#抽象工厂模式-Abstract-Factory" class="headerlink" title="抽象工厂模式 Abstract Factory"></a>抽象工厂模式 Abstract Factory</h2><h3 id="类图-2"><a href="#类图-2" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/abstract_factory.png"></p><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>一个对象族（或是一组没有任何关系的对象）都有相同的约束，就可以使用抽象工厂模式。比如文本编辑器和图片处理器都是软件，但是 linux 和 windows 下文本编辑器虽然界面相同，但是代码不同，也就有了共同的约束条件——操作系统。</li></ol><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ol><li>封装性好。高层模块不关心每个产品的实现类，值关心接口。对象的创建由工厂类负责。高层模块只需要知道工厂类有哪些就行。</li><li>产品族内的约束为非公开状态。例如下面代码中约定每生产1个发动机，需要设计出3种外形与之匹配。</li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol><li>产品族扩展非常困难。如果新增一个产品，需要修改抽象工厂类、几个实现类，严重违反开闭原则。</li></ol><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>与工厂模式的区别</p><p>工厂模式用来创建同一个产品的不同类型，如汽车里的奔驰、宝马，抽象工厂模式用来创建不同类的产品，汽车工厂设计汽车造型，生产发动机等。一般来说产品种类单一适合用工厂模式，如果有多个种类各种类型，更适合用抽象工厂模式。</p></li><li><p>产品族扩展困难，产品等级扩展容易</p><p>也就是横向扩展容易，纵向扩展困难。例如下面代码新增车型奥迪，只需要新增奥迪工厂类即可。从这一点上，抽象工厂符合开闭原则。</p></li></ol><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> DesignFactory <span class="title">designAppearance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> EngineFactory <span class="title">produceEngine</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品类型</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DesignFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">design</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EngineFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BmwDesignFactory</span> <span class="keyword">extends</span> <span class="title">DesignFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">design</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;设计宝马造型&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzDesignFactory</span> <span class="keyword">extends</span> <span class="title">DesignFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">design</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;设计奔驰造型&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BmwEngineFactory</span> <span class="keyword">extends</span> <span class="title">EngineFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产宝马发动机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzEngineFactory</span> <span class="keyword">extends</span> <span class="title">EngineFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产奔驰发动机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BmwFactory</span> <span class="keyword">extends</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DesignFactory <span class="title">designAppearance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BmwDesignFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EngineFactory <span class="title">produceEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BmwEngineFactory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BmwFactory bmwFactory = <span class="keyword">new</span> BmwFactory();</span><br><span class="line">        bmwFactory.designAppearance().design();</span><br><span class="line">        bmwFactory.produceEngine().produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="建造者模式-Builder"><a href="#建造者模式-Builder" class="headerlink" title="建造者模式 Builder"></a>建造者模式 Builder</h2><h3 id="类图-3"><a href="#类图-3" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/builder.png"></p><h3 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>相同的方法，不同的执行顺序，产生不同的事件结果。</li><li>多个部件或零件都可以装配到一个对象中，但是产生的运行结果又不相同。</li><li>产品类非常复杂，或者产品类中的调用顺序不同产生了不同的效能。</li><li>对象创建过程中会使用到系统中的一些其他对象，这些对象在产品创建过程中不易得到时，可采用建造者模式封装该对象的创建过程。这种场景只能是一个补偿方法，因为一个对象不容易获得，在设计阶段竟然没发觉，而要通过创建者模式柔化创建过程，本身已经违反设计的最初目标。</li><li>当一个类构造器需要传入很多参数时，如果创建这个类的实例，代码可读性差，可用 builder 模式重构。如 lombok 的 @Builder 注解。</li></ol><h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><ol><li>封装性好。使客户端不必知道产品内部组成的细节，只关注产生的对象和要素。</li><li>建造者独立，更容易扩展。多个 builder 相互独立，对系统的扩展非常有利。</li><li>便于控制细节风险。具体建造者独立，因此可以对建造过程逐步细化，而不对其他模块产生任何影响。</li></ol><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>与工厂模式的区别</p><p>建造者模式最主要的功能是方法的调用顺序安排，通俗讲就是零件的装配，顺序不同对象也不同。即关注的是零件类型和装配工艺（顺序）。</p><p>工厂方法主要职责是创建零件，而不关心组装顺序。</p></li></ol><h3 id="扩展-2"><a href="#扩展-2" class="headerlink" title="扩展"></a>扩展</h3><ol><li>与模板方法模式进行结合</li></ol><h3 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setPart</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;产品做某事&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Product product = <span class="keyword">new</span> Product();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPart</span><span class="params">()</span> </span>&#123; product.setName(<span class="string">&quot;默认名字&quot;</span>); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">build</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> product; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span> </span>&#123; <span class="keyword">this</span>.builder = builder; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        builder.setPart();</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Director director = <span class="keyword">new</span> Director(<span class="keyword">new</span> ConcreteProduct());</span><br><span class="line">        Product product = director.getBuilder();</span><br><span class="line">        product.doSomeThing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式 Prototype"></a>原型模式 Prototype</h2><h3 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>资源优化场景。类初始化消耗较多资源，包括数据、硬件等。</li><li>性能和安全要求的场景。避免通过 new 产生一个对象需要非常繁琐的数据准备或访问权限。</li><li>一个对象多个修改者的场景。拷贝多个对象供各个调用者使用。</li><li>原型模式一般与工厂方法模式一起使用，通过 clone 方法创建一个对象，然后由工厂方法提供给调用者。</li></ol><h3 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h3><ol><li>性能优良。内存二进制流的拷贝，比直接 new 一个对象性能好很多，特别是在循环体内产生大量对象。</li><li>逃避构造函数的约束。直接内存拷贝，不会执行构造函数，即使是 private 也可以克隆。双刃剑。</li></ol><h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>构造函数不会被执行</p></li><li><p>深拷贝和浅拷贝</p><p>使用原型模式时，引用的成员变量必须满足两个条件才不会被拷贝：一是类的成员变量，而不是方法内变量；二必须时一个可变得引用对象，而不是原始类型或不可变对象。</p><p>深拷贝和浅拷贝建议不要混合使用，特别是涉及类的继承时，父类有多个引用的情况就非常复杂，建议深拷贝和浅拷贝分开实现。</p></li><li><p>clone 与 final 有冲突。要使用 clone，类成员变量上就不能加 final 修饰。</p></li></ol><h3 id="代码演示-4"><a href="#代码演示-4" class="headerlink" title="代码演示"></a>代码演示</h3><ol><li><p><strong>构造函数不执行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Prototype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数被执行。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Prototype <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Prototype) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Prototype prototype = <span class="keyword">new</span> Prototype();</span><br><span class="line">        Prototype clone = prototype.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>深拷贝与浅拷贝</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LightClone</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> LightClone <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (LightClone) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addValue</span><span class="params">(String value)</span> </span>&#123; list.add(value); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getValueList</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.list; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        LightClone origin = <span class="keyword">new</span> LightClone();</span><br><span class="line">        origin.addValue(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        LightClone clone = origin.clone();</span><br><span class="line">        clone.addValue(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">        System.out.println(origin.getValueList());</span><br><span class="line">        System.out.println(clone.getValueList());</span><br><span class="line">        System.out.println(origin.getValueList() == clone.getValueList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeepClone</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DeepClone <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        DeepClone clone = (DeepClone) <span class="keyword">super</span>.clone();</span><br><span class="line">        clone.list = (ArrayList&lt;String&gt;) clone.list.clone();</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addValue</span><span class="params">(String value)</span> </span>&#123; list.add(value); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getValueList</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.list; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        DeepClone origin = <span class="keyword">new</span> DeepClone();</span><br><span class="line">        origin.addValue(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        DeepClone clone = origin.clone();</span><br><span class="line">        clone.addValue(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">        System.out.println(origin.getValueList());</span><br><span class="line">        System.out.println(clone.getValueList());</span><br><span class="line">        System.out.println(origin.getValueList() == clone.getValueList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>增加 final 的拷贝</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalClone</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> FinalClone <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        FinalClone clone = (FinalClone) <span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="comment">// 下面这行代码报错</span></span><br><span class="line">        <span class="comment">// clone.list = (ArrayList&lt;String&gt;) this.list.clone();</span></span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大型网站技术架构</title>
      <link href="blog/2019/1117:%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"/>
      <url>blog/2019/1117:%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>不逼自己一把，可能连本书都没时间看。。</p><p>终于把李智慧大佬的《大型网站技术架构——核心原理与案例分析》看完了，顺便梳理了全书脉络。本书出版于2013年，正是web系统登峰造极之时，尽管移动互联网相关内容缺席，但是系统架构的主题思想仍然是沿用的，即便是5G时代为可能出现的物联网信息大爆炸而设计的服务器系统。因此放眼现在，该书也是系统架构设计入门不可多得的“武功秘籍”。</p><p>文末会列出一些对该书的思考，欢迎大家在评论区一起探讨优秀的系统架构设计。</p><span id="more"></span><h3 id="大型网站架构演化发展历程"><a href="#大型网站架构演化发展历程" class="headerlink" title="大型网站架构演化发展历程"></a>大型网站架构演化发展历程</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/2019/07/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8C%96%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B.png"></p><h3 id="大型网站架构模式"><a href="#大型网站架构模式" class="headerlink" title="大型网站架构模式"></a>大型网站架构模式</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/2019/07/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F.png"></p><h3 id="大型网站核心架构要素"><a href="#大型网站核心架构要素" class="headerlink" title="大型网站核心架构要素"></a>大型网站核心架构要素</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/2019/07/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E8%A6%81%E7%B4%A0.png"></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ol><li><p><strong>大型网站发展历程</strong></p><p>补充后期淘宝系统架构发展历史：分布式系统之后，应用自研的OceanBase数据库，使用云计算、混合云，服务容器化等技术。</p><p>虽然文中没有提及微服务这个名词，事实上思想已经存在。</p></li><li><p><strong>分布式中间件的应用</strong></p><p>在该书出版后的短短6年，各项技术如雨后春笋出现在大众视野，其中很多分布式中间件已经发展到非常成熟的地步，应用十分广泛。</p><p>分布式缓存：现阶段主流应用层缓存为redis，尤其是redis-cluster模式，在memcached的互不通信的基础上，增加了主从功能，从而实现数据分片和备份。</p><p>分布式消息中间件：ActiveMQ没落，RocketMQ和Kafka盛行，RabbitMQ仍有一席之地。</p></li><li><p><strong>前端缓存</strong></p><p>补充一下移动互联网时代的前端缓存，举个典型的优化案例，网易云音乐的评论系统，用户在评论后点击确定立即看到了自己的评论，其实是缓存在手机app上的信息，而真正的信息此时可能刚刚进入消息队列，并没有持久化到数据库中。</p></li><li><p><strong>线程池参数定义</strong></p><p>此处需要更正，现阶段的线程池个数设置遵循以下规则：</p><p>计算密集型任务，N=CPU数量+1</p><p>IO密集型任务，N=CPU数量 * CPU利用率 * （1 + 线程等待时间/线程CPU时间）</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式进阶用法与真实调优案例</title>
      <link href="blog/2019/1017:%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%B8%8E%E7%9C%9F%E5%AE%9E%E8%B0%83%E4%BC%98%E6%A1%88%E4%BE%8B/"/>
      <url>blog/2019/1017:%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%B8%8E%E7%9C%9F%E5%AE%9E%E8%B0%83%E4%BC%98%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p> 正则表达式并不陌生，但当面对复杂的正则表达式：长度长，特殊符号多，多分组的情况下，解析速度会怎样？</p><span id="more"></span><h3 id="正则表达式基础"><a href="#正则表达式基础" class="headerlink" title="正则表达式基础"></a>正则表达式基础</h3><p>为节省版面直击要害，基础内容本文不作赘述，请点击以下链接查看：</p><p><a href="http://tool.oschina.net/uploads/apidocs/jquery/regexp.html">表达式全集</a></p><p><a href="https://www.cnblogs.com/fozero/p/7868687.html">史上最全常用正则表达式大全</a></p><h3 id="真实案例：超级慢的正则表达式"><a href="#真实案例：超级慢的正则表达式" class="headerlink" title="真实案例：超级慢的正则表达式"></a>真实案例：超级慢的正则表达式</h3><p>常用的正则表达式一般几秒内解析完毕，那么见过3分钟都没解析出来的正则表达式吗？请往下看：</p><h4 id="解析目标"><a href="#解析目标" class="headerlink" title="解析目标"></a>解析目标</h4><p>过滤请求中不合法的 uri（不包含参数），如包含特殊符号<code>- = + % ?</code>、多个斜杠<code>//</code>、中文等。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>正则表达式：<code>&quot;^(/?[A-Za-z0-9\\-]+/?[A-Za-z0-9\\-]+)+/?&quot;</code></p><p>编写 java 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有方法设置成静态的，方便 main 调用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern URI_PATTERN = Pattern.compile(<span class="string">&quot;^(/?[A-Za-z0-9\\-]+/?[A-Za-z0-9\\-]+)+/?)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateUri</span><span class="params">(String uri)</span> </span>&#123;</span><br><span class="line">  Matcher m = URI_PATTERN.matcher(uri);</span><br><span class="line">  <span class="keyword">return</span> m.matches();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;开始。。。。。。&quot;</span>);</span><br><span class="line">System.out.println(validateUri(<span class="string">&quot;/hotel/getUseraaaaaaaasdfasdfasdfasdfasdf+&quot;</span>));</span><br><span class="line">  System.out.println(<span class="string">&quot;结束。。。。。。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 validate 方法。</p><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p>6C32G mac pro 跑了3分钟没跑完。。没耐心继续等待，直接中断。</p><h4 id="最简单的解决方案"><a href="#最简单的解决方案" class="headerlink" title="最简单的解决方案"></a>最简单的解决方案</h4><p>简化正则表达式为：<code>^/?([-A-Za-z0-9]/?)+$</code></p><p>但是我们需要知道为什么？如果就想在原来的基础上做修改，该怎么办？</p><h3 id="原因探索：回溯匹配"><a href="#原因探索：回溯匹配" class="headerlink" title="原因探索：回溯匹配"></a>原因探索：回溯匹配</h3><h4 id="猜测：考虑字符太长，以及特殊符号的问题"><a href="#猜测：考虑字符太长，以及特殊符号的问题" class="headerlink" title="猜测：考虑字符太长，以及特殊符号的问题"></a>猜测：考虑字符太长，以及特殊符号的问题</h4><p>测试1：把 uri  中间的 aaaaaasdfsdf 等去掉后，只保留简单的 /hotel/getUser+，很明显速度提上来了。</p><p>测试2：把 uri  中的 + 号提前，变成 /hotel/getUser+aaaaaaaasdfasdfasdfasdfasdf，速度也很快。</p><h4 id="初步结论：非匹配字符的位置会影响正则表达式的执行效率"><a href="#初步结论：非匹配字符的位置会影响正则表达式的执行效率" class="headerlink" title="初步结论：非匹配字符的位置会影响正则表达式的执行效率"></a>初步结论：非匹配字符的位置会影响正则表达式的执行效率</h4><p>为此需要知道正则表达式的执行规则：回溯。</p><p>比如要匹配的字符串是 <code>helloworld,hihaojava</code></p><p>正则表达式是 <code>h(ello|ihao)java</code></p><p>匹配过程：</p><ol><li>从字符串第一个字符 h 开始匹配，可以命中。</li><li>接下来的匹配正则有2个分支 <code>ello</code> 和 <code>ihao</code> 。在 e 处打标记，先从左边的 <code>ello</code> 开始匹配，可以匹配字符串，但是到了 world 的 w 时，与正则中的 j 不一致，该分支匹配结束。接着回溯到刚刚的标记处，开始第二个分支 <code>ihao</code>，无法匹配，接下来正则会从 h 开始匹配字符串。</li><li>从字符串的第二个字符 e 继续匹配，直到正则的第一个字符 h 匹配到字符串的 <code>,</code> 之后匹配成功。</li><li>接着正则的2个分支执行匹配，最终只有 <code>ihao</code>匹配成功，最终匹配到的字符串是 hihaojava。</li></ol><p>看完了正则的匹配过程，就知道为什么前面代码中的正则匹配效率会那么低下了。每个字母都要匹配到最后的+才发现匹配失败，回溯后继续查找，如果忽略其他，只考虑字符串 getUseraaaaaaaasdfasdfasdfasdfasdf+ 和正则 <code>[-A-Za-z0-9]</code> 的影响，时间复杂度就已经为 n^2，类似于以下模拟代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟代码，真实情况远比这个复杂，这里仅为了方便理解</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">  String reg = <span class="string">&quot;-ABCDEFGHIJKMLNOPQRSTUVWSYZabcdefghijkmlnopqrstuvwsyz0123456789&quot;</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> length = s.length();</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">      count ++;</span><br><span class="line">      String idx = s.substring(j, j + <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (!reg.contains(idx)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配失败！特殊字符：&quot;</span> + idx);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;匹配字符：&quot;</span> + idx);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;一共匹配了 &quot;</span> + count + <span class="string">&quot;次！字符串长度为 &quot;</span> + length);</span><br><span class="line">  <span class="keyword">return</span> i != length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决方法：采用进阶匹配模式"><a href="#解决方法：采用进阶匹配模式" class="headerlink" title="解决方法：采用进阶匹配模式"></a>解决方法：采用进阶匹配模式</h3><h4 id="正则模式：贪婪、勉强、侵占"><a href="#正则模式：贪婪、勉强、侵占" class="headerlink" title="正则模式：贪婪、勉强、侵占"></a>正则模式：贪婪、勉强、侵占</h4><p>假定字符串为：aahelloworldhello</p><ul><li><p>贪婪模式（<code>.*he</code>）：将正则分为两个模式 p1 <code>.*</code> 以及 p2 <code>wo</code> 。</p><ol><li><p>第一轮匹配：p1读入所有字符串，那么p2就没什么都没匹配到。</p></li><li><p>第二轮匹配：字符串被分割为 aahelloworldhell 和 o，p1匹配子串1成功，p2匹配子串2失败。</p></li><li><p>直到字符串分割为 aahelloworld 和 hello时，两个正则模式都匹配成功。匹配到的子串为aahelloworldhe，停止匹配，返回结果。</p></li></ol></li><li><p>勉强模式（<code>.*?he</code>）：最小匹配方式。此时的正则模式为 <code>.*?</code> 和 <code>wo</code>。</p><ol><li>第一次匹配：p1由于是0或任意次，被忽略，用字符串整体去匹配 p2，当然失败。</li><li>第二次匹配：p1读入第一个字符 a，匹配成功，剩余的 ahelloworldhello 由 p2匹配，失败。</li><li>直到字符串分割为 aa 和 helloworldhello，两个正则模式都匹配成功。匹配子串 aahe，返回结果。</li><li>继续匹配，直到字符串分隔为 lloworld 和 hello，匹配子串 lloworldhe，返回结果。</li></ol></li><li><p>侵占模式（<code>.*+he</code>）：也叫占用模式。匹配开始时读入所有字符串和 p1匹配成功，但没有剩余字符串去和 p2匹配，因此返回匹配失败。</p></li></ul><p>说明：贪婪模式和占有模式相比，贪婪模式会在只有部分匹配成功的条件下，依次从多到少减少匹配成功部分模式的匹配数量，将字符留给模式其他部分去匹配。而占用模式则是占有所有能匹配成功部分，绝不留给其他部分使用。</p><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN_GREEDY = Pattern.compile(<span class="string">&quot;.*he&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN_FORCED = Pattern.compile(<span class="string">&quot;.*?he&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN_OCCUPIED = Pattern.compile(<span class="string">&quot;.*+he&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String s = <span class="string">&quot;aahelloworldhello&quot;</span>;</span><br><span class="line">  Matcher greedy = PATTERN_GREEDY.matcher(s);</span><br><span class="line">  <span class="keyword">while</span> (greedy.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;贪婪模式：匹配到子串 &quot;</span> + greedy.group());</span><br><span class="line">    System.out.println(<span class="string">&quot;贪婪模式：查找匹配到的子串在原始串中的索引位置 &quot;</span> + greedy.start());</span><br><span class="line">    System.out.println(<span class="string">&quot;贪婪模式：查找匹配到的子串最后一个字符串在原串中的位置 &quot;</span> + greedy.end());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Matcher forced = PATTERN_FORCED.matcher(s);</span><br><span class="line">  <span class="keyword">while</span> (forced.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;勉强模式：匹配到子串 &quot;</span> + forced.group());</span><br><span class="line">    System.out.println(<span class="string">&quot;勉强模式：查找匹配到的子串在原始串中的索引位置 &quot;</span> + forced.start());</span><br><span class="line">    System.out.println(<span class="string">&quot;勉强模式：查找匹配到的子串最后一个字符串在原串中的位置 &quot;</span> + forced.end());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Matcher occupied = PATTERN_OCCUPIED.matcher(s);</span><br><span class="line">  System.out.println(<span class="string">&quot;侵占模式：匹配原串任意位置返回的结果： &quot;</span> + occupied.find());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">贪婪模式：匹配到子串 aahelloworldhe</span><br><span class="line">贪婪模式：查找匹配到的子串在原始串中的索引位置 <span class="number">0</span></span><br><span class="line">贪婪模式：查找匹配到的子串最后一个字符串在原串中的位置 <span class="number">14</span></span><br><span class="line">  </span><br><span class="line">勉强模式：匹配到子串 aahe</span><br><span class="line">勉强模式：查找匹配到的子串在原始串中的索引位置 <span class="number">0</span></span><br><span class="line">勉强模式：查找匹配到的子串最后一个字符串在原串中的位置 <span class="number">4</span></span><br><span class="line">勉强模式：匹配到子串 lloworldhe</span><br><span class="line">勉强模式：查找匹配到的子串在原始串中的索引位置 <span class="number">4</span></span><br><span class="line">勉强模式：查找匹配到的子串最后一个字符串在原串中的位置 <span class="number">14</span></span><br><span class="line">  </span><br><span class="line">侵占模式：匹配原串任意位置返回的结果： <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>在这个基础上，之前的难题迎刃而解。对于判断 uri 是否合法的问题，不需要正则做回溯操作，整体不合法则返回匹配失败即可，因此选用侵占模式，需要将之前的正则表达式改进一下。</p><p><strong>原始正则表达式：<code>&quot;^(/?[A-Za-z0-9\\-]+/?[A-Za-z0-9\\-]+)+/?&quot;</code></strong></p><p><strong>改进后的正则表达式：<code>&quot;^(/?[A-Za-z0-9\\-]++/?[A-Za-z0-9\\-]++)+/?&quot;</code></strong></p><p>测试后发现速度变为了 ms 级，只增加 + 号，效果显而易见。</p><h3 id="正则高级用法补充"><a href="#正则高级用法补充" class="headerlink" title="正则高级用法补充"></a>正则高级用法补充</h3><p>除了贪婪勉强侵占模式以外，补充一些其他的高级用法。</p><h4 id="获取匹配-Capturing"><a href="#获取匹配-Capturing" class="headerlink" title="获取匹配 Capturing"></a>获取匹配 Capturing</h4><p>系统在幕后将所有的子模式匹配结果保存起来，供我们查找或替换。</p><ul><li><p>后向引用：使用 <code>\数字</code> 代表前面某个子模式的匹配内容，使用 <code>$数字</code> 代表变量。</p><p>例如：匹配合法的 html 标记。</p><p>正则：<code>&lt;h([1-6])&gt;.*?&lt;/h\1&gt;</code></p><p>文本：&lt;h1&gt; text1&lt;/h1&gt;           &lt;h2&gt;text23&lt;/h3&gt;</p><p>其中 &lt;h1&gt;text1&lt;/h1&gt; 被成功匹配。<code>\1</code>代表前面的子模式([1-6])的匹配结果1。</p><p>常见应用：匹配重复单词 <code>(\w+) \1</code>，匹配合法的 html 标记。</p></li></ul><h4 id="非获取匹配-Non-Capturing"><a href="#非获取匹配-Non-Capturing" class="headerlink" title="非获取匹配 Non-Capturing"></a>非获取匹配 Non-Capturing</h4><p>在子模式内部前面添加 <code>?:</code>。表示这个子模式的匹配内容不会被保存，不能用于后向引用中。</p><p>例如：Windows 95 and Windows 98 are the successor. Then Windows 2000 and Windows Xp appeared. Windows Vista is the Latest version of the family.</p><p>正则：<code>Windows (?:[\w]+\b)</code></p><p>匹配：<strong>Windows 95</strong> and <strong>Windows 98</strong> are the successor. Then <strong>Windows 2000</strong> and <strong>Windows Xp</strong> appeared. <strong>Windows Vista</strong> is the Latest version of the family.</p><p>结果：只匹配内容，但并未保存子匹配的结果</p><ul><li><p>正向肯定预查：在子模式内部前面加 <code>?=</code>，子模式仅仅作为条件限制，并不作为匹配结果输出，匹配子模式前面的内容。</p><p>正则：<code>Windows (?=[\d]+\b)</code></p><p>匹配：<strong>Windows</strong> 95 and <strong>Windows</strong> 98 are the successor. Then <strong>Windows</strong> 2000 and Windows Xp appeared. Windows Vista is the Latest version of the family.</p></li><li><p>正向否定预查：在子模式内部前面加 <code>?!</code>。</p><p>正则：<code>Windows (?![\d]+\b)</code></p><p>匹配：Windows 95 and Windows 98 are the successor. Then Windows 2000 and <strong>Windows</strong> Xp appeared. <strong>Windows</strong> Vista is the Latest version of the family.</p></li><li><p>反向肯定预查：在子模式内部前面加 <code>?&lt;=</code>，匹配子模式后面的结果作为匹配结果。</p><p>例如：CNY:100.2 USD:222.1 USD:301.3 HKD:122.1 CNY:114.4</p><p>正则：<code>(?&lt;=CNY:)\d+\.\d</code></p><p>匹配：CNY:<strong>100.2</strong>  USD:222.1 USD:301.3 HKD:122.1 CNY:<strong>114.4</strong></p></li><li><p>反向否定预查：在子模式内部前面加 <code>?&lt;!</code></p><p>正则：<code>(?&lt;!CNY:)\b\d+\.\d</code></p><p>匹配：CNY:100.2 USD:<strong>222.1</strong> USD:<strong>301.3</strong> HKD:<strong>122.1</strong> CNY:114.4</p></li></ul><h4 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h4><ul><li>获取匹配</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;abc def aaa bbb&quot;</span>.replaceAll(<span class="string">&quot;(\\w+)\\s(\\w+)&quot;</span>, <span class="string">&quot;$2 $1&quot;</span>);</span><br><span class="line"><span class="comment">// 结果是 def abc bbb aaa</span></span><br></pre></td></tr></table></figure><ul><li>非获取匹配</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN = Pattern.compile(<span class="string">&quot;Windows (?:[\\w]+\\b)&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN_POSITIVE_YES = Pattern.compile(<span class="string">&quot;Windows (?=[\\d]+\\b)&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN_POSITIVE_NO = Pattern.compile(<span class="string">&quot;Windows (?![\\d]+\\b)&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN_NEGATIVE_YES = Pattern.compile(<span class="string">&quot;(?&lt;=CNY:)\\d+\\.\\d+&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN_NEGATIVE_NO = Pattern.compile(<span class="string">&quot;(?&lt;!CNY:)\\b\\d+\\.\\d+&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STR1 = <span class="string">&quot;Windows 95 and Windows 98 are the successor. Then Windows 2000 and Windows Xp appeared. Windows Vista is the Latest version of the family.&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STR2 = <span class="string">&quot;CNY:100.25 USD:222.16 USD:301.3 HKD:122.1 CNY:114.4&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Matcher noCapturing = PATTERN.matcher(STR1);</span><br><span class="line">  System.out.println(<span class="string">&quot;\n非获取匹配结果：---------&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (noCapturing.find()) &#123;</span><br><span class="line">    System.out.print(noCapturing.group() + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Matcher positiveYes = PATTERN_POSITIVE_YES.matcher(STR1);</span><br><span class="line">  System.out.println(<span class="string">&quot;\n正向肯定预查结果：---------&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (positiveYes.find()) &#123;</span><br><span class="line">    System.out.print(positiveYes.group() + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Matcher positiveNo = PATTERN_POSITIVE_NO.matcher(STR1);</span><br><span class="line">  System.out.println(<span class="string">&quot;\n正向否定预查结果：---------&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (positiveNo.find()) &#123;</span><br><span class="line">    System.out.print(positiveNo.group() + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Matcher negativeYes = PATTERN_NEGATIVE_YES.matcher(STR2);</span><br><span class="line">  System.out.println(<span class="string">&quot;\n负向肯定预查结果：---------&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (negativeYes.find()) &#123;</span><br><span class="line">    System.out.print(negativeYes.group() + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Matcher negativeNo = PATTERN_NEGATIVE_NO.matcher(STR2);</span><br><span class="line">  System.out.println(<span class="string">&quot;\n负向否定预查结果：---------&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (negativeNo.find()) &#123;</span><br><span class="line">    System.out.print(negativeNo.group() + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">非获取匹配结果：---------</span><br><span class="line">Windows 95Windows 98Windows 2000Windows XpWindows Vista</span><br><span class="line">正向肯定预查结果：---------</span><br><span class="line">Windows Windows Windows</span><br><span class="line">正向否定预查结果：---------</span><br><span class="line">Windows Windows</span><br><span class="line">负向肯定预查结果：---------</span><br><span class="line">100.25114.4</span><br><span class="line">负向否定预查结果：---------</span><br><span class="line">222.16301.3122.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> general </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac单机部署mysql多实例</title>
      <link href="blog/2019/1004:mac%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2mysql%E5%A4%9A%E5%AE%9E%E4%BE%8B/"/>
      <url>blog/2019/1004:mac%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2mysql%E5%A4%9A%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p> 单机部署mysql多实例，需要用到 mysql 自带的 mysqld_multi 命令，在目录 support_files 下有 mysqld_multi.server 命令封装。</p><span id="more"></span><h4 id="mysql-版本：5-7-27"><a href="#mysql-版本：5-7-27" class="headerlink" title="mysql 版本：5.7.27"></a>mysql 版本：5.7.27</h4><h3 id="单机多实例配置"><a href="#单机多实例配置" class="headerlink" title="单机多实例配置"></a>单机多实例配置</h3><h4 id="手动创建-my-cnf-文件"><a href="#手动创建-my-cnf-文件" class="headerlink" title="手动创建 my.cnf 文件"></a>手动创建 my.cnf 文件</h4><p>mac 使用 dmg 文件直接安装，不会自动生成 my.cnf 文件，需要手动创建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[mysqld_multi]</span><br><span class="line">mysqld     = /usr/local/mysql/bin/mysqld_safe</span><br><span class="line">mysqladmin = /usr/local/mysql/bin/mysqladmin</span><br><span class="line">user       = root</span><br><span class="line">password   = root</span><br><span class="line"></span><br><span class="line">[mysqld1]</span><br><span class="line">socket     = /tmp/mysql.sock1</span><br><span class="line">port       = 3311</span><br><span class="line">pid-file   = /usr/local/var/mysql/data/data1/hostname.pid1</span><br><span class="line">datadir    = /usr/local/var/mysql/data/data1</span><br><span class="line">language   = /usr/local/mysql/share/english</span><br><span class="line">user       = root</span><br></pre></td></tr></table></figure><h4 id="执行-mysqld-multi-server-start"><a href="#执行-mysqld-multi-server-start" class="headerlink" title="执行 mysqld_multi.server start"></a>执行 mysqld_multi.server start</h4><p>这时会在控制台显示出生成的密码，记住待会儿会进行修改。</p><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -P 3312 -p  -S /tmp/mysql.sock2 password</span><br></pre></td></tr></table></figure><h4 id="连接-mysql"><a href="#连接-mysql" class="headerlink" title="连接 mysql"></a>连接 mysql</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p -P 3312 -S /tmp/mysql.sock2</span><br></pre></td></tr></table></figure><h4 id="关闭mysql"><a href="#关闭mysql" class="headerlink" title="关闭mysql"></a>关闭mysql</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./mysqld_multi.server stop        #关闭所有</span><br><span class="line">./mysqld_multi.server stop 1      #关闭单个</span><br><span class="line">./mysqld_multi.server stop 1-2    #关闭某个范围的实例</span><br></pre></td></tr></table></figure><h3 id="单机多实例主从配置"><a href="#单机多实例主从配置" class="headerlink" title="单机多实例主从配置"></a>单机多实例主从配置</h3><p>必读：<a href="https://blog.51cto.com/superpcm/2094958">MySQL的主从复制介绍及配置</a></p><p>具体执行顺序按照链接中的顺序操作即可。这里只谈在操作中采的坑以及核心要点。</p><ol><li><p>不要在命令行直接输入密码，例如：<code>mysql -u root -p &#39;root&#39; -P 3312 -S /tmp/mysql.sock2</code></p><p>解决方法：去掉-p后的 ‘root’。<code>mysql -u root -p -P 3312 -S /tmp/mysql.sock2</code></p></li><li><p>从库<code>Slave_IO_Running: Connecting</code> 问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Slave_IO_Running: Connecting</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>解决方法：这个问题多半是未连接到主库专门用来复制的用户，检查用户名，用户权限等。</p></li><li><p>主库备份问题</p><p>关键在于了解参数的意义，可以指定某个数据库进行备份，也可以<code>-A</code>全部备份。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p -S /tmp/mysql/mysql.sock1 -A  &gt; mysql_bak.2019-10-06.sql</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池invokeAll方法详解</title>
      <link href="blog/2019/0810:%E7%BA%BF%E7%A8%8B%E6%B1%A0invokeAll%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>blog/2019/0810:%E7%BA%BF%E7%A8%8B%E6%B1%A0invokeAll%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>线上真实案例，多次调用线程池 ThreadPoolExecutor 的 invokeAll() 方法进行数据统计时任务被拒绝，故事从此开始。</p><p>本文重在讲述问题的产生、抽象、寻找解决方法的过程，并结合源码对原因进行抽丝剥茧般的分析。bug 千千万万，唯有合理的逻辑推理思维才能让这些 bug 显露原形。</p><span id="more"></span><h3 id="问题起源与抽象"><a href="#问题起源与抽象" class="headerlink" title="问题起源与抽象"></a>问题起源与抽象</h3><p>先来看一段简单的代码，定义一个核心线程数5、有界队列5的线程池，然后创建10个任务丢进去执行2次。</p><p>按照以前对线程池执行逻辑的理解，创建的10个线程，会先交给核心线程去执行，5个核心线程满了之后，存放到队列中，刚好存储剩下的5个，按理说10个任务都会正常执行完毕。本次只测试固定大小的线程池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokeAllTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">            <span class="number">60</span> * <span class="number">1000</span>, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">5</span>),</span><br><span class="line">            <span class="keyword">new</span> MyThreadFactory());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Callable&lt;Void&gt;&gt; tasks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            tasks.add(<span class="keyword">new</span> InvokeAllThread());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一次任务执行前的executor： &quot;</span> + executor);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor.invokeAll(tasks);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一次任务执行完毕后的executor： &quot;</span> + executor);</span><br><span class="line">        System.out.println(<span class="string">&quot;==============第一次任务执行完毕，开始第二次任务============&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            executor.invokeAll(tasks);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;第二次任务执行完毕后的executor：&quot;</span> + executor);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 任务执行线程。通过打印线程名称，观察提交的任务被哪个线程执行</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokeAllThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Void <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给工作线程自定义名字，方便观察提交的任务被哪个线程执行</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> AtomicInteger threadNum = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(r, String.valueOf(threadNum.getAndIncrement()));</span><br><span class="line">            <span class="keyword">if</span> (thread.getPriority() != Thread.NORM_PRIORITY) &#123;</span><br><span class="line">                thread.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> thread;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行程序后发现，第一次调用 invokeAll 正常执行，第二次调用报错。多次执行结果相同。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">第一次任务执行前的executorjava.util.concurrent.ThreadPoolExecutor@30f39991[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">第一次任务执行完毕后的executorjava.util.concurrent.ThreadPoolExecutor@30f39991[Running, pool size = 5, active threads = 0, queued tasks = 0, completed tasks = 10]</span><br><span class="line">==============第一次任务执行完毕，开始第二次任务============</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">Exception in thread &quot;main&quot; java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@3a71f4dd rejected from java.util.concurrent.ThreadPoolExecutor@30f39991[Running, pool size = 5, active threads = 2, queued tasks = 0, completed tasks = 13]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379)</span><br><span class="line">at java.util.concurrent.AbstractExecutorService.invokeAll(AbstractExecutorService.java:238)</span><br><span class="line">at com.aaron.hp.thread.pool.InvokeAllTest.main(InvokeAllTest.java:36)</span><br></pre></td></tr></table></figure><h3 id="问题排查与猜测"><a href="#问题排查与猜测" class="headerlink" title="问题排查与猜测"></a>问题排查与猜测</h3><p>既然程序出现异常，就该调用 debug 模式进行排查，并遵循”大胆猜测，小心求证”的态度，去解决这个问题。</p><h4 id="猜测一：invokeAll-在异步执行后会不会同步等待线程执行完毕获取最终结果"><a href="#猜测一：invokeAll-在异步执行后会不会同步等待线程执行完毕获取最终结果" class="headerlink" title="猜测一：invokeAll 在异步执行后会不会同步等待线程执行完毕获取最终结果"></a>猜测一：invokeAll 在异步执行后会不会同步等待线程执行完毕获取最终结果</h4><p>由于 invokeAll 封装的太好，之前只知道最后会同步等待才能获取返回值。那么现在就需要去证实这个概念。</p><p>进入 invokeAll 方法后，发现调用了<code>f.get()</code>，那么毫无疑问，这个猜测可以排除掉了。</p><p>其实从执行过程的输出内容也可以看出，两次调用 invokeAll 的执行顺序和界限(打印语句) 非常明显。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (tasks == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    ArrayList&lt;Future&lt;T&gt;&gt; futures = <span class="keyword">new</span> ArrayList&lt;Future&lt;T&gt;&gt;(tasks.size());</span><br><span class="line">    <span class="keyword">boolean</span> done = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Callable&lt;T&gt; t : tasks) &#123;</span><br><span class="line">            RunnableFuture&lt;T&gt; f = newTaskFor(t);</span><br><span class="line">            futures.add(f);</span><br><span class="line">          <span class="comment">// 任务被添加后的具体执行</span></span><br><span class="line">            execute(f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = futures.size(); i &lt; size; i++) &#123;</span><br><span class="line">            Future&lt;T&gt; f = futures.get(i);</span><br><span class="line">            <span class="keyword">if</span> (!f.isDone()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 此处同步等待</span></span><br><span class="line">                    f.get();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (CancellationException ignore) &#123;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException ignore) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        done = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> futures;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!done)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = futures.size(); i &lt; size; i++)</span><br><span class="line">                futures.get(i).cancel(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="猜测二：队列里面可能存在第一次调用-invokeAll-执行了但没有删掉的任务，所以才会导致第二次放入队列失败"><a href="#猜测二：队列里面可能存在第一次调用-invokeAll-执行了但没有删掉的任务，所以才会导致第二次放入队列失败" class="headerlink" title="猜测二：队列里面可能存在第一次调用 invokeAll 执行了但没有删掉的任务，所以才会导致第二次放入队列失败"></a>猜测二：队列里面可能存在第一次调用 invokeAll 执行了但没有删掉的任务，所以才会导致第二次放入队列失败</h4><p>由于未阅读源码，猜测只有当创建的任务执行完毕并且销毁之后，才会从队列中真正移除。</p><p>那么就需要查看入队列和出队列的时机。查看 invokeAll 方法中的 <code>execute(f)</code> 方法。</p><p>查看 ThreadPoolExecutor 类下的 execute 方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">  <span class="comment">// 判断工作线程数是否小于核心线程数，如果是则创建 Worker 工作线并返回</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 判断主线程是否在运行，并判断是否入队列成功</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 否则重新创建 Worker 线程，创建失败则抛出拒绝策略</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就会发现入队列的操作在<code>workQueue.offer(command)</code>处完成，而我们提交的任务是由一个叫 Worker 类的实例来执行，<code>addWorker(command, true)</code>创建 Worker 实例。</p><p>那么我们就分别进去这两个方法来看下源码：</p><p>矮油黑人问号脸。。没想到这个  ThreadPoolExecutor 类的 addWorker 这么长，给核心代码写个注释重点关注，扫一眼然后去看 offer 方法(英文注释是源码中自带的)。前面都是校验，创建核心线程处为<code>new Worker(firstTask)</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">                ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">                        firstTask == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        ! workQueue.isEmpty()))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                    wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">break</span> retry;</span><br><span class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">    Worker w = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 上面一堆都是校验，此处才是 Worker 被创建的地方，注意被传入的 firstTask</span></span><br><span class="line">        w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">      <span class="comment">// 此处发现 Worker 里面居然还有个 therad 线程，不过想想也是，没有线程怎么异步执行呢。点进 Worker 的构造方法看一眼就会发现，这个线程就是由我们自定义的 threadFactory 来创建的，所以核心线程名称就是我们之前设定好的名字。this.thread = getThreadFactory().newThread(this);</span></span><br><span class="line">        <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                        (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                    workers.add(w);</span><br><span class="line">                    <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                        largestPoolSize = s;</span><br><span class="line">                    workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">              <span class="comment">// worker 实例成功创建后，让它启动起来</span></span><br><span class="line">                t.start();</span><br><span class="line">                workerStarted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是 ArrayBlockingQueue 类的  offer 方法，在 <code>enqueue(e)</code>处进入队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    checkNotNull(e);</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (count == items.length)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 进入队列</span></span><br><span class="line">            enqueue(e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们先来调试一波，看看入队列时这些方法的执行情况，在三个 if 处分别设置断点，在 addWorker 和 offer 方法靠前的未知打断点，确定是否会进入。</p><p>第一次调用 invokeAll：addWorker 进入5次，offer 方法进入5次。</p><p>第二次调用 invokeAll：addWorker 进入0次，offer 方法进入10次（可能是5-10次）。</p><p>那么发现了新的问题：程序居然没报错！正常执行完成！这不科学！</p><p>带着疑惑，重新 debug，居然还没报错！难道之前的异常是偶然吗？</p><p>以最快速度连按 F9 debug了几次，有时候报错。。</p><p>重新运行 run 了几次，次次报错。。</p><p>怀疑人生了。。</p><p>此时<strong>墨菲定律</strong>在我头脑中回响，”偶然事件存在必然的因素”。那么大胆猜测，这个原因极有可能是队列消费速度较慢导致的，去查看消费部分的源码。由于 worker 也是一个线程，那么肯定有类似的 run 方法：</p><p>查看 ThreadPoolExecutor 类 的 Worker 这个内部类，找到 <code>run()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">runWorker(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 run 方法调用的是 ThreadPoolExecutor 类里的 <code>runWorker(this)</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">    Thread wt = Thread.currentThread();</span><br><span class="line">  <span class="comment">// 此处注意，将 worker 里存入的 firstTask 取出来，交给下面的 while 去执行</span></span><br><span class="line">    Runnable task = w.firstTask;</span><br><span class="line">  <span class="comment">// 将 worker 里的 firstTask 属性置空</span></span><br><span class="line">    w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">    w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 如果 task 不为空，即取出的 firstTask 不为空，则执行；否则调用 getTask() 方法获取 task 再执行</span></span><br><span class="line">        <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            w.lock();</span><br><span class="line">            <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">            <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">            <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">            <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                    (Thread.interrupted() &amp;&amp;</span><br><span class="line">                            runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                    !wt.isInterrupted())</span><br><span class="line">                wt.interrupt();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// 此处为空实现，可自定义</span></span><br><span class="line">                beforeExecute(wt, task);</span><br><span class="line">                Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">// 调用 task 的 run 方法执行任务</span></span><br><span class="line">                    task.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    afterExecute(task, thrown);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                task = <span class="keyword">null</span>;</span><br><span class="line">                w.completedTasks++;</span><br><span class="line">                w.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看 ThreadPoolExecutor 类下的 <code>getTask()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Are workers subject to culling?</span></span><br><span class="line">        <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class="line">                &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 此处为出队列操作，poll 和 take 的区别在于，poll 会等待指定时间，而 take 是阻塞的，会一直等待</span></span><br><span class="line">            Runnable r = timed ?</span><br><span class="line">                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">                    workQueue.take();</span><br><span class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            timedOut = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">            timedOut = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里，猜测二也就不攻自破，出队列后任务才会被执行，所以某个任务出队列后，执行成功与否与队列再无瓜葛。(注意这个说法只针对默认代码，如果自定义了拒绝策略是可以将被 interrupt 的线程重新塞回队列里的)</p><h3 id="两次猜测失败后的总结"><a href="#两次猜测失败后的总结" class="headerlink" title="两次猜测失败后的总结"></a>两次猜测失败后的总结</h3><ol><li><p>队列是异步消费的，但入队是同步进行的，如果队列的容量不足以承载要存入队列的任务数，就会被拒绝。(虽然是 ArrayBlockQueue 的特性，但这是通过 debug 以及 run 后观察到的)</p></li><li><p>第一次 addWorker 方法执行了5次，offer 执行了5次；第二次则是 0 次，10 次。刚才忽略了这个细节，那么需要重新找到相应的源码阅读。</p></li><li><p>任务从队列中移除与任务是否执行完毕无关，先移除，后执行。</p></li><li><p>我们创建的任务，是由 worker 核心线程去调用任务的 run 方法来同步执行的，而不是调用任务实例的 start 去异步执行，这也就是为什么 invokeAll 可以获取到返回值的原因所在。</p><p><strong>备注：</strong>这里有点绕，任务实例指的是我们最开始在 for 循环中创建的10个tasks <code>new InvokeAllThread()</code>，为什么继承了 Callable 明明改写的是 <code>call()</code>方法，但却有 <code>run()</code>方法可以被调用呢？这是因为在 <code>invokeAll()</code>方法执行<code>execute()</code>方法前，通过<code>RunnableFuture&lt;T&gt; f = newTaskFor(t);</code>进行了包装。</p></li></ol><h3 id="复查源码，真相大白"><a href="#复查源码，真相大白" class="headerlink" title="复查源码，真相大白"></a>复查源码，真相大白</h3><p>查看 ThreadPoolExecutor 类下的 execute() 方法，创建 worker 前的判断如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; ...&#125;</span><br></pre></td></tr></table></figure><p>第一次调用 invokeAll 时，线程池中的核心线程 worker 数为0，小于 corePoolSize，所以前5次会创建 worker 核心线程并返回，此时随着 worker 的创建，我们创建的10个任务中的5个也会随着 worker 的创建作为 firstTask 属性被传进去。后5个任务则被放入 queue 中。</p><p>第二次调用 invokeAll 时，线程池中的核心数已经是5，所以10个任务都会被放入 queue 中异步消费，但是我们的 queue 的容量为5。如果消费速度快于入队速度(debug)，那么10个任务会正常执行。但是入队速度太快的话(run)，前5个肯定可以入队，后面的5个几乎都会被拒绝。</p><h3 id="问题解决方案"><a href="#问题解决方案" class="headerlink" title="问题解决方案"></a>问题解决方案</h3><ol><li>对于固定大小的线程池，我们要按照实际情况设置 queue 和 worker 的数量。根据任务类型（IO/CPU）以及机器配置（CPU 核数等）设置 worker 核心线程数；而根据我们的任务多少来设定 queue 的大小，而不是 queue + worker 的总数。</li><li>重写拒绝策略，将被丢弃的任务重新 put 回队列中去，put 是阻塞的。</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://segmentfault.com/a/1190000015410618">ThreadPoolExecutor源码分析及阻塞提交任务方法</a></p><p><a href="https://www.cnblogs.com/onlywujun/p/3565082.html">Thread的中断机制(interrupt)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客要点</title>
      <link href="blog/2019/0719:%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%A6%81%E7%82%B9/"/>
      <url>blog/2019/0719:%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%A6%81%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>跟<a href="http://ganlu.ren/">同事</a>一次普通的聊天，谈论到个人博客后，他帮我创建了 github 的博客雏形，从此一发不可收拾。。</p><p>一周时间，每天下班后整到半夜2点多，终于搭建完毕。给大家分享下搭建博客核心要点。</p><span id="more"></span><p>流程参考：</p><p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a></p><p><a href="https://blog.csdn.net/KNIGH_YUN/article/details/79774344">https://blog.csdn.net/KNIGH_YUN/article/details/79774344</a></p><h3 id="github-账户"><a href="#github-账户" class="headerlink" title="github 账户"></a>github 账户</h3><p>创建的仓库名要采用 username.github.io 的形式，才能达到最简洁的 melodyplayer.github.io，不然网站后缀会加斜杠仓库名 “/repoName”，例如：melodyplayer.github.io/melody，增加访问复杂度。</p><h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><p> 记录类型 A 把域名转发到某个 ipv4 地址上。对于 github 来说可以采用这种方式，ping 一下 github 生成的默认域名拿到 ip 输入到记录值里即可，再在相应的仓库里创建 CNAME 文件。</p><ul><li><p>主机记录填 www 或者不填时， 向github 里的 CNAME文件写入 <a href="http://www.melodyplay.cn/">www.melodyplay.cn</a> 。</p></li><li><p>主机记录填二级域名例如 blog 时，则向github 里的 CNAME 文件写入 blog.melodyplay.cn 。</p></li></ul><p>记录类型 CNAME 可以把请求转发到另外一个域名上，此时的记录值输入 melodyplayer.github.io 即可。</p><h3 id="主题相关"><a href="#主题相关" class="headerlink" title="主题相关"></a>主题相关</h3><p>主题列表：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>我的选择：<a href="https://xaoxuu.com/wiki/material-x/">https://xaoxuu.com/wiki/material-x/</a></p><p>修改字体：<a href="https://www.zhangxinxu.com/wordpress/2017/03/css3-font-face-src-local/">https://www.zhangxinxu.com/wordpress/2017/03/css3-font-face-src-local/</a></p><h3 id="hexo-命令"><a href="#hexo-命令" class="headerlink" title="hexo 命令"></a>hexo 命令</h3><p><strong>必读：<a href="https://hexo.io/zh-cn/docs/">hexo 文档</a></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean#清除public目录，该目录由 hexo g 生成</span><br><span class="line">hexo g#生成public目录，如果在source里创建非md文件，会按原样拷贝到public中，例如CNAME的创建</span><br><span class="line">hexo s#本地启动hexo服务</span><br><span class="line">hexo d#部署到远程仓库</span><br><span class="line">hexo new &quot;x&quot;#新建文件</span><br></pre></td></tr></table></figure><h3 id="hexo-配置"><a href="#hexo-配置" class="headerlink" title="hexo 配置"></a>hexo 配置</h3><p>本地调试相应的属性时，hexo 会自动编译less、ejd 等文件，可以实时看到结果。</p><p>如果要上传到多个平台的仓库下，配置形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/melodyplayer/melodyplayer.github.io.git,master</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">https://gitee.com/melodyplayer/melodyplayer.git,master</span></span><br></pre></td></tr></table></figure><h3 id="gitee-博客"><a href="#gitee-博客" class="headerlink" title="gitee 博客"></a>gitee 博客</h3><p>使用 gitee 也可以搭建博客，创建方式类似 github 。</p><p>仓库名要与用户名一致，才能达到最简洁的 melodyplayer.gitee.io 形式。</p><p>gitee 的 ip 好像不是固定的，因此不能在域名解析时直接配置 ip，原来的 CNAME 文件也不会生效。需要通过第三方转发平台如<a href="http://console.mfpad.com/dsahboard">米发</a>做转发，然后再配置域名解析为 CNAME 的方式，但是速度惊人。。的慢。。</p><p>具体配置方式参考：<a href="https://www.jianshu.com/p/b9466c7e339b">https://www.jianshu.com/p/b9466c7e339b</a></p><h3 id="选择图床"><a href="#选择图床" class="headerlink" title="选择图床"></a>选择图床</h3><p>图床选择也纠结了很久，最终选用了 github 单独仓库做图床，使用 <a href="https://github.com/Molunerfinn/PicGo">picgo</a> 上传图片。</p><p>picgo 可以在上传图片前修改文件名，在文件名前加目录/，变相实现图片归档。</p><p>github每个仓库容量1G。</p><p>gitee总容量5G，但是不支持图床。</p><p>其他图床：<a href="https://img.vim-cn.com/">img.vim-cn.com</a>、<a href="https://sm.ms/">https://sm.ms/</a></p><p>使用流程：<a href="https://xaoxuu.com/projects/vim-cn.sh/">https://xaoxuu.com/projects/vim-cn.sh/</a></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>评论系统有很多：</p><p>参考：<a href="https://xaoxuu.com/wiki/material-x/third-party-services/index.html#%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F">https://xaoxuu.com/wiki/material-x/third-party-services/index.html#%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F</a></p><ul><li><p>valine：需要拿身份证实名验证，果断放弃。不在意的朋友可以用下，应该是比较专业的。</p></li><li><p>gittalk：<a href="https://www.voidking.com/2018/07/26/deve-hexo-gitalk-comment-plugin/">https://www.voidking.com/2018/07/26/deve-hexo-gitalk-comment-plugin/</a></p><p>gittalk可能无法创建 issue 的问题：<a href="https://github.com/viosey/hexo-theme-material/issues/622">https://github.com/viosey/hexo-theme-material/issues/622</a></p><p>对于我采用的主题来说，需要在 scripts 中对 id 进行 md5。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (enableGitalk) &#123; %&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;blueimp-md5&#x2F;2.10.0&#x2F;js&#x2F;md5.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var gitalk &#x3D; new Gitalk(&#123;</span><br><span class="line">      clientID: &quot;&lt;%- config.gitalk.clientID %&gt;&quot;,</span><br><span class="line">      ......</span><br><span class="line">        id: md5(location.pathname),  &#x2F;&#x2F; Ensure uniqueness and length less than 50</span><br><span class="line">......</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="牛人博客"><a href="#牛人博客" class="headerlink" title="牛人博客"></a>牛人博客</h3><p>推荐的几个美观易读的牛人博客（临时记录在这里，后期维护到移步大佬）：</p><ul><li><a href="https://xaoxuu.com/">xaouu</a>：我的主题采用的他的，非常感谢。</li><li><a href="http://luokangyuan.com/#">码酱</a>：java基础</li><li><a href="https://blinkfox.github.io/">闪烁之狐</a>：java基础，博客排版华丽</li><li><a href="http://www.jiangxinlingdu.com/">匠心零度</a></li><li><a href="http://blog.didispace.com/">程序猿 DD</a></li><li><a href="http://ityouknow.com/">纯洁的微笑</a></li><li><a href="http://www.iocoder.cn/">芋道源码</a></li></ul><h3 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h3><p><a href="https://my.oschina.net/u/4597914/blog/4708961">hexo更新踩坑</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋律演奏猿</title>
      <link href="blog/2019/0716:%E6%97%8B%E5%BE%8B%E6%BC%94%E5%A5%8F%E7%8C%BF/"/>
      <url>blog/2019/0716:%E6%97%8B%E5%BE%8B%E6%BC%94%E5%A5%8F%E7%8C%BF/</url>
      
        <content type="html"><![CDATA[<p>开始自己的第一个博客，主要记录和分享在工作和学习中用到的一些技术，也会写一些兴趣爱好的文章，分享一些好听的音乐、精彩的电影等等。集工作学习与休闲一体，秉承简单、开放、匠心的精神，演奏程序猿的生活旋律。</p><span id="more"></span><p> <img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/2019/07/%E6%97%8B%E5%BE%8B%E6%BC%94%E5%A5%8F%E7%8C%BF/20190718230905.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
