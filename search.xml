<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大型网站技术架构</title>
      <link href="/blog/2019/1117:%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"/>
      <url>/blog/2019/1117:%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>不逼自己一把，可能连本书都没时间看。。</p><p>终于把李智慧大佬的《大型网站技术架构——核心原理与案例分析》看完了，顺便梳理了全书脉络。本书出版于2013年，正是web系统登峰造极之时，尽管移动互联网相关内容缺席，但是系统架构的主题思想仍然是沿用的，即便是5G时代为可能出现的物联网信息大爆炸而设计的服务器系统。因此放眼现在，该书也是系统架构设计入门不可多得的“武功秘籍”。</p><p>文末会列出一些对该书的思考，欢迎大家在评论区一起探讨优秀的系统架构设计。</p><a id="more"></a><h3 id="大型网站架构演化发展历程"><a href="#大型网站架构演化发展历程" class="headerlink" title="大型网站架构演化发展历程"></a>大型网站架构演化发展历程</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/2019/07/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8C%96%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B.png" alt></p><h3 id="大型网站架构模式"><a href="#大型网站架构模式" class="headerlink" title="大型网站架构模式"></a>大型网站架构模式</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/2019/07/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F.png" alt></p><h3 id="大型网站核心架构要素"><a href="#大型网站核心架构要素" class="headerlink" title="大型网站核心架构要素"></a>大型网站核心架构要素</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/2019/07/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E8%A6%81%E7%B4%A0.png" alt></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ol><li><p><strong>大型网站发展历程</strong></p><p>补充后期淘宝系统架构发展历史：分布式系统之后，应用自研的OceanBase数据库，使用云计算、混合云，服务容器化等技术。</p><p>虽然文中没有提及微服务这个名词，事实上思想已经存在。</p></li><li><p><strong>分布式中间件的应用</strong></p><p>在该书出版后的短短6年，各项技术如雨后春笋出现在大众视野，其中很多分布式中间件已经发展到非常成熟的地步，应用十分广泛。</p><p>分布式缓存：现阶段主流应用层缓存为redis，尤其是redis-cluster模式，在memcached的互不通信的基础上，增加了主从功能，从而实现数据分片和备份。</p><p>分布式消息中间件：ActiveMQ没落，RocketMQ和Kafka盛行，RabbitMQ仍有一席之地。</p></li><li><p><strong>前端缓存</strong></p><p>补充一下移动互联网时代的前端缓存，举个典型的优化案例，网易云音乐的评论系统，用户在评论后点击确定立即看到了自己的评论，其实是缓存在手机app上的信息，而真正的信息此时可能刚刚进入消息队列，并没有持久化到数据库中。</p></li><li><p><strong>线程池参数定义</strong></p><p>此处需要更正，现阶段的线程池个数设置遵循以下规则：</p><p>计算密集型任务，N=CPU数量+1</p><p>IO密集型任务，N=CPU数量 * CPU利用率 * （1 + 线程等待时间/线程CPU时间）</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》——创建型</title>
      <link href="/blog/2019/1111:%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BA%E5%9E%8B/"/>
      <url>/blog/2019/1111:%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BA%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式 Singleton"></a>单例模式 Singleton</h2><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/singleton.png" alt></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>要求生成唯一序列号的环境。</li><li>整个项目需要一个共享访问点或共享数据。例如web页面上的计数器，使用单例保持计数器的值。</li><li>创建对象需要消耗过多资源。例如访问IO和数据库等。</li><li>需要定义大量静态常量和静态方法（如工具类）的环境（也可直接声明为 static 的方式）。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>内存中只有一个实例，减少了内存开销。避免对象频繁的创建、销毁。</li><li>减少系统性能开销。可在应用启动时之间产生单例对象去读取配置，产生其他依赖对象等。</li><li>避免对资源的多重占用。例如写文件只由单例去完成。</li><li>设置全局访问点，优化和共享资源访问。例如由单例类负责所有数据表的映射处理。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>一般没有接口，扩展困难。提供单一实例、接口或抽象类。</li><li>对测试不利。单例没有完成没法测试，业不能 mock 一个虚拟对象。</li><li>与单一职责原则由冲突。一个雷实现一个逻辑，不关心是否单例。是不是单例取决于环境，单例模式把要单例 和 业务逻辑 融合在一个类中。</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>线程同步问题</p><p>高并发时，可能会出现该问题。解决办法：饿汉、懒汉、二次检查等。</p></li><li><p>对象的复制情况</p><p>如果实现了 Cloneable 接口，即使私有构造函数对象仍然可以被复制。因为克隆不需要调用类的构造函数。对于单例类最好不要实现 Cloneable 接口。</p></li></ol><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p>有上限的单例模式**</p><p>决定内存中有多少个实例，修正单例可能存在的性能问题，提供系统的响应速度，例如读取文件在系统启动时完成初始化工作，在内存中启动固定数量的 reader 实例，然后在需要读取文件时就可以快速响应。</p></li></ol><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式</span></span><br><span class="line"><span class="comment"> * 线程不安全，延迟初始化，严格意义上不是不是单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Singleton1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式</span></span><br><span class="line"><span class="comment"> * 线程安全，比较常用，但容易产生垃圾，因为一开始就初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重锁模式</span></span><br><span class="line"><span class="comment"> * 线程安全，延迟初始化。采用双锁机制，安全且在多线程情况下能保持高性能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 避免对象创建时可能在JVM中重排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton3 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton3.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton3();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类单例模式</span></span><br><span class="line"><span class="comment"> * 只有第一次调用 getInstance() 时，虚拟机才加载内部类并初始化 instance</span></span><br><span class="line"><span class="comment"> * 只有一个线程可以获得对象的初始化锁，其他线程无法进行初始化，保证对象的唯一性</span></span><br><span class="line"><span class="comment"> * 目前此方式是所有单例模式中最推荐的模式，但具体还是根据项目选择。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton4 INSTANCE = <span class="keyword">new</span> Singleton4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举单例模式</span></span><br><span class="line"><span class="comment"> * 默认枚举实例的创建时线程安全的，并且在任何情况下都是单例</span></span><br><span class="line"><span class="comment"> * 实际上：枚举类隐藏了私有的构造器；枚举类的域是相应类型的一个实例对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">enum</span> Singleton5 &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton5.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂方法模式-Factory"><a href="#工厂方法模式-Factory" class="headerlink" title="工厂方法模式 Factory"></a>工厂方法模式 Factory</h2><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/factory.png" alt></p><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>需要灵活可扩展的框架时。比如需要设计一个链接邮件服务器的框架，有3种网络协议可选：POP3、IMAP、HTTP，作为产品类，定义接口IConnectMail，然后定义对邮件的操作方法，用不同的方法实现三个具体的产品类（连接方式），再定义一个工厂方法，按照不同的传入条件，选择不同的连接方式。</li><li>用在异构项目中。例如通过webservice与非java项目交互，虽然webservice好撑可以做到异构系统的同构化，但实际会遇到类型问题、WSDL文件的支持问题等。从WSDL中产生的对象都认为是一个产品，然后由一个具体的工厂类进行管理，减少与外围系统的耦合。</li><li>使用在测试驱动开发的框架下。例如测试类A，把与A有关联的B虚拟出来，避免A与B的耦合。该功能由于 JMock 和 EasyMock 的诞生使用场景已经弱化了。</li></ol><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol><li>封装良好，代码结构清晰。只需知道产品类名或约束字符串，屏蔽创建过程，降低模块间的耦合。</li><li>优秀的扩展性。只需增加扩展类，无需修改工厂类。</li><li>屏蔽产品类。接口不变系统中的上层模块就不要发生变化。例如 JDBC 连接数据库，切换数据库需要改动的只是驱动名称。</li><li>解耦框架。高层模块只需要指导产品的抽象类，符合迪米特法则（只关心需要关心的）、依赖倒置原则（只依赖产品类的抽象）、里氏替换原则（使用产品子类替换父类）。</li></ol><h3 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p>缩小为简单工厂模式</p></li><li><p>升级为多个工厂类</p></li><li><p>代替单例模式</p></li><li><p>延迟初始化</p><p>通过map缓存需要重用的对象</p></li></ol><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><ol><li><p><strong>简单工厂模式</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"bmw"</span>.equalsIgnoreCase(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bmw();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"benz"</span>.equalsIgnoreCase(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Benz();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"暂时不生产这个品牌的汽车"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态方法通过反射创建产品类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Car&gt; <span class="function">T <span class="title">getCar</span><span class="params">(Class&lt;T&gt; c)</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        car = (Car) Class.forName(c.getName()).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleFactory simpleFactory = <span class="keyword">new</span> SimpleFactory();</span><br><span class="line">        Car car = simpleFactory.getCar(<span class="string">"bmw"</span>);</span><br><span class="line">        System.out.println(car.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">产品类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"奔驰"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bmw</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"宝马"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>工厂模式</strong></p><p> 不能存在一个工厂生产所有产品的情况，所以需要多个工厂进行不同产品的生产。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂类</span></span><br><span class="line"><span class="comment"> * 多个工厂，封装不同的产品生产流程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Benz();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BmwFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bmw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BenzFactory benzFactory = <span class="keyword">new</span> BenzFactory();</span><br><span class="line">        System.out.println(benzFactory.getCar().getName());</span><br><span class="line"></span><br><span class="line">        BmwFactory bmwFactory = <span class="keyword">new</span> BmwFactory();</span><br><span class="line">        System.out.println(bmwFactory.getCar().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>替代单例模式</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class c = Class.forName(Singleton.class.getName());</span><br><span class="line">            Constructor constructor = c.getDeclaredConstructor();</span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            instance = (Singleton) constructor.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>延迟初始化</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Product&gt; PRODUCT_MAP = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> &lt;T extends Product&gt; <span class="function">T <span class="title">getProduct</span><span class="params">(Class&lt;T&gt; c)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        T product = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (PRODUCT_MAP.containsKey(c.getName())) &#123;</span><br><span class="line">            product = (T) PRODUCT_MAP.get(c.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            T t = c.newInstance();</span><br><span class="line">            PRODUCT_MAP.put(c.getName(), t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product1</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="抽象工厂模式-Abstract-Factory"><a href="#抽象工厂模式-Abstract-Factory" class="headerlink" title="抽象工厂模式 Abstract Factory"></a>抽象工厂模式 Abstract Factory</h2><h3 id="类图-2"><a href="#类图-2" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/abstract_factory.png" alt></p><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>一个对象族（或是一组没有任何关系的对象）都有相同的约束，就可以使用抽象工厂模式。比如文本编辑器和图片处理器都是软件，但是 linux 和 windows 下文本编辑器虽然界面相同，但是代码不同，也就有了共同的约束条件——操作系统。</li></ol><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ol><li>封装性好。高层模块不关心每个产品的实现类，值关心接口。对象的创建由工厂类负责。高层模块只需要知道工厂类有哪些就行。</li><li>产品族内的约束为非公开状态。例如下面代码中约定每生产1个发动机，需要设计出3种外形与之匹配。</li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol><li>产品族扩展非常困难。如果新增一个产品，需要修改抽象工厂类、几个实现类，严重违反开闭原则。</li></ol><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>与工厂模式的区别</p><p>工厂模式用来创建同一个产品的不同类型，如汽车里的奔驰、宝马，抽象工厂模式用来创建不同类的产品，汽车工厂设计汽车造型，生产发动机等。一般来说产品种类单一适合用工厂模式，如果有多个种类各种类型，更适合用抽象工厂模式。</p></li><li><p>产品族扩展困难，产品等级扩展容易</p><p>也就是横向扩展容易，纵向扩展困难。例如下面代码新增车型奥迪，只需要新增奥迪工厂类即可。从这一点上，抽象工厂符合开闭原则。</p></li></ol><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> DesignFactory <span class="title">designAppearance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> EngineFactory <span class="title">produceEngine</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品类型</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DesignFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">design</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EngineFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BmwDesignFactory</span> <span class="keyword">extends</span> <span class="title">DesignFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">design</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"设计宝马造型"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzDesignFactory</span> <span class="keyword">extends</span> <span class="title">DesignFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">design</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"设计奔驰造型"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BmwEngineFactory</span> <span class="keyword">extends</span> <span class="title">EngineFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产宝马发动机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzEngineFactory</span> <span class="keyword">extends</span> <span class="title">EngineFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产奔驰发动机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BmwFactory</span> <span class="keyword">extends</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DesignFactory <span class="title">designAppearance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BmwDesignFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EngineFactory <span class="title">produceEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BmwEngineFactory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BmwFactory bmwFactory = <span class="keyword">new</span> BmwFactory();</span><br><span class="line">        bmwFactory.designAppearance().design();</span><br><span class="line">        bmwFactory.produceEngine().produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="建造者模式-Builder"><a href="#建造者模式-Builder" class="headerlink" title="建造者模式 Builder"></a>建造者模式 Builder</h2><h3 id="类图-3"><a href="#类图-3" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/builder.png" alt></p><h3 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>相同的方法，不同的执行顺序，产生不同的事件结果。</li><li>多个部件或零件都可以装配到一个对象中，但是产生的运行结果又不相同。</li><li>产品类非常复杂，或者产品类中的调用顺序不同产生了不同的效能。</li><li>对象创建过程中会使用到系统中的一些其他对象，这些对象在产品创建过程中不易得到时，可采用建造者模式封装该对象的创建过程。这种场景只能是一个补偿方法，因为一个对象不容易获得，在设计阶段竟然没发觉，而要通过创建者模式柔化创建过程，本身已经违反设计的最初目标。</li><li>当一个类构造器需要传入很多参数时，如果创建这个类的实例，代码可读性差，可用 builder 模式重构。如 lombok 的 @Builder 注解。</li></ol><h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><ol><li>封装性好。使客户端不必知道产品内部组成的细节，只关注产生的对象和要素。</li><li>建造者独立，更容易扩展。多个 builder 相互独立，对系统的扩展非常有利。</li><li>便于控制细节风险。具体建造者独立，因此可以对建造过程逐步细化，而不对其他模块产生任何影响。</li></ol><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>与工厂模式的区别</p><p>建造者模式最主要的功能是方法的调用顺序安排，通俗讲就是零件的装配，顺序不同对象也不同。即关注的是零件类型和装配工艺（顺序）。</p><p>工厂方法主要职责是创建零件，而不关心组装顺序。</p></li></ol><h3 id="扩展-2"><a href="#扩展-2" class="headerlink" title="扩展"></a>扩展</h3><ol><li>与模板方法模式进行结合</li></ol><h3 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setPart</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"产品做某事"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Product product = <span class="keyword">new</span> Product();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setName(<span class="string">"默认名字"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        builder.setPart();</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Director director = <span class="keyword">new</span> Director(<span class="keyword">new</span> ConcreteProduct());</span><br><span class="line">        Product product = director.getBuilder();</span><br><span class="line">        product.doSomeThing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式 Prototype"></a>原型模式 Prototype</h2><h3 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>资源优化场景。类初始化消耗较多资源，包括数据、硬件等。</li><li>性能和安全要求的场景。避免通过 new 产生一个对象需要非常繁琐的数据准备或访问权限。</li><li>一个对象多个修改者的场景。拷贝多个对象供各个调用者使用。</li><li>原型模式一般与工厂方法模式一起使用，通过 clone 方法创建一个对象，然后由工厂方法提供给调用者。</li></ol><h3 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h3><ol><li>性能优良。内存二进制流的拷贝，比直接 new 一个对象性能好很多，特别是在循环体内产生大量对象。</li><li>逃避构造函数的约束。直接内存拷贝，不会执行构造函数，即使是 private 也可以克隆。双刃剑。</li></ol><h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>构造函数不会被执行</p></li><li><p>深拷贝和浅拷贝</p><p>使用原型模式时，引用的成员变量必须满足两个条件才不会被拷贝：一是类的成员变量，而不是方法内变量；二必须时一个可变得引用对象，而不是原始类型或不可变对象。</p><p>深拷贝和浅拷贝建议不要混合使用，特别是涉及类的继承时，父类有多个引用的情况就非常复杂，建议深拷贝和浅拷贝分开实现。</p></li><li><p>clone 与 final 有冲突。要使用 clone，类成员变量上就不能加 final 修饰。</p></li></ol><h3 id="代码演示-4"><a href="#代码演示-4" class="headerlink" title="代码演示"></a>代码演示</h3><ol><li><p><strong>构造函数不执行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Prototype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造函数被执行。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Prototype <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Prototype) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Prototype prototype = <span class="keyword">new</span> Prototype();</span><br><span class="line">        Prototype clone = prototype.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>深拷贝与浅拷贝</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LightClone</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> LightClone <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (LightClone) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addValue</span><span class="params">(String value)</span> </span>&#123; list.add(value); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getValueList</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.list; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        LightClone origin = <span class="keyword">new</span> LightClone();</span><br><span class="line">        origin.addValue(<span class="string">"111"</span>);</span><br><span class="line">        LightClone clone = origin.clone();</span><br><span class="line">        clone.addValue(<span class="string">"222"</span>);</span><br><span class="line">        System.out.println(origin.getValueList());</span><br><span class="line">        System.out.println(clone.getValueList());</span><br><span class="line">        System.out.println(origin.getValueList() == clone.getValueList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeepClone</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DeepClone <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        DeepClone clone = (DeepClone) <span class="keyword">super</span>.clone();</span><br><span class="line">        clone.list = (ArrayList&lt;String&gt;) clone.list.clone();</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addValue</span><span class="params">(String value)</span> </span>&#123; list.add(value); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getValueList</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.list; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        DeepClone origin = <span class="keyword">new</span> DeepClone();</span><br><span class="line">        origin.addValue(<span class="string">"111"</span>);</span><br><span class="line">        DeepClone clone = origin.clone();</span><br><span class="line">        clone.addValue(<span class="string">"222"</span>);</span><br><span class="line">        System.out.println(origin.getValueList());</span><br><span class="line">        System.out.println(clone.getValueList());</span><br><span class="line">        System.out.println(origin.getValueList() == clone.getValueList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>增加 final 的拷贝</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalClone</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> FinalClone <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        FinalClone clone = (FinalClone) <span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="comment">// 下面这行代码报错</span></span><br><span class="line">        <span class="comment">// clone.list = (ArrayList&lt;String&gt;) this.list.clone();</span></span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式之禅》——结构型</title>
      <link href="/blog/2019/1111:%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E2%80%94%E2%80%94%E7%BB%93%E6%9E%84%E5%9E%8B/"/>
      <url>/blog/2019/1111:%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B%E2%80%94%E2%80%94%E7%BB%93%E6%9E%84%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="代理模式-Proxy"><a href="#代理模式-Proxy" class="headerlink" title="代理模式 Proxy"></a>代理模式 Proxy</h2><p>也叫委托模式。许多其他模式如状态模式、策略模式、访问者模式本质上是在特殊场合采用了委托模式。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/proxy.png" alt></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>典型动态代理：Spring AOP</p><p>应用广泛：系统框架、企业平台、事务处理</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>职责清晰：真实角色只需实现实际的业务逻辑，由代理完成事务。</li><li>高扩展性：具体的主题角色不管怎么变化，只要实现了接口，代理类就可以在不做任何修改的情况下使用。</li><li>智能化：动态代理。</li></ol><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p><strong>普通代理</strong></p><p>调用者需要知道代理类的存在才能访问，不用知道真实角色。</p><p>适合扩展性要求较高的场合。实际项目中通常约定禁止new一个真实角色。</p></li><li><p><strong>强制代理</strong></p><p>代理管理由真实角色完成，不能随便new。高层模块只需调用 getProxy 就可以访问真实角色所有方法。必须通过真实角色查找到代理角色才能访问，不允许直接访问真实角色。</p></li><li><p><strong>代理是有个性的</strong></p><p>代理可实现其他接口完成不同的任务。</p><p>代理的目的是在目标对象方法的基础上作增强，进行拦截和过滤。</p></li><li><p><strong>动态代理</strong></p><p>实现阶段不关心代理谁，而在运行阶段才指定代理哪个对象。</p><p>相对来说，自己写代理类的方式是静态代理。</p><p>AOP：Aspect Oriented Programming</p><p>实现思路：实现 InvocationHandler 动态代理接口，重写 invoke() 方法，完成对真实方法的调用。在运行时动态产生代理对象。</p></li></ol><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><ol><li><p><strong>普通代理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject1Impl</span> <span class="keyword">implements</span> <span class="title">Subject1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String str)</span> </span>&#123;System.out.println(<span class="string">"Subject1 做"</span> + str);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理要实现相同接口，高层模块调用时要先构造代理对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NormalProxy</span> <span class="keyword">implements</span> <span class="title">Subject1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Subject1 subject1;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NormalProxy</span><span class="params">(Subject1 subject1)</span> </span>&#123;<span class="keyword">this</span>.subject1 = subject1;&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String str)</span> </span>&#123;subject1.doSomething(str);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>强制代理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String str)</span></span>;</span><br><span class="line">    <span class="comment">// 获取自身特定的代理类</span></span><br><span class="line">    <span class="function">Subject2 <span class="title">getProxy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject2Impl</span> <span class="keyword">implements</span> <span class="title">Subject2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ForceProxy forceProxy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isProxy()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Subject2 在做"</span> + str);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"请使用自身代理执行 做"</span> + str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否拥有代理</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isProxy</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.forceProxy != <span class="keyword">null</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Subject2 <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.forceProxy == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.forceProxy == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.forceProxy = <span class="keyword">new</span> ForceProxy(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.forceProxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForceProxy</span> <span class="keyword">implements</span> <span class="title">Subject2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Subject2 subject2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForceProxy</span><span class="params">(Subject2 subject2)</span> </span>&#123;<span class="keyword">this</span>.subject2 = subject2;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String str)</span> </span>&#123;subject2.doSomething(str);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Subject2 <span class="title">getProxy</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject2 subject2 = <span class="keyword">new</span> Subject2Impl();</span><br><span class="line">        subject2.doSomething(<span class="string">"家务"</span>);</span><br><span class="line"></span><br><span class="line">        ForceProxy forceProxy = <span class="keyword">new</span> ForceProxy(subject2);</span><br><span class="line">        forceProxy.doSomething(<span class="string">"饭"</span>);</span><br><span class="line"></span><br><span class="line">        subject2.getProxy().doSomething(<span class="string">"运动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>个性化的代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Player</span> </span>&#123;<span class="function"><span class="keyword">void</span> <span class="title">doSport</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Boss</span> </span>&#123;<span class="function"><span class="keyword">void</span> <span class="title">invest</span><span class="params">(String str)</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayerImpl</span> <span class="keyword">implements</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSport</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"运动员做XXX运动太出名了"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiImplementProxy</span> <span class="keyword">implements</span> <span class="title">Player</span>, <span class="title">Boss</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Player player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultiImplementProxy</span><span class="params">(Player player)</span> </span>&#123;<span class="keyword">this</span>.player = player;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        player.doSport();</span><br><span class="line">        <span class="keyword">this</span>.invest(<span class="string">"拍电影"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invest</span><span class="params">(String str)</span> </span>&#123;System.out.println(<span class="string">"代理人有钱，给运动员投资"</span> + str);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Player player = <span class="keyword">new</span> PlayerImpl();</span><br><span class="line">        MultiImplementProxy proxy = <span class="keyword">new</span> MultiImplementProxy(player);</span><br><span class="line">        proxy.doSport();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>动态代理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态代理的 handler 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 被代理对象</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Object obj)</span> </span>&#123;<span class="keyword">this</span>.obj = obj;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(obj, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切面接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IAdvice</span> </span>&#123;<span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeforeAdvice</span> <span class="keyword">implements</span> <span class="title">IAdvice</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"前置通知被执行！"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用动态代理类，只做切面增强</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">newInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 寻找 JoinPoint 连接点，AOP框架使用元数据定义</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 执行一个前置通知</span></span><br><span class="line">            <span class="keyword">new</span> BeforeAdvice().exec();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(loader, interfaces, h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具有业务意义的动态代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubjectDynamicProxy</span> <span class="keyword">extends</span> <span class="title">DynamicProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SubjectDynamicProxy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">newProxyInstance</span><span class="params">(Subject4 subject4)</span> </span>&#123;</span><br><span class="line">        ClassLoader loader = subject4.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = subject4.getClass().getInterfaces();</span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler(subject4);</span><br><span class="line">        <span class="keyword">return</span> newInstance(loader, interfaces, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject4</span> </span>&#123;<span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject4Impl</span> <span class="keyword">implements</span> <span class="title">Subject4</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"Subject4 做某事"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高层调用模块——客户端</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">client4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject4 proxy = SubjectDynamicProxy.newProxyInstance(<span class="keyword">new</span> Subject4Impl());</span><br><span class="line">        proxy.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="装饰模式-Decorator"><a href="#装饰模式-Decorator" class="headerlink" title="装饰模式 Decorator"></a>装饰模式 Decorator</h2><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/decorator.png" alt></p><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>需要扩展一个类的功能，或给一个类增加附加功能。</li><li>需要动态地给一个对象增加功能，这些功能可以再动态地撤销。</li><li>需要为一批的兄弟类进行改造或加装功能，首选装饰模式。</li></ol><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol><li><p>装饰类和被装饰类可以独立发展，不会相互耦合。换句话说，Component类无须知道Decorator类，Decorator类是从外部来扩展Component类的功能，而Decorator也不用知道具体的构件。</p><p>对于 Father、Son、GrandSon三个类，如果要在 son 上增强功能，在 Son 上直接修改可能会影响到 GrandSon，但采用 SonDecorator 类来修饰 Son 相当于创建新类，对原来的程序无影响。</p></li><li><p>装饰模式是继承关系的替代方案。对于装饰类 Decorator，不管装饰多少层，返回的对象还是 Component，实现的还是 is-a 的关系。</p><p>继承会增加很多子类，装饰模式可以有效解决类膨胀的问题。</p></li><li><p>装饰模式可以动态地扩展一个实现类的功能。</p><p>想去掉某个封装只需要在高层模块去掉即可，如果用继承就必须要修改子模块。</p></li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li><p>多层的装饰比较复杂。定位问题时不容易发现是那一层装饰出了问题。</p><p>因此尽量减少装饰类的数量，以便降低系统的复杂度。</p></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>与代理模式的比较：类图、代码实现非常相似，区别在于</p><ul><li><p>代理负责接口限定：是否可以调用真实角色，以及是否对发送到真实角色的消息进行变形处理，不对被代理类的功能做任何处理。应用广范。</p></li><li><p>装饰保证接口不变做类的加强，保证被修饰对象功能比原始对象丰富或减弱，但不做准入条件判断和准入参数过滤。例如 JDK 的 java.io.* 包中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OutputStream out = <span class="keyword">new</span> DataOutPutStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"test.txt"</span>));</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SchoolReport</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 成绩单报告</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 家长签名</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sign</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 期末考试成绩报告，如果直接报告分数这么低肯定少不了“竹笋炒肉”</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FinalExamSchoolReport</span> <span class="keyword">extends</span> <span class="title">SchoolReport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"尊敬的XXX家长："</span>);</span><br><span class="line">        System.out.println(<span class="string">"XXX这次考试成绩如下：语文62，数学65，自然63"</span>);</span><br><span class="line">        System.out.println(<span class="string">"家长签名："</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sign</span><span class="params">(String name)</span> </span>&#123;System.out.println(<span class="string">"家长签名为："</span> + name);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">SchoolReport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SchoolReport sr;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(SchoolReport sr)</span> </span>&#123;<span class="keyword">this</span>.sr = sr;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;sr.report();&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sign</span><span class="params">(String name)</span> </span>&#123;sr.sign(name);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果只汇报自己的成绩，太低容易挨揍，把班里的最高分作为背景铺垫一下，相对来说分就没那么低了</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HighScoreDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HighScoreDecorator</span><span class="params">(SchoolReport sr)</span> </span>&#123;<span class="keyword">super</span>(sr);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        reportHighScore();</span><br><span class="line">        <span class="keyword">super</span>.report();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reportHighScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这次考试全班最高分，语文75，数学78，自然82"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再来个排名的装饰，虽然分低但是排名不靠后，相对也还是不错</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SortDecorator</span><span class="params">(SchoolReport sr)</span> </span>&#123;<span class="keyword">super</span>(sr);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.report();</span><br><span class="line">        reportSort();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reportSort</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"全班60人，我的排名32"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SchoolReport sr = <span class="keyword">new</span> FinalExamSchoolReport();</span><br><span class="line">        sr = <span class="keyword">new</span> HighScoreDecorator(sr);</span><br><span class="line">        sr = <span class="keyword">new</span> SortDecorator(sr);</span><br><span class="line">        sr.report();</span><br><span class="line">        <span class="comment">// 报告完之后老爸一看还行，免了一顿打把字签了</span></span><br><span class="line">        sr.sign(<span class="string">"XXX的爸爸"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="适配器模式-Adapter"><a href="#适配器模式-Adapter" class="headerlink" title="适配器模式 Adapter"></a>适配器模式 Adapter</h2><p>也叫变压器模式、包装模式（包装模式包括装饰模式）。</p><h3 id="类图-2"><a href="#类图-2" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/adapter.png" alt></p><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li><p>有动机修改一个已经投产中的接口时，比如系统扩展需要使用一个已有或新建的类，但这个类又不符合系统的接口，采用适配器模式。</p><p>作为补偿模式，用来解决接口不相容的问题。</p></li></ol><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ol><li>让两个没有关联的类一起运行。</li><li>增加类的透明性，高层模块不需要关注源角色怎么执行。</li><li>提高类的复用度，源角色在原有系统中可以正常使用，而在目标角色中也可以发挥新作用。</li><li>灵活性好，不需要适配器时删除掉即可。</li></ol><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>在详细设计阶段不要考虑使用适配器模式，它是为了解决正在服役的项目问题，减少代码修改带来的风险。</li><li>项目一定要遵守依赖倒置原则和里氏替换原则，否则即使使用适配器模式改动也很大。</li></ol><h3 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p><strong>类适配器</strong></p><p>通过继承进行适配。智能通过覆写源角色的方法进行扩展。</p></li><li><p><strong>对象适配器</strong></p><p>通过关联、聚合进行适配。适用于多接口适配。可以灵活修补源角色的隐形缺陷、关联其他对象等。实际项目中对象适配器使用场景较多。</p></li></ol><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><ol><li><p><strong>类适配器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;<span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TargetImpl</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"目标实现类执行request"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"源角色要做的事情"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"适配器要做的事"</span>);</span><br><span class="line">        <span class="keyword">super</span>.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 原逻辑</span></span><br><span class="line">        Target target = <span class="keyword">new</span> TargetImpl();</span><br><span class="line">        target.request();</span><br><span class="line">        <span class="comment">// 使用适配器后，也拥有了request方法，扩展了新功能</span></span><br><span class="line">        Target adapter = <span class="keyword">new</span> Adapter();</span><br><span class="line">        adapter.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>对象适配器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户信息</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUserInfo</span> </span>&#123;<span class="function">Map <span class="title">getUserInfo</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> <span class="keyword">implements</span> <span class="title">IUserInfo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getUserInfo</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> HashMap();&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUserHomeInfo</span> </span>&#123;<span class="function">Map <span class="title">getHomeInfo</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUserOfficeInfo</span> </span>&#123;<span class="function">Map <span class="title">getOfficeInfo</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserHomeInfo</span> <span class="keyword">implements</span> <span class="title">IUserHomeInfo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getHomeInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"homeAddress"</span>, <span class="string">"北京市海淀区奥林匹克公园"</span>);</span><br><span class="line">        map.put(<span class="string">"homePhone"</span>, <span class="string">"家庭电话：123456"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserOfficeInfo</span> <span class="keyword">implements</span> <span class="title">IUserOfficeInfo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getOfficeInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"officeAddress"</span>, <span class="string">"办公地址：鸟巢"</span>);</span><br><span class="line">        map.put(<span class="string">"officePhone"</span>, <span class="string">"办公电话：222333"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户基本信息，适配home和office两个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBaseInfo</span> <span class="keyword">implements</span> <span class="title">IUserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IUserHomeInfo userHomeInfo;</span><br><span class="line">    <span class="keyword">private</span> IUserOfficeInfo userOfficeInfo;</span><br><span class="line">    <span class="keyword">private</span> Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserBaseInfo</span><span class="params">(IUserHomeInfo userHomeInfo, IUserOfficeInfo userOfficeInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userHomeInfo = userHomeInfo;</span><br><span class="line">        <span class="keyword">this</span>.userOfficeInfo = userOfficeInfo;</span><br><span class="line">        map.putAll(userHomeInfo.getHomeInfo());</span><br><span class="line">        map.putAll(userOfficeInfo.getOfficeInfo());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getUserInfo</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> map;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdapterClient2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IUserHomeInfo homeInfo = <span class="keyword">new</span> UserHomeInfo();</span><br><span class="line">        IUserOfficeInfo officeInfo = <span class="keyword">new</span> UserOfficeInfo();</span><br><span class="line">        IUserInfo userInfo = <span class="keyword">new</span> UserBaseInfo(homeInfo, officeInfo);</span><br><span class="line">        Map info = userInfo.getUserInfo();</span><br><span class="line">        System.out.println(info.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="组合模式-Composite"><a href="#组合模式-Composite" class="headerlink" title="组合模式 Composite"></a>组合模式 Composite</h2><p>也叫合成模式、部分—整体模式，将对象组合成树形结构用来表示部分与整体的关系。</p><h3 id="类图-3"><a href="#类图-3" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/design/composite.png" alt></p><h3 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>维护和展示部分—整体关系的场景，如树形菜单、文件盒文件夹管理。</li><li>从一个整体中能够独立出部分模块或功能的场景。</li></ol><h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><ol><li><p>高层模块调用简单</p><p>一棵树形结构中的所有节点都是Component，局部和整体对调用者来说没有任何区别。高层模块不用关心处理的是单个对象还是整个组合结构。</p></li><li><p>节点自由增加</p><p>增加树枝节点、树叶节点非常容易，符合开闭原则，有利于维护。</p></li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol><li><p>不符合依赖倒置原则</p><p>场景类中树叶和树枝直接使用了实现类，限制了接口的影响范围。</p></li></ol><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>只要是树形结构，就要考虑使用组合模式。</li><li>体现局部和整体的关系，当关系比较深时，考虑组合模式。</li></ol><h3 id="扩展-2"><a href="#扩展-2" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p><strong>真实的组合模式</strong></p><p>实际使用中仍需组装这棵树，使用关系型数据库或者其他方式存储树形结构。</p></li><li><p><strong>安全模式</strong></p><p>树枝节点和树叶节点彻底分开，树枝节点单独拥有用来组合的方法，这种方法比较安全。</p></li><li><p><strong>透明模式</strong></p><p>把用来组合使用的方法放到抽象类中，不管叶子对象还是数值对象都有相同的结构。通过判断 getChildren 的返回值确认是叶子节点还是树枝节点，如果处理不当，会在运行期出问题。</p></li><li><p><strong>组合模式的遍历</strong></p><p>从上往下遍历没有问题，如果从下往上遍历，则需要设置 parent 属性。从而实现后序、中序等遍历方式。</p></li><li><p><strong>树叶、树枝节点排列顺序</strong></p><p>不用list，改用treeSet存储对象即可，可以加上实现 Comparable 接口，覆盖 compareTo 方法。</p></li></ol><h3 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h3><ol><li><p><strong>安全模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String position;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Staff</span><span class="params">(String name, String position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.position = position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.toString();&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">(String name, String position)</span> </span>&#123;<span class="keyword">super</span>(name, position);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Branch</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line">    List&lt;Staff&gt; subordinate = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Branch</span><span class="params">(String name, String position)</span> </span>&#123;<span class="keyword">super</span>(name, position);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStaff</span><span class="params">(Staff staff)</span> </span>&#123;<span class="keyword">this</span>.subordinate.add(staff);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Staff&gt; <span class="title">getSubordinate</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.subordinate;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompositeClient1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">getTreeInfo</span><span class="params">(Branch root)</span> </span>&#123;</span><br><span class="line">        String info = <span class="string">""</span>;</span><br><span class="line">        List&lt;Staff&gt; staff = root.getSubordinate();</span><br><span class="line">        <span class="keyword">for</span> (Staff s : staff) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s <span class="keyword">instanceof</span> Leaf) &#123;</span><br><span class="line">                info = info + s.getInfo();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                info = info + s.getInfo() + <span class="string">"\t"</span> + getTreeInfo(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>透明模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add、remove等方法放在抽象类中</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> List&lt;Component&gt; <span class="title">getChildren</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"未实现 add"</span>);&#125;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"未实现 remove"</span>);&#125;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">List&lt;Component&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"未实现 getChildren"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Branch2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    List&lt;Component&gt; subordinate = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Branch2</span><span class="params">(List&lt;Component&gt; subordinate)</span> </span>&#123;<span class="keyword">this</span>.subordinate = subordinate;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;<span class="keyword">this</span>.subordinate.add(component);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123;<span class="keyword">this</span>.subordinate.remove(component);&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">List&lt;Component&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.subordinate;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompositeClient2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Component root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Component c : root.getChildren()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c <span class="keyword">instanceof</span> Leaf2) &#123;</span><br><span class="line">                c.printInfo();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                display(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式进阶用法与真实调优案例</title>
      <link href="/blog/2019/1017:%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%B8%8E%E7%9C%9F%E5%AE%9E%E8%B0%83%E4%BC%98%E6%A1%88%E4%BE%8B/"/>
      <url>/blog/2019/1017:%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95%E4%B8%8E%E7%9C%9F%E5%AE%9E%E8%B0%83%E4%BC%98%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p> 正则表达式并不陌生，但当面对复杂的正则表达式：长度长，特殊符号多，多分组的情况下，解析速度会怎样？</p><a id="more"></a><h3 id="正则表达式基础"><a href="#正则表达式基础" class="headerlink" title="正则表达式基础"></a>正则表达式基础</h3><p>为节省版面直击要害，基础内容本文不作赘述，请点击以下链接查看：</p><p><a href="http://tool.oschina.net/uploads/apidocs/jquery/regexp.html" target="_blank" rel="noopener">表达式全集</a></p><p><a href="https://www.cnblogs.com/fozero/p/7868687.html" target="_blank" rel="noopener">史上最全常用正则表达式大全</a></p><h3 id="真实案例：超级慢的正则表达式"><a href="#真实案例：超级慢的正则表达式" class="headerlink" title="真实案例：超级慢的正则表达式"></a>真实案例：超级慢的正则表达式</h3><p>常用的正则表达式一般几秒内解析完毕，那么见过3分钟都没解析出来的正则表达式吗？请往下看：</p><h4 id="解析目标"><a href="#解析目标" class="headerlink" title="解析目标"></a>解析目标</h4><p>过滤请求中不合法的 uri（不包含参数），如包含特殊符号<code>- = + % ?</code>、多个斜杠<code>//</code>、中文等。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>正则表达式：<code>&quot;^(/?[A-Za-z0-9\\-]+/?[A-Za-z0-9\\-]+)+/?&quot;</code></p><p>编写 java 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有方法设置成静态的，方便 main 调用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern URI_PATTERN = Pattern.compile(<span class="string">"^(/?[A-Za-z0-9\\-]+/?[A-Za-z0-9\\-]+)+/?)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateUri</span><span class="params">(String uri)</span> </span>&#123;</span><br><span class="line">  Matcher m = URI_PATTERN.matcher(uri);</span><br><span class="line">  <span class="keyword">return</span> m.matches();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"开始。。。。。。"</span>);</span><br><span class="line">System.out.println(validateUri(<span class="string">"/hotel/getUseraaaaaaaasdfasdfasdfasdfasdf+"</span>));</span><br><span class="line">  System.out.println(<span class="string">"结束。。。。。。"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 validate 方法。</p><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p>6C32G mac pro 跑了3分钟没跑完。。没耐心继续等待，直接中断。</p><h4 id="最简单的解决方案"><a href="#最简单的解决方案" class="headerlink" title="最简单的解决方案"></a>最简单的解决方案</h4><p>简化正则表达式为：<code>^/?([-A-Za-z0-9]/?)+$</code></p><p>但是我们需要知道为什么？如果就想在原来的基础上做修改，该怎么办？</p><h3 id="原因探索：回溯匹配"><a href="#原因探索：回溯匹配" class="headerlink" title="原因探索：回溯匹配"></a>原因探索：回溯匹配</h3><h4 id="猜测：考虑字符太长，以及特殊符号的问题"><a href="#猜测：考虑字符太长，以及特殊符号的问题" class="headerlink" title="猜测：考虑字符太长，以及特殊符号的问题"></a>猜测：考虑字符太长，以及特殊符号的问题</h4><p>测试1：把 uri  中间的 aaaaaasdfsdf 等去掉后，只保留简单的 /hotel/getUser+，很明显速度提上来了。</p><p>测试2：把 uri  中的 + 号提前，变成 /hotel/getUser+aaaaaaaasdfasdfasdfasdfasdf，速度也很快。</p><h4 id="初步结论：非匹配字符的位置会影响正则表达式的执行效率"><a href="#初步结论：非匹配字符的位置会影响正则表达式的执行效率" class="headerlink" title="初步结论：非匹配字符的位置会影响正则表达式的执行效率"></a>初步结论：非匹配字符的位置会影响正则表达式的执行效率</h4><p>为此需要知道正则表达式的执行规则：回溯。</p><p>比如要匹配的字符串是 <code>helloworld,hihaojava</code></p><p>正则表达式是 <code>h(ello|ihao)java</code></p><p>匹配过程：</p><ol><li>从字符串第一个字符 h 开始匹配，可以命中。</li><li>接下来的匹配正则有2个分支 <code>ello</code> 和 <code>ihao</code> 。在 e 处打标记，先从左边的 <code>ello</code> 开始匹配，可以匹配字符串，但是到了 world 的 w 时，与正则中的 j 不一致，该分支匹配结束。接着回溯到刚刚的标记处，开始第二个分支 <code>ihao</code>，无法匹配，接下来正则会从 h 开始匹配字符串。</li><li>从字符串的第二个字符 e 继续匹配，直到正则的第一个字符 h 匹配到字符串的 <code>,</code> 之后匹配成功。</li><li>接着正则的2个分支执行匹配，最终只有 <code>ihao</code>匹配成功，最终匹配到的字符串是 hihaojava。</li></ol><p>看完了正则的匹配过程，就知道为什么前面代码中的正则匹配效率会那么低下了。每个字母都要匹配到最后的+才发现匹配失败，回溯后继续查找，如果忽略其他，只考虑字符串 getUseraaaaaaaasdfasdfasdfasdfasdf+ 和正则 <code>[-A-Za-z0-9]</code> 的影响，时间复杂度就已经为 n^2，类似于以下模拟代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟代码，真实情况远比这个复杂，这里仅为了方便理解</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">  String reg = <span class="string">"-ABCDEFGHIJKMLNOPQRSTUVWSYZabcdefghijkmlnopqrstuvwsyz0123456789"</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> length = s.length();</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">      count ++;</span><br><span class="line">      String idx = s.substring(j, j + <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (!reg.contains(idx)) &#123;</span><br><span class="line">        System.out.println(<span class="string">"匹配失败！特殊字符："</span> + idx);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"匹配字符："</span> + idx);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">"一共匹配了 "</span> + count + <span class="string">"次！字符串长度为 "</span> + length);</span><br><span class="line">  <span class="keyword">return</span> i != length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决方法：采用进阶匹配模式"><a href="#解决方法：采用进阶匹配模式" class="headerlink" title="解决方法：采用进阶匹配模式"></a>解决方法：采用进阶匹配模式</h3><h4 id="正则模式：贪婪、勉强、侵占"><a href="#正则模式：贪婪、勉强、侵占" class="headerlink" title="正则模式：贪婪、勉强、侵占"></a>正则模式：贪婪、勉强、侵占</h4><p>假定字符串为：aahelloworldhello</p><ul><li><p>贪婪模式（<code>.*he</code>）：将正则分为两个模式 p1 <code>.*</code> 以及 p2 <code>wo</code> 。</p><ol><li><p>第一轮匹配：p1读入所有字符串，那么p2就没什么都没匹配到。</p></li><li><p>第二轮匹配：字符串被分割为 aahelloworldhell 和 o，p1匹配子串1成功，p2匹配子串2失败。</p></li><li><p>直到字符串分割为 aahelloworld 和 hello时，两个正则模式都匹配成功。匹配到的子串为aahelloworldhe，停止匹配，返回结果。</p></li></ol></li><li><p>勉强模式（<code>.*?he</code>）：最小匹配方式。此时的正则模式为 <code>.*?</code> 和 <code>wo</code>。</p><ol><li>第一次匹配：p1由于是0或任意次，被忽略，用字符串整体去匹配 p2，当然失败。</li><li>第二次匹配：p1读入第一个字符 a，匹配成功，剩余的 ahelloworldhello 由 p2匹配，失败。</li><li>直到字符串分割为 aa 和 helloworldhello，两个正则模式都匹配成功。匹配子串 aahe，返回结果。</li><li>继续匹配，直到字符串分隔为 lloworld 和 hello，匹配子串 lloworldhe，返回结果。</li></ol></li><li><p>侵占模式（<code>.*+he</code>）：也叫占用模式。匹配开始时读入所有字符串和 p1匹配成功，但没有剩余字符串去和 p2匹配，因此返回匹配失败。</p></li></ul><p>说明：贪婪模式和占有模式相比，贪婪模式会在只有部分匹配成功的条件下，依次从多到少减少匹配成功部分模式的匹配数量，将字符留给模式其他部分去匹配。而占用模式则是占有所有能匹配成功部分，绝不留给其他部分使用。</p><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN_GREEDY = Pattern.compile(<span class="string">".*he"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN_FORCED = Pattern.compile(<span class="string">".*?he"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN_OCCUPIED = Pattern.compile(<span class="string">".*+he"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String s = <span class="string">"aahelloworldhello"</span>;</span><br><span class="line">  Matcher greedy = PATTERN_GREEDY.matcher(s);</span><br><span class="line">  <span class="keyword">while</span> (greedy.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">"贪婪模式：匹配到子串 "</span> + greedy.group());</span><br><span class="line">    System.out.println(<span class="string">"贪婪模式：查找匹配到的子串在原始串中的索引位置 "</span> + greedy.start());</span><br><span class="line">    System.out.println(<span class="string">"贪婪模式：查找匹配到的子串最后一个字符串在原串中的位置 "</span> + greedy.end());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Matcher forced = PATTERN_FORCED.matcher(s);</span><br><span class="line">  <span class="keyword">while</span> (forced.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">"勉强模式：匹配到子串 "</span> + forced.group());</span><br><span class="line">    System.out.println(<span class="string">"勉强模式：查找匹配到的子串在原始串中的索引位置 "</span> + forced.start());</span><br><span class="line">    System.out.println(<span class="string">"勉强模式：查找匹配到的子串最后一个字符串在原串中的位置 "</span> + forced.end());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Matcher occupied = PATTERN_OCCUPIED.matcher(s);</span><br><span class="line">  System.out.println(<span class="string">"侵占模式：匹配原串任意位置返回的结果： "</span> + occupied.find());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">贪婪模式：匹配到子串 aahelloworldhe</span><br><span class="line">贪婪模式：查找匹配到的子串在原始串中的索引位置 <span class="number">0</span></span><br><span class="line">贪婪模式：查找匹配到的子串最后一个字符串在原串中的位置 <span class="number">14</span></span><br><span class="line">  </span><br><span class="line">勉强模式：匹配到子串 aahe</span><br><span class="line">勉强模式：查找匹配到的子串在原始串中的索引位置 <span class="number">0</span></span><br><span class="line">勉强模式：查找匹配到的子串最后一个字符串在原串中的位置 <span class="number">4</span></span><br><span class="line">勉强模式：匹配到子串 lloworldhe</span><br><span class="line">勉强模式：查找匹配到的子串在原始串中的索引位置 <span class="number">4</span></span><br><span class="line">勉强模式：查找匹配到的子串最后一个字符串在原串中的位置 <span class="number">14</span></span><br><span class="line">  </span><br><span class="line">侵占模式：匹配原串任意位置返回的结果： <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>在这个基础上，之前的难题迎刃而解。对于判断 uri 是否合法的问题，不需要正则做回溯操作，整体不合法则返回匹配失败即可，因此选用侵占模式，需要将之前的正则表达式改进一下。</p><p><strong>原始正则表达式：<code>&quot;^(/?[A-Za-z0-9\\-]+/?[A-Za-z0-9\\-]+)+/?&quot;</code></strong></p><p><strong>改进后的正则表达式：<code>&quot;^(/?[A-Za-z0-9\\-]++/?[A-Za-z0-9\\-]++)+/?&quot;</code></strong></p><p>测试后发现速度变为了 ms 级，只增加 + 号，效果显而易见。</p><h3 id="正则高级用法补充"><a href="#正则高级用法补充" class="headerlink" title="正则高级用法补充"></a>正则高级用法补充</h3><p>除了贪婪勉强侵占模式以外，补充一些其他的高级用法。</p><h4 id="获取匹配-Capturing"><a href="#获取匹配-Capturing" class="headerlink" title="获取匹配 Capturing"></a>获取匹配 Capturing</h4><p>系统在幕后将所有的子模式匹配结果保存起来，供我们查找或替换。</p><ul><li><p>后向引用：使用 <code>\数字</code> 代表前面某个子模式的匹配内容，使用 <code>$数字</code> 代表变量。</p><p>例如：匹配合法的 html 标记。</p><p>正则：<code>&lt;h([1-6])&gt;.*?&lt;/h\1&gt;</code></p><p>文本：&lt;h1&gt; text1&lt;/h1&gt;           &lt;h2&gt;text23&lt;/h3&gt;</p><p>其中 &lt;h1&gt;text1&lt;/h1&gt; 被成功匹配。<code>\1</code>代表前面的子模式([1-6])的匹配结果1。</p><p>常见应用：匹配重复单词 <code>(\w+) \1</code>，匹配合法的 html 标记。</p></li></ul><h4 id="非获取匹配-Non-Capturing"><a href="#非获取匹配-Non-Capturing" class="headerlink" title="非获取匹配 Non-Capturing"></a>非获取匹配 Non-Capturing</h4><p>在子模式内部前面添加 <code>?:</code>。表示这个子模式的匹配内容不会被保存，不能用于后向引用中。</p><p>例如：Windows 95 and Windows 98 are the successor. Then Windows 2000 and Windows Xp appeared. Windows Vista is the Latest version of the family.</p><p>正则：<code>Windows (?:[\w]+\b)</code></p><p>匹配：<strong>Windows 95</strong> and <strong>Windows 98</strong> are the successor. Then <strong>Windows 2000</strong> and <strong>Windows Xp</strong> appeared. <strong>Windows Vista</strong> is the Latest version of the family.</p><p>结果：只匹配内容，但并未保存子匹配的结果</p><ul><li><p>正向肯定预查：在子模式内部前面加 <code>?=</code>，子模式仅仅作为条件限制，并不作为匹配结果输出，匹配子模式前面的内容。</p><p>正则：<code>Windows (?=[\d]+\b)</code></p><p>匹配：<strong>Windows</strong> 95 and <strong>Windows</strong> 98 are the successor. Then <strong>Windows</strong> 2000 and Windows Xp appeared. Windows Vista is the Latest version of the family.</p></li><li><p>正向否定预查：在子模式内部前面加 <code>?!</code>。</p><p>正则：<code>Windows (?![\d]+\b)</code></p><p>匹配：Windows 95 and Windows 98 are the successor. Then Windows 2000 and <strong>Windows</strong> Xp appeared. <strong>Windows</strong> Vista is the Latest version of the family.</p></li><li><p>反向肯定预查：在子模式内部前面加 <code>?&lt;=</code>，匹配子模式后面的结果作为匹配结果。</p><p>例如：CNY:100.2 USD:222.1 USD:301.3 HKD:122.1 CNY:114.4</p><p>正则：<code>(?&lt;=CNY:)\d+\.\d</code></p><p>匹配：CNY:<strong>100.2</strong>  USD:222.1 USD:301.3 HKD:122.1 CNY:<strong>114.4</strong></p></li><li><p>反向否定预查：在子模式内部前面加 <code>?&lt;!</code></p><p>正则：<code>(?&lt;!CNY:)\b\d+\.\d</code></p><p>匹配：CNY:100.2 USD:<strong>222.1</strong> USD:<strong>301.3</strong> HKD:<strong>122.1</strong> CNY:114.4</p></li></ul><h4 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h4><ul><li>获取匹配</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"abc def aaa bbb"</span>.replaceAll(<span class="string">"(\\w+)\\s(\\w+)"</span>, <span class="string">"$2 $1"</span>);</span><br><span class="line"><span class="comment">// 结果是 def abc bbb aaa</span></span><br></pre></td></tr></table></figure><ul><li>非获取匹配</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN = Pattern.compile(<span class="string">"Windows (?:[\\w]+\\b)"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN_POSITIVE_YES = Pattern.compile(<span class="string">"Windows (?=[\\d]+\\b)"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN_POSITIVE_NO = Pattern.compile(<span class="string">"Windows (?![\\d]+\\b)"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN_NEGATIVE_YES = Pattern.compile(<span class="string">"(?&lt;=CNY:)\\d+\\.\\d+"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PATTERN_NEGATIVE_NO = Pattern.compile(<span class="string">"(?&lt;!CNY:)\\b\\d+\\.\\d+"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STR1 = <span class="string">"Windows 95 and Windows 98 are the successor. Then Windows 2000 and Windows Xp appeared. Windows Vista is the Latest version of the family."</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STR2 = <span class="string">"CNY:100.25 USD:222.16 USD:301.3 HKD:122.1 CNY:114.4"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Matcher noCapturing = PATTERN.matcher(STR1);</span><br><span class="line">  System.out.println(<span class="string">"\n非获取匹配结果：---------"</span>);</span><br><span class="line">  <span class="keyword">while</span> (noCapturing.find()) &#123;</span><br><span class="line">    System.out.print(noCapturing.group() + <span class="string">"\t"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Matcher positiveYes = PATTERN_POSITIVE_YES.matcher(STR1);</span><br><span class="line">  System.out.println(<span class="string">"\n正向肯定预查结果：---------"</span>);</span><br><span class="line">  <span class="keyword">while</span> (positiveYes.find()) &#123;</span><br><span class="line">    System.out.print(positiveYes.group() + <span class="string">"\t"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Matcher positiveNo = PATTERN_POSITIVE_NO.matcher(STR1);</span><br><span class="line">  System.out.println(<span class="string">"\n正向否定预查结果：---------"</span>);</span><br><span class="line">  <span class="keyword">while</span> (positiveNo.find()) &#123;</span><br><span class="line">    System.out.print(positiveNo.group() + <span class="string">"\t"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Matcher negativeYes = PATTERN_NEGATIVE_YES.matcher(STR2);</span><br><span class="line">  System.out.println(<span class="string">"\n负向肯定预查结果：---------"</span>);</span><br><span class="line">  <span class="keyword">while</span> (negativeYes.find()) &#123;</span><br><span class="line">    System.out.print(negativeYes.group() + <span class="string">"\t"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Matcher negativeNo = PATTERN_NEGATIVE_NO.matcher(STR2);</span><br><span class="line">  System.out.println(<span class="string">"\n负向否定预查结果：---------"</span>);</span><br><span class="line">  <span class="keyword">while</span> (negativeNo.find()) &#123;</span><br><span class="line">    System.out.print(negativeNo.group() + <span class="string">"\t"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">非获取匹配结果：---------</span><br><span class="line">Windows 95Windows 98Windows 2000Windows XpWindows Vista</span><br><span class="line">正向肯定预查结果：---------</span><br><span class="line">Windows Windows Windows</span><br><span class="line">正向否定预查结果：---------</span><br><span class="line">Windows Windows</span><br><span class="line">负向肯定预查结果：---------</span><br><span class="line">100.25114.4</span><br><span class="line">负向否定预查结果：---------</span><br><span class="line">222.16301.3122.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> general </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac单机部署mysql多实例</title>
      <link href="/blog/2019/1004:mac%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2mysql%E5%A4%9A%E5%AE%9E%E4%BE%8B/"/>
      <url>/blog/2019/1004:mac%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2mysql%E5%A4%9A%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p> 单机部署mysql多实例，需要用到 mysql 自带的 mysqld_multi 命令，在目录 support_files 下有 mysqld_multi.server 命令封装。</p><a id="more"></a><h4 id="mysql-版本：5-7-27"><a href="#mysql-版本：5-7-27" class="headerlink" title="mysql 版本：5.7.27"></a>mysql 版本：5.7.27</h4><h3 id="单机多实例配置"><a href="#单机多实例配置" class="headerlink" title="单机多实例配置"></a>单机多实例配置</h3><h4 id="手动创建-my-cnf-文件"><a href="#手动创建-my-cnf-文件" class="headerlink" title="手动创建 my.cnf 文件"></a>手动创建 my.cnf 文件</h4><p>mac 使用 dmg 文件直接安装，不会自动生成 my.cnf 文件，需要手动创建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[mysqld_multi]</span><br><span class="line">mysqld     = /usr/local/mysql/bin/mysqld_safe</span><br><span class="line">mysqladmin = /usr/local/mysql/bin/mysqladmin</span><br><span class="line">user       = root</span><br><span class="line">password   = root</span><br><span class="line"></span><br><span class="line">[mysqld1]</span><br><span class="line">socket     = /tmp/mysql.sock1</span><br><span class="line">port       = 3311</span><br><span class="line">pid-file   = /usr/local/var/mysql/data/data1/hostname.pid1</span><br><span class="line">datadir    = /usr/local/var/mysql/data/data1</span><br><span class="line">language   = /usr/local/mysql/share/english</span><br><span class="line">user       = root</span><br></pre></td></tr></table></figure><h4 id="执行-mysqld-multi-server-start"><a href="#执行-mysqld-multi-server-start" class="headerlink" title="执行 mysqld_multi.server start"></a>执行 mysqld_multi.server start</h4><p>这时会在控制台显示出生成的密码，记住待会儿会进行修改。</p><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -P 3312 -p  -S /tmp/mysql.sock2 password</span><br></pre></td></tr></table></figure><h4 id="连接-mysql"><a href="#连接-mysql" class="headerlink" title="连接 mysql"></a>连接 mysql</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p -P 3312 -S /tmp/mysql.sock2</span><br></pre></td></tr></table></figure><h4 id="关闭mysql"><a href="#关闭mysql" class="headerlink" title="关闭mysql"></a>关闭mysql</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./mysqld_multi.server stop        #关闭所有</span><br><span class="line">./mysqld_multi.server stop 1      #关闭单个</span><br><span class="line">./mysqld_multi.server stop 1-2    #关闭某个范围的实例</span><br></pre></td></tr></table></figure><h3 id="单机多实例主从配置"><a href="#单机多实例主从配置" class="headerlink" title="单机多实例主从配置"></a>单机多实例主从配置</h3><p>必读：<a href="https://blog.51cto.com/superpcm/2094958" target="_blank" rel="noopener">MySQL的主从复制介绍及配置</a></p><p>具体执行顺序按照链接中的顺序操作即可。这里只谈在操作中采的坑以及核心要点。</p><ol><li><p>不要在命令行直接输入密码，例如：<code>mysql -u root -p &#39;root&#39; -P 3312 -S /tmp/mysql.sock2</code></p><p>解决方法：去掉-p后的 ‘root’。<code>mysql -u root -p -P 3312 -S /tmp/mysql.sock2</code></p></li><li><p>从库<code>Slave_IO_Running: Connecting</code> 问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Slave_IO_Running: Connecting</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>解决方法：这个问题多半是未连接到主库专门用来复制的用户，检查用户名，用户权限等。</p></li><li><p>主库备份问题</p><p>关键在于了解参数的意义，可以指定某个数据库进行备份，也可以<code>-A</code>全部备份。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p -S /tmp/mysql/mysql.sock1 -A  &gt; mysql_bak.2019-10-06.sql</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池invokeAll方法详解</title>
      <link href="/blog/2019/0810:%E7%BA%BF%E7%A8%8B%E6%B1%A0invokeAll%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2019/0810:%E7%BA%BF%E7%A8%8B%E6%B1%A0invokeAll%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>线上真实案例，多次调用线程池 ThreadPoolExecutor 的 invokeAll() 方法进行数据统计时任务被拒绝，故事从此开始。</p><p>本文重在讲述问题的产生、抽象、寻找解决方法的过程，并结合源码对原因进行抽丝剥茧般的分析。bug 千千万万，唯有合理的逻辑推理思维才能让这些 bug 显露原形。</p><a id="more"></a><h3 id="问题起源与抽象"><a href="#问题起源与抽象" class="headerlink" title="问题起源与抽象"></a>问题起源与抽象</h3><p>先来看一段简单的代码，定义一个核心线程数5、有界队列5的线程池，然后创建10个任务丢进去执行2次。</p><p>按照以前对线程池执行逻辑的理解，创建的10个线程，会先交给核心线程去执行，5个核心线程满了之后，存放到队列中，刚好存储剩下的5个，按理说10个任务都会正常执行完毕。本次只测试固定大小的线程池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokeAllTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">            <span class="number">60</span> * <span class="number">1000</span>, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">5</span>),</span><br><span class="line">            <span class="keyword">new</span> MyThreadFactory());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Callable&lt;Void&gt;&gt; tasks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            tasks.add(<span class="keyword">new</span> InvokeAllThread());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"第一次任务执行前的executor： "</span> + executor);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor.invokeAll(tasks);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"第一次任务执行完毕后的executor： "</span> + executor);</span><br><span class="line">        System.out.println(<span class="string">"==============第一次任务执行完毕，开始第二次任务============"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            executor.invokeAll(tasks);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      System.out.println(<span class="string">"第二次任务执行完毕后的executor："</span> + executor);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 任务执行线程。通过打印线程名称，观察提交的任务被哪个线程执行</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokeAllThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Void <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给工作线程自定义名字，方便观察提交的任务被哪个线程执行</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> AtomicInteger threadNum = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(r, String.valueOf(threadNum.getAndIncrement()));</span><br><span class="line">            <span class="keyword">if</span> (thread.getPriority() != Thread.NORM_PRIORITY) &#123;</span><br><span class="line">                thread.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> thread;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行程序后发现，第一次调用 invokeAll 正常执行，第二次调用报错。多次执行结果相同。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">第一次任务执行前的executorjava.util.concurrent.ThreadPoolExecutor@30f39991[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">第一次任务执行完毕后的executorjava.util.concurrent.ThreadPoolExecutor@30f39991[Running, pool size = 5, active threads = 0, queued tasks = 0, completed tasks = 10]</span><br><span class="line">==============第一次任务执行完毕，开始第二次任务============</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">Exception in thread "main" java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@3a71f4dd rejected from java.util.concurrent.ThreadPoolExecutor@30f39991[Running, pool size = 5, active threads = 2, queued tasks = 0, completed tasks = 13]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379)</span><br><span class="line">at java.util.concurrent.AbstractExecutorService.invokeAll(AbstractExecutorService.java:238)</span><br><span class="line">at com.aaron.hp.thread.pool.InvokeAllTest.main(InvokeAllTest.java:36)</span><br></pre></td></tr></table></figure><h3 id="问题排查与猜测"><a href="#问题排查与猜测" class="headerlink" title="问题排查与猜测"></a>问题排查与猜测</h3><p>既然程序出现异常，就该调用 debug 模式进行排查，并遵循”大胆猜测，小心求证”的态度，去解决这个问题。</p><h4 id="猜测一：invokeAll-在异步执行后会不会同步等待线程执行完毕获取最终结果"><a href="#猜测一：invokeAll-在异步执行后会不会同步等待线程执行完毕获取最终结果" class="headerlink" title="猜测一：invokeAll 在异步执行后会不会同步等待线程执行完毕获取最终结果"></a>猜测一：invokeAll 在异步执行后会不会同步等待线程执行完毕获取最终结果</h4><p>由于 invokeAll 封装的太好，之前只知道最后会同步等待才能获取返回值。那么现在就需要去证实这个概念。</p><p>进入 invokeAll 方法后，发现调用了<code>f.get()</code>，那么毫无疑问，这个猜测可以排除掉了。</p><p>其实从执行过程的输出内容也可以看出，两次调用 invokeAll 的执行顺序和界限(打印语句) 非常明显。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (tasks == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    ArrayList&lt;Future&lt;T&gt;&gt; futures = <span class="keyword">new</span> ArrayList&lt;Future&lt;T&gt;&gt;(tasks.size());</span><br><span class="line">    <span class="keyword">boolean</span> done = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Callable&lt;T&gt; t : tasks) &#123;</span><br><span class="line">            RunnableFuture&lt;T&gt; f = newTaskFor(t);</span><br><span class="line">            futures.add(f);</span><br><span class="line">          <span class="comment">// 任务被添加后的具体执行</span></span><br><span class="line">            execute(f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = futures.size(); i &lt; size; i++) &#123;</span><br><span class="line">            Future&lt;T&gt; f = futures.get(i);</span><br><span class="line">            <span class="keyword">if</span> (!f.isDone()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 此处同步等待</span></span><br><span class="line">                    f.get();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (CancellationException ignore) &#123;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException ignore) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        done = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> futures;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!done)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = futures.size(); i &lt; size; i++)</span><br><span class="line">                futures.get(i).cancel(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="猜测二：队列里面可能存在第一次调用-invokeAll-执行了但没有删掉的任务，所以才会导致第二次放入队列失败"><a href="#猜测二：队列里面可能存在第一次调用-invokeAll-执行了但没有删掉的任务，所以才会导致第二次放入队列失败" class="headerlink" title="猜测二：队列里面可能存在第一次调用 invokeAll 执行了但没有删掉的任务，所以才会导致第二次放入队列失败"></a>猜测二：队列里面可能存在第一次调用 invokeAll 执行了但没有删掉的任务，所以才会导致第二次放入队列失败</h4><p>由于未阅读源码，猜测只有当创建的任务执行完毕并且销毁之后，才会从队列中真正移除。</p><p>那么就需要查看入队列和出队列的时机。查看 invokeAll 方法中的 <code>execute(f)</code> 方法。</p><p>查看 ThreadPoolExecutor 类下的 execute 方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">  <span class="comment">// 判断工作线程数是否小于核心线程数，如果是则创建 Worker 工作线并返回</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 判断主线程是否在运行，并判断是否入队列成功</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 否则重新创建 Worker 线程，创建失败则抛出拒绝策略</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就会发现入队列的操作在<code>workQueue.offer(command)</code>处完成，而我们提交的任务是由一个叫 Worker 类的实例来执行，<code>addWorker(command, true)</code>创建 Worker 实例。</p><p>那么我们就分别进去这两个方法来看下源码：</p><p>矮油黑人问号脸。。没想到这个  ThreadPoolExecutor 类的 addWorker 这么长，给核心代码写个注释重点关注，扫一眼然后去看 offer 方法(英文注释是源码中自带的)。前面都是校验，创建核心线程处为<code>new Worker(firstTask)</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">                ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">                        firstTask == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        ! workQueue.isEmpty()))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                    wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">break</span> retry;</span><br><span class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">    Worker w = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 上面一堆都是校验，此处才是 Worker 被创建的地方，注意被传入的 firstTask</span></span><br><span class="line">        w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">      <span class="comment">// 此处发现 Worker 里面居然还有个 therad 线程，不过想想也是，没有线程怎么异步执行呢。点进 Worker 的构造方法看一眼就会发现，这个线程就是由我们自定义的 threadFactory 来创建的，所以核心线程名称就是我们之前设定好的名字。this.thread = getThreadFactory().newThread(this);</span></span><br><span class="line">        <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                        (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                    workers.add(w);</span><br><span class="line">                    <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                        largestPoolSize = s;</span><br><span class="line">                    workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">              <span class="comment">// worker 实例成功创建后，让它启动起来</span></span><br><span class="line">                t.start();</span><br><span class="line">                workerStarted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是 ArrayBlockingQueue 类的  offer 方法，在 <code>enqueue(e)</code>处进入队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    checkNotNull(e);</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (count == items.length)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 进入队列</span></span><br><span class="line">            enqueue(e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们先来调试一波，看看入队列时这些方法的执行情况，在三个 if 处分别设置断点，在 addWorker 和 offer 方法靠前的未知打断点，确定是否会进入。</p><p>第一次调用 invokeAll：addWorker 进入5次，offer 方法进入5次。</p><p>第二次调用 invokeAll：addWorker 进入0次，offer 方法进入10次（可能是5-10次）。</p><p>那么发现了新的问题：程序居然没报错！正常执行完成！这不科学！</p><p>带着疑惑，重新 debug，居然还没报错！难道之前的异常是偶然吗？</p><p>以最快速度连按 F9 debug了几次，有时候报错。。</p><p>重新运行 run 了几次，次次报错。。</p><p>怀疑人生了。。</p><p>此时<strong>墨菲定律</strong>在我头脑中回响，”偶然事件存在必然的因素”。那么大胆猜测，这个原因极有可能是队列消费速度较慢导致的，去查看消费部分的源码。由于 worker 也是一个线程，那么肯定有类似的 run 方法：</p><p>查看 ThreadPoolExecutor 类 的 Worker 这个内部类，找到 <code>run()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">runWorker(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 run 方法调用的是 ThreadPoolExecutor 类里的 <code>runWorker(this)</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">    Thread wt = Thread.currentThread();</span><br><span class="line">  <span class="comment">// 此处注意，将 worker 里存入的 firstTask 取出来，交给下面的 while 去执行</span></span><br><span class="line">    Runnable task = w.firstTask;</span><br><span class="line">  <span class="comment">// 将 worker 里的 firstTask 属性置空</span></span><br><span class="line">    w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">    w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 如果 task 不为空，即取出的 firstTask 不为空，则执行；否则调用 getTask() 方法获取 task 再执行</span></span><br><span class="line">        <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            w.lock();</span><br><span class="line">            <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">            <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">            <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">            <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                    (Thread.interrupted() &amp;&amp;</span><br><span class="line">                            runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                    !wt.isInterrupted())</span><br><span class="line">                wt.interrupt();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// 此处为空实现，可自定义</span></span><br><span class="line">                beforeExecute(wt, task);</span><br><span class="line">                Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">// 调用 task 的 run 方法执行任务</span></span><br><span class="line">                    task.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    afterExecute(task, thrown);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                task = <span class="keyword">null</span>;</span><br><span class="line">                w.completedTasks++;</span><br><span class="line">                w.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看 ThreadPoolExecutor 类下的 <code>getTask()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Are workers subject to culling?</span></span><br><span class="line">        <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class="line">                &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 此处为出队列操作，poll 和 take 的区别在于，poll 会等待指定时间，而 take 是阻塞的，会一直等待</span></span><br><span class="line">            Runnable r = timed ?</span><br><span class="line">                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">                    workQueue.take();</span><br><span class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            timedOut = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">            timedOut = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里，猜测二也就不攻自破，出队列后任务才会被执行，所以某个任务出队列后，执行成功与否与队列再无瓜葛。(注意这个说法只针对默认代码，如果自定义了拒绝策略是可以将被 interrupt 的线程重新塞回队列里的)</p><h3 id="两次猜测失败后的总结"><a href="#两次猜测失败后的总结" class="headerlink" title="两次猜测失败后的总结"></a>两次猜测失败后的总结</h3><ol><li><p>队列是异步消费的，但入队是同步进行的，如果队列的容量不足以承载要存入队列的任务数，就会被拒绝。(虽然是 ArrayBlockQueue 的特性，但这是通过 debug 以及 run 后观察到的)</p></li><li><p>第一次 addWorker 方法执行了5次，offer 执行了5次；第二次则是 0 次，10 次。刚才忽略了这个细节，那么需要重新找到相应的源码阅读。</p></li><li><p>任务从队列中移除与任务是否执行完毕无关，先移除，后执行。</p></li><li><p>我们创建的任务，是由 worker 核心线程去调用任务的 run 方法来同步执行的，而不是调用任务实例的 start 去异步执行，这也就是为什么 invokeAll 可以获取到返回值的原因所在。</p><p><strong>备注：</strong>这里有点绕，任务实例指的是我们最开始在 for 循环中创建的10个tasks <code>new InvokeAllThread()</code>，为什么继承了 Callable 明明改写的是 <code>call()</code>方法，但却有 <code>run()</code>方法可以被调用呢？这是因为在 <code>invokeAll()</code>方法执行<code>execute()</code>方法前，通过<code>RunnableFuture&lt;T&gt; f = newTaskFor(t);</code>进行了包装。</p></li></ol><h3 id="复查源码，真相大白"><a href="#复查源码，真相大白" class="headerlink" title="复查源码，真相大白"></a>复查源码，真相大白</h3><p>查看 ThreadPoolExecutor 类下的 execute() 方法，创建 worker 前的判断如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; ...&#125;</span><br></pre></td></tr></table></figure><p>第一次调用 invokeAll 时，线程池中的核心线程 worker 数为0，小于 corePoolSize，所以前5次会创建 worker 核心线程并返回，此时随着 worker 的创建，我们创建的10个任务中的5个也会随着 worker 的创建作为 firstTask 属性被传进去。后5个任务则被放入 queue 中。</p><p>第二次调用 invokeAll 时，线程池中的核心数已经是5，所以10个任务都会被放入 queue 中异步消费，但是我们的 queue 的容量为5。如果消费速度快于入队速度(debug)，那么10个任务会正常执行。但是入队速度太快的话(run)，前5个肯定可以入队，后面的5个几乎都会被拒绝。</p><h3 id="问题解决方案"><a href="#问题解决方案" class="headerlink" title="问题解决方案"></a>问题解决方案</h3><ol><li>对于固定大小的线程池，我们要按照实际情况设置 queue 和 worker 的数量。根据任务类型（IO/CPU）以及机器配置（CPU 核数等）设置 worker 核心线程数；而根据我们的任务多少来设定 queue 的大小，而不是 queue + worker 的总数。</li><li>重写拒绝策略，将被丢弃的任务重新 put 回队列中去，put 是阻塞的。</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://segmentfault.com/a/1190000015410618" target="_blank" rel="noopener">ThreadPoolExecutor源码分析及阻塞提交任务方法</a></p><p><a href="https://www.cnblogs.com/onlywujun/p/3565082.html" target="_blank" rel="noopener">Thread的中断机制(interrupt)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客要点</title>
      <link href="/blog/2019/0719:%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%A6%81%E7%82%B9/"/>
      <url>/blog/2019/0719:%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%A6%81%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>跟<a href="http://ganlu.ren" target="_blank" rel="noopener">同事</a>一次普通的聊天，谈论到个人博客后，他帮我创建了 github 的博客雏形，从此一发不可收拾。。</p><p>一周时间，每天整到半夜2点多，终于搭建完毕。给大家分享下搭建博客核心要点。</p><a id="more"></a><p>流程参考：</p><p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a></p><p><a href="https://blog.csdn.net/KNIGH_YUN/article/details/79774344" target="_blank" rel="noopener">https://blog.csdn.net/KNIGH_YUN/article/details/79774344</a></p><h3 id="github-账户"><a href="#github-账户" class="headerlink" title="github 账户"></a>github 账户</h3><p>创建的仓库名要采用 username.github.io 的形式，才能达到最简洁的 melodyplayer.github.io，不然网站后缀会加斜杠仓库名 “/repoName”，例如：melodyplayer.github.io/melody，增加访问复杂度。</p><h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><p> 记录类型 A 把域名转发到某个 ipv4 地址上。对于 github 来说可以采用这种方式，ping 一下 github 生成的默认域名拿到 ip 输入到记录值里即可，再在相应的仓库里创建 CNAME 文件。</p><ul><li><p>主机记录填 www 或者不填时， 向github 里的 CNAME文件写入 <a href="http://www.melodyplay.cn" target="_blank" rel="noopener">www.melodyplay.cn</a> 。</p></li><li><p>主机记录填二级域名例如 blog 时，则向github 里的 CNAME 文件写入 blog.melodyplay.cn 。</p></li></ul><p>记录类型 CNAME 可以把请求转发到另外一个域名上，此时的记录值输入 melodyplayer.github.io 即可。</p><h3 id="主题相关"><a href="#主题相关" class="headerlink" title="主题相关"></a>主题相关</h3><p>主题列表：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p><p>我的选择：<a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">https://xaoxuu.com/wiki/material-x/</a></p><p>修改字体：<a href="https://www.zhangxinxu.com/wordpress/2017/03/css3-font-face-src-local/" target="_blank" rel="noopener">https://www.zhangxinxu.com/wordpress/2017/03/css3-font-face-src-local/</a></p><h3 id="hexo-命令"><a href="#hexo-命令" class="headerlink" title="hexo 命令"></a>hexo 命令</h3><p><strong>必读：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo 文档</a></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean#清除public目录，该目录由 hexo g 生成</span><br><span class="line">hexo g#生成public目录，如果在source里创建非md文件，会按原样拷贝到public中，例如CNAME的创建</span><br><span class="line">hexo s#本地启动hexo服务</span><br><span class="line">hexo d#部署到远程仓库</span><br><span class="line">hexo new "x"#新建文件</span><br></pre></td></tr></table></figure><h3 id="hexo-配置"><a href="#hexo-配置" class="headerlink" title="hexo 配置"></a>hexo 配置</h3><p>本地调试相应的属性时，hexo 会自动编译less、ejd 等文件，可以实时看到结果。</p><p>如果要上传到多个平台的仓库下，配置形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> </span><br><span class="line"><span class="attr">    github:</span> <span class="attr">https://github.com/melodyplayer/melodyplayer.github.io.git,master</span></span><br><span class="line"><span class="attr">    gitee:</span> <span class="attr">https://gitee.com/melodyplayer/melodyplayer.git,master</span></span><br></pre></td></tr></table></figure><h3 id="gitee-博客"><a href="#gitee-博客" class="headerlink" title="gitee 博客"></a>gitee 博客</h3><p>使用 gitee 也可以搭建博客，创建方式类似 github 。</p><p>仓库名要与用户名一致，才能达到最简洁的 melodyplayer.gitee.io 形式。</p><p>gitee 的 ip 好像不是固定的，因此不能在域名解析时直接配置 ip，原来的 CNAME 文件也不会生效。需要通过第三方转发平台如<a href="http://console.mfpad.com/dsahboard" target="_blank" rel="noopener">米发</a>做转发，然后再配置域名解析为 CNAME 的方式，但是速度惊人。。的慢。。</p><p>具体配置方式参考：<a href="https://www.jianshu.com/p/b9466c7e339b" target="_blank" rel="noopener">https://www.jianshu.com/p/b9466c7e339b</a></p><h3 id="选择图床"><a href="#选择图床" class="headerlink" title="选择图床"></a>选择图床</h3><p>图床选择也纠结了很久，最终选用了 github 单独仓库做图床，使用 <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">picgo</a> 上传图片。</p><p>picgo 可以在上传图片前修改文件名，在文件名前加目录/，变相实现图片归档。</p><p>github每个仓库容量1G。</p><p>gitee总容量5G，但是不支持图床。</p><p>其他图床：<a href="https://img.vim-cn.com/" target="_blank" rel="noopener">img.vim-cn.com</a>、<a href="https://sm.ms/" target="_blank" rel="noopener">https://sm.ms/</a></p><p>使用流程：<a href="https://xaoxuu.com/projects/vim-cn.sh/" target="_blank" rel="noopener">https://xaoxuu.com/projects/vim-cn.sh/</a></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>评论系统有很多：</p><p>参考：<a href="https://xaoxuu.com/wiki/material-x/third-party-services/index.html#%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">https://xaoxuu.com/wiki/material-x/third-party-services/index.html#%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F</a></p><ul><li><p>valine：需要拿身份证实名验证，果断放弃。不在意的朋友可以用下，应该是比较专业的。</p></li><li><p>gittalk：<a href="https://www.voidking.com/2018/07/26/deve-hexo-gitalk-comment-plugin/" target="_blank" rel="noopener">https://www.voidking.com/2018/07/26/deve-hexo-gitalk-comment-plugin/</a></p><p>gittalk可能无法创建 issue 的问题：<a href="https://github.com/viosey/hexo-theme-material/issues/622" target="_blank" rel="noopener">https://github.com/viosey/hexo-theme-material/issues/622</a></p><p>对于我采用的主题来说，需要在 scripts 中对 id 进行 md5。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (enableGitalk) &#123; %&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var gitalk = new Gitalk(&#123;</span><br><span class="line">      clientID: &quot;&lt;%- config.gitalk.clientID %&gt;&quot;,</span><br><span class="line">      ......</span><br><span class="line">        id: md5(location.pathname),  // Ensure uniqueness and length less than 50</span><br><span class="line">......</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="牛人博客"><a href="#牛人博客" class="headerlink" title="牛人博客"></a>牛人博客</h3><p>推荐的几个美观易读的牛人博客（临时记录在这里，后期维护到移步大佬）：</p><ul><li><p><a href="https://xaoxuu.com/" target="_blank" rel="noopener">xaouu</a>：我的主题采用的他的，非常感谢。</p></li><li><p><a href="http://luokangyuan.com/#" target="_blank" rel="noopener">码酱</a>：java基础</p></li><li><p><a href="https://blinkfox.github.io/" target="_blank" rel="noopener">闪烁之狐</a>：java基础，博客排版华丽</p></li><li><p><a href="http://www.jiangxinlingdu.com/" target="_blank" rel="noopener">匠心零度</a></p></li><li><p><a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿 DD</a></p></li><li><p><a href="http://ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a></p></li><li><p><a href="http://www.iocoder.cn/" target="_blank" rel="noopener">芋道源码</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋律演奏猿</title>
      <link href="/blog/2019/0716:%E6%97%8B%E5%BE%8B%E6%BC%94%E5%A5%8F%E7%8C%BF/"/>
      <url>/blog/2019/0716:%E6%97%8B%E5%BE%8B%E6%BC%94%E5%A5%8F%E7%8C%BF/</url>
      
        <content type="html"><![CDATA[<p>开始自己的第一个博客，主要记录和分享在工作和学习中用到的一些技术，也会写一些兴趣爱好的文章，分享一些好听的音乐、精彩的电影等等。集工作学习与休闲一体，秉承简单、开放、匠心的精神，演奏程序猿的生活旋律。</p><a id="more"></a><p> <img src="https://raw.githubusercontent.com/melodyplayer/asserts/master/photo/blog/2019/07/%E6%97%8B%E5%BE%8B%E6%BC%94%E5%A5%8F%E7%8C%BF/20190718230905.jpg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> description </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
